
DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005148  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080052e8  080052e8  000152e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005588  08005588  00015588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800558c  0800558c  0001558c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08005590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  7 .bss          00000244  200001dc  200001dc  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000420  20000420  000201dc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c4f3  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003a2c  00000000  00000000  0003c6ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000899e  00000000  00000000  0004012b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c20  00000000  00000000  00048ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f88  00000000  00000000  000496f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007540  00000000  00000000  0004a678  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000045d4  00000000  00000000  00051bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005618c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c18  00000000  00000000  00056208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052d0 	.word	0x080052d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080052d0 	.word	0x080052d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_InitTick+0x3c>)
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_InitTick+0x40>)
{
 8000bb6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	7818      	ldrb	r0, [r3, #0]
 8000bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbe:	fbb3 f3f0 	udiv	r3, r3, r0
 8000bc2:	6810      	ldr	r0, [r2, #0]
 8000bc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bc8:	f000 f8a0 	bl	8000d0c <HAL_SYSTICK_Config>
 8000bcc:	4604      	mov	r4, r0
 8000bce:	b958      	cbnz	r0, 8000be8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd0:	2d0f      	cmp	r5, #15
 8000bd2:	d809      	bhi.n	8000be8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	4629      	mov	r1, r5
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f856 	bl	8000c8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <HAL_InitTick+0x44>)
 8000be2:	4620      	mov	r0, r4
 8000be4:	601d      	str	r5, [r3, #0]
 8000be6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000be8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000bea:	bd38      	pop	{r3, r4, r5, pc}
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_Init+0x20>)
{
 8000bfa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	6813      	ldr	r3, [r2, #0]
 8000bfe:	f043 0310 	orr.w	r3, r3, #16
 8000c02:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f82f 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f7ff ffd0 	bl	8000bb0 <HAL_InitTick>
  HAL_MspInit();
 8000c10:	f002 f8a6 	bl	8002d60 <HAL_MspInit>
}
 8000c14:	2000      	movs	r0, #0
 8000c16:	bd08      	pop	{r3, pc}
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c1c:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <HAL_IncTick+0x10>)
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <HAL_IncTick+0x14>)
 8000c20:	6811      	ldr	r1, [r2, #0]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	440b      	add	r3, r1
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000208 	.word	0x20000208
 8000c30:	20000000 	.word	0x20000000

08000c34 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000c34:	4b01      	ldr	r3, [pc, #4]	; (8000c3c <HAL_GetTick+0x8>)
 8000c36:	6818      	ldr	r0, [r3, #0]
}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000208 	.word	0x20000208

08000c40 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff fff6 	bl	8000c34 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c48:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	bf1c      	itt	ne
 8000c4c:	4b05      	ldrne	r3, [pc, #20]	; (8000c64 <HAL_Delay+0x24>)
 8000c4e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000c50:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000c52:	bf18      	it	ne
 8000c54:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c56:	f7ff ffed 	bl	8000c34 <HAL_GetTick>
 8000c5a:	1b40      	subs	r0, r0, r5
 8000c5c:	4284      	cmp	r4, r0
 8000c5e:	d8fa      	bhi.n	8000c56 <HAL_Delay+0x16>
  {
  }
}
 8000c60:	bd38      	pop	{r3, r4, r5, pc}
 8000c62:	bf00      	nop
 8000c64:	20000000 	.word	0x20000000

08000c68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c6a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c70:	041b      	lsls	r3, r3, #16
 8000c72:	0c1b      	lsrs	r3, r3, #16
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c78:	0200      	lsls	r0, r0, #8
 8000c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000c82:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c84:	60d3      	str	r3, [r2, #12]
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8e:	b530      	push	{r4, r5, lr}
 8000c90:	68dc      	ldr	r4, [r3, #12]
 8000c92:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c96:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	bf28      	it	cs
 8000ca0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 0501 	mov.w	r5, #1
 8000ca8:	fa05 f303 	lsl.w	r3, r5, r3
 8000cac:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb0:	bf8c      	ite	hi
 8000cb2:	3c03      	subhi	r4, #3
 8000cb4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb6:	4019      	ands	r1, r3
 8000cb8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cba:	fa05 f404 	lsl.w	r4, r5, r4
 8000cbe:	3c01      	subs	r4, #1
 8000cc0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000cc2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	ea42 0201 	orr.w	r2, r2, r1
 8000cc8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	bfaf      	iteee	ge
 8000cce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	f000 000f 	andlt.w	r0, r0, #15
 8000cd6:	4b06      	ldrlt	r3, [pc, #24]	; (8000cf0 <HAL_NVIC_SetPriority+0x64>)
 8000cd8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	bfa5      	ittet	ge
 8000cdc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000ce0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ce8:	bd30      	pop	{r4, r5, pc}
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00
 8000cf0:	e000ed14 	.word	0xe000ed14

08000cf4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000cf4:	0942      	lsrs	r2, r0, #5
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f000 001f 	and.w	r0, r0, #31
 8000cfc:	fa03 f000 	lsl.w	r0, r3, r0
 8000d00:	4b01      	ldr	r3, [pc, #4]	; (8000d08 <HAL_NVIC_EnableIRQ+0x14>)
 8000d02:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d0c:	3801      	subs	r0, #1
 8000d0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d12:	d20a      	bcs.n	8000d2a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d18:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	21f0      	movs	r1, #240	; 0xf0
 8000d1c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d20:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e010 	.word	0xe000e010
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d38:	6801      	ldr	r1, [r0, #0]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <DMA_CalcBaseAndBitshift+0x34>)
 8000d3c:	4299      	cmp	r1, r3
{
 8000d3e:	b510      	push	{r4, lr}
 8000d40:	f04f 0414 	mov.w	r4, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d44:	d809      	bhi.n	8000d5a <DMA_CalcBaseAndBitshift+0x22>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <DMA_CalcBaseAndBitshift+0x38>)
 8000d48:	440a      	add	r2, r1
 8000d4a:	fbb2 f2f4 	udiv	r2, r2, r4
 8000d4e:	0092      	lsls	r2, r2, #2
 8000d50:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000d52:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8000d56:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000d58:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <DMA_CalcBaseAndBitshift+0x3c>)
 8000d5c:	440b      	add	r3, r1
 8000d5e:	fbb3 f3f4 	udiv	r3, r3, r4
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <DMA_CalcBaseAndBitshift+0x40>)
 8000d68:	e7f5      	b.n	8000d56 <DMA_CalcBaseAndBitshift+0x1e>
 8000d6a:	bf00      	nop
 8000d6c:	40020407 	.word	0x40020407
 8000d70:	bffdfff8 	.word	0xbffdfff8
 8000d74:	bffdfbf8 	.word	0xbffdfbf8
 8000d78:	40020400 	.word	0x40020400

08000d7c <HAL_DMA_Init>:
{ 
 8000d7c:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8000d7e:	4604      	mov	r4, r0
 8000d80:	b308      	cbz	r0, 8000dc6 <HAL_DMA_Init+0x4a>
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d82:	2302      	movs	r3, #2
  tmp |=  hdma->Init.Direction        |
 8000d84:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d86:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 8000d8a:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000d8c:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 8000d8e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d90:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8000d92:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d94:	432b      	orrs	r3, r5
 8000d96:	6905      	ldr	r5, [r0, #16]
 8000d98:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9a:	6945      	ldr	r5, [r0, #20]
 8000d9c:	432b      	orrs	r3, r5
 8000d9e:	6985      	ldr	r5, [r0, #24]
 8000da0:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da2:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000da4:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000da8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dac:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8000dae:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8000db0:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8000db2:	f7ff ffc1 	bl	8000d38 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000db6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000db8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dba:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000dbc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000dc0:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000dc6:	2001      	movs	r0, #1
}  
 8000dc8:	bd38      	pop	{r3, r4, r5, pc}

08000dca <HAL_DMA_Start_IT>:
{
 8000dca:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000dcc:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000dd0:	2c01      	cmp	r4, #1
 8000dd2:	d035      	beq.n	8000e40 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8000dd4:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000dd8:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000dda:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8000ddc:	f880 4020 	strb.w	r4, [r0, #32]
 8000de0:	f04f 0600 	mov.w	r6, #0
 8000de4:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8000de8:	d128      	bne.n	8000e3c <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000dea:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dee:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000df0:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000df2:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000df4:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000df6:	f026 0601 	bic.w	r6, r6, #1
 8000dfa:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000dfc:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000dfe:	40bd      	lsls	r5, r7
 8000e00:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000e02:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e04:	6843      	ldr	r3, [r0, #4]
 8000e06:	6805      	ldr	r5, [r0, #0]
 8000e08:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8000e0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8000e0c:	bf0b      	itete	eq
 8000e0e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8000e10:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000e12:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8000e14:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000e16:	b14b      	cbz	r3, 8000e2c <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e18:	6823      	ldr	r3, [r4, #0]
 8000e1a:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e1e:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000e20:	682b      	ldr	r3, [r5, #0]
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000e28:	2000      	movs	r0, #0
 8000e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000e2c:	6823      	ldr	r3, [r4, #0]
 8000e2e:	f043 030a 	orr.w	r3, r3, #10
 8000e32:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	f023 0304 	bic.w	r3, r3, #4
 8000e3a:	e7f0      	b.n	8000e1e <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000e3c:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000e40:	2002      	movs	r0, #2
} 
 8000e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e44 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e44:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000e48:	2a02      	cmp	r2, #2
{  
 8000e4a:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e4c:	d003      	beq.n	8000e56 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4e:	2204      	movs	r2, #4
 8000e50:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000e52:	2001      	movs	r0, #1
 8000e54:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e56:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e58:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e5a:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8000e5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e5e:	f021 010e 	bic.w	r1, r1, #14
 8000e62:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e64:	6811      	ldr	r1, [r2, #0]
 8000e66:	f021 0101 	bic.w	r1, r1, #1
 8000e6a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e6c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fa01 f202 	lsl.w	r2, r1, r2
 8000e74:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000e76:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000e78:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000e7c:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000e80:	b113      	cbz	r3, 8000e88 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8000e82:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000e84:	4620      	mov	r0, r4
 8000e86:	bd10      	pop	{r4, pc}
 8000e88:	4618      	mov	r0, r3
}
 8000e8a:	bd10      	pop	{r4, pc}

08000e8c <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e8c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e8e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8000e90:	6803      	ldr	r3, [r0, #0]
{
 8000e92:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e94:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000e96:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e98:	2404      	movs	r4, #4
 8000e9a:	4094      	lsls	r4, r2
 8000e9c:	4226      	tst	r6, r4
 8000e9e:	d00e      	beq.n	8000ebe <HAL_DMA_IRQHandler+0x32>
 8000ea0:	f015 0f04 	tst.w	r5, #4
 8000ea4:	d00b      	beq.n	8000ebe <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000eaa:	bf5e      	ittt	pl
 8000eac:	681a      	ldrpl	r2, [r3, #0]
 8000eae:	f022 0204 	bicpl.w	r2, r2, #4
 8000eb2:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000eb4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000eb6:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8000eb8:	b373      	cbz	r3, 8000f18 <HAL_DMA_IRQHandler+0x8c>
}  
 8000eba:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8000ebc:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ebe:	2402      	movs	r4, #2
 8000ec0:	4094      	lsls	r4, r2
 8000ec2:	4226      	tst	r6, r4
 8000ec4:	d012      	beq.n	8000eec <HAL_DMA_IRQHandler+0x60>
 8000ec6:	f015 0f02 	tst.w	r5, #2
 8000eca:	d00f      	beq.n	8000eec <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	0695      	lsls	r5, r2, #26
 8000ed0:	d406      	bmi.n	8000ee0 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	f022 020a 	bic.w	r2, r2, #10
 8000ed8:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 8000ee0:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000ee2:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 8000ee4:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8000ee8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000eea:	e7e5      	b.n	8000eb8 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000eec:	2408      	movs	r4, #8
 8000eee:	4094      	lsls	r4, r2
 8000ef0:	4234      	tst	r4, r6
 8000ef2:	d011      	beq.n	8000f18 <HAL_DMA_IRQHandler+0x8c>
 8000ef4:	072c      	lsls	r4, r5, #28
 8000ef6:	d50f      	bpl.n	8000f18 <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ef8:	681c      	ldr	r4, [r3, #0]
 8000efa:	f024 040e 	bic.w	r4, r4, #14
 8000efe:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f00:	2301      	movs	r3, #1
 8000f02:	fa03 f202 	lsl.w	r2, r3, r2
 8000f06:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f08:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000f0a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8000f14:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000f16:	e7cf      	b.n	8000eb8 <HAL_DMA_IRQHandler+0x2c>
}  
 8000f18:	bc70      	pop	{r4, r5, r6}
 8000f1a:	4770      	bx	lr

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f20:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f24:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80010b8 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f28:	4a61      	ldr	r2, [pc, #388]	; (80010b0 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000f2a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f2c:	fa38 f403 	lsrs.w	r4, r8, r3
 8000f30:	d102      	bne.n	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000f32:	b003      	add	sp, #12
 8000f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f38:	f04f 0e01 	mov.w	lr, #1
 8000f3c:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000f40:	ea18 060e 	ands.w	r6, r8, lr
 8000f44:	f000 80a6 	beq.w	8001094 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f48:	684c      	ldr	r4, [r1, #4]
 8000f4a:	f024 0710 	bic.w	r7, r4, #16
 8000f4e:	2f02      	cmp	r7, #2
 8000f50:	d116      	bne.n	8000f80 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000f52:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000f56:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f5a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000f5e:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f62:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f66:	f04f 0c0f 	mov.w	ip, #15
 8000f6a:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f6e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f72:	690d      	ldr	r5, [r1, #16]
 8000f74:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f78:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000f7c:	f8ca 5020 	str.w	r5, [sl, #32]
 8000f80:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f84:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000f86:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8a:	fa05 f50a 	lsl.w	r5, r5, sl
 8000f8e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f90:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f94:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f9c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9e:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa2:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000fa4:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa8:	d811      	bhi.n	8000fce <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000faa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fac:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb0:	68cf      	ldr	r7, [r1, #12]
 8000fb2:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000fb6:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000fba:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000fbc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fbe:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fc2:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000fc6:	409f      	lsls	r7, r3
 8000fc8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000fcc:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000fce:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd2:	688f      	ldr	r7, [r1, #8]
 8000fd4:	fa07 f70a 	lsl.w	r7, r7, sl
 8000fd8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000fda:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fdc:	00e5      	lsls	r5, r4, #3
 8000fde:	d559      	bpl.n	8001094 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe0:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000fe4:	f045 0501 	orr.w	r5, r5, #1
 8000fe8:	f8c9 5018 	str.w	r5, [r9, #24]
 8000fec:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000ff0:	f023 0703 	bic.w	r7, r3, #3
 8000ff4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ff8:	f005 0501 	and.w	r5, r5, #1
 8000ffc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001000:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001002:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001008:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800100a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800100e:	f04f 0e0f 	mov.w	lr, #15
 8001012:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001016:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800101a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800101e:	d03b      	beq.n	8001098 <HAL_GPIO_Init+0x17c>
 8001020:	4d24      	ldr	r5, [pc, #144]	; (80010b4 <HAL_GPIO_Init+0x198>)
 8001022:	42a8      	cmp	r0, r5
 8001024:	d03a      	beq.n	800109c <HAL_GPIO_Init+0x180>
 8001026:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800102a:	42a8      	cmp	r0, r5
 800102c:	d038      	beq.n	80010a0 <HAL_GPIO_Init+0x184>
 800102e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001032:	42a8      	cmp	r0, r5
 8001034:	d036      	beq.n	80010a4 <HAL_GPIO_Init+0x188>
 8001036:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800103a:	42a8      	cmp	r0, r5
 800103c:	d034      	beq.n	80010a8 <HAL_GPIO_Init+0x18c>
 800103e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001042:	42a8      	cmp	r0, r5
 8001044:	d032      	beq.n	80010ac <HAL_GPIO_Init+0x190>
 8001046:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800104a:	42a8      	cmp	r0, r5
 800104c:	bf14      	ite	ne
 800104e:	2507      	movne	r5, #7
 8001050:	2506      	moveq	r5, #6
 8001052:	fa05 f50c 	lsl.w	r5, r5, ip
 8001056:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800105a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800105c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800105e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001060:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001064:	bf0c      	ite	eq
 8001066:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001068:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 800106a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800106c:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800106e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001072:	bf0c      	ite	eq
 8001074:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001076:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8001078:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800107a:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800107c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001080:	bf0c      	ite	eq
 8001082:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001084:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8001086:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001088:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800108a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800108c:	bf54      	ite	pl
 800108e:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001090:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8001092:	60d5      	str	r5, [r2, #12]
    position++;
 8001094:	3301      	adds	r3, #1
 8001096:	e749      	b.n	8000f2c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001098:	2500      	movs	r5, #0
 800109a:	e7da      	b.n	8001052 <HAL_GPIO_Init+0x136>
 800109c:	2501      	movs	r5, #1
 800109e:	e7d8      	b.n	8001052 <HAL_GPIO_Init+0x136>
 80010a0:	2502      	movs	r5, #2
 80010a2:	e7d6      	b.n	8001052 <HAL_GPIO_Init+0x136>
 80010a4:	2503      	movs	r5, #3
 80010a6:	e7d4      	b.n	8001052 <HAL_GPIO_Init+0x136>
 80010a8:	2504      	movs	r5, #4
 80010aa:	e7d2      	b.n	8001052 <HAL_GPIO_Init+0x136>
 80010ac:	2505      	movs	r5, #5
 80010ae:	e7d0      	b.n	8001052 <HAL_GPIO_Init+0x136>
 80010b0:	40010400 	.word	0x40010400
 80010b4:	48000400 	.word	0x48000400
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010bc:	6903      	ldr	r3, [r0, #16]
 80010be:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80010c0:	bf14      	ite	ne
 80010c2:	2001      	movne	r0, #1
 80010c4:	2000      	moveq	r0, #0
 80010c6:	4770      	bx	lr

080010c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	b10a      	cbz	r2, 80010ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ca:	6181      	str	r1, [r0, #24]
 80010cc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ce:	6281      	str	r1, [r0, #40]	; 0x28
 80010d0:	4770      	bx	lr

080010d2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80010d2:	6943      	ldr	r3, [r0, #20]
 80010d4:	4059      	eors	r1, r3
 80010d6:	6141      	str	r1, [r0, #20]
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e0:	4605      	mov	r5, r0
 80010e2:	b918      	cbnz	r0, 80010ec <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80010e4:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80010e6:	b002      	add	sp, #8
 80010e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ec:	6803      	ldr	r3, [r0, #0]
 80010ee:	07df      	lsls	r7, r3, #31
 80010f0:	d411      	bmi.n	8001116 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f2:	682b      	ldr	r3, [r5, #0]
 80010f4:	079e      	lsls	r6, r3, #30
 80010f6:	f100 8088 	bmi.w	800120a <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fa:	682b      	ldr	r3, [r5, #0]
 80010fc:	071c      	lsls	r4, r3, #28
 80010fe:	f100 80fc 	bmi.w	80012fa <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001102:	682b      	ldr	r3, [r5, #0]
 8001104:	0758      	lsls	r0, r3, #29
 8001106:	f100 8145 	bmi.w	8001394 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800110a:	69aa      	ldr	r2, [r5, #24]
 800110c:	2a00      	cmp	r2, #0
 800110e:	f040 81dc 	bne.w	80014ca <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 8001112:	2000      	movs	r0, #0
 8001114:	e7e7      	b.n	80010e6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001116:	4cbd      	ldr	r4, [pc, #756]	; (800140c <HAL_RCC_OscConfig+0x330>)
 8001118:	6863      	ldr	r3, [r4, #4]
 800111a:	f003 030c 	and.w	r3, r3, #12
 800111e:	2b04      	cmp	r3, #4
 8001120:	d00a      	beq.n	8001138 <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001122:	6863      	ldr	r3, [r4, #4]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	2b08      	cmp	r3, #8
 800112a:	d119      	bne.n	8001160 <HAL_RCC_OscConfig+0x84>
 800112c:	6863      	ldr	r3, [r4, #4]
 800112e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001136:	d113      	bne.n	8001160 <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800113c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	6821      	ldr	r1, [r4, #0]
 8001142:	fa93 f3a3 	rbit	r3, r3
 8001146:	fab3 f383 	clz	r3, r3
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	2201      	movs	r2, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	420b      	tst	r3, r1
 8001156:	d0cc      	beq.n	80010f2 <HAL_RCC_OscConfig+0x16>
 8001158:	686b      	ldr	r3, [r5, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1c9      	bne.n	80010f2 <HAL_RCC_OscConfig+0x16>
 800115e:	e7c1      	b.n	80010e4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001160:	686b      	ldr	r3, [r5, #4]
 8001162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001166:	d11e      	bne.n	80011a6 <HAL_RCC_OscConfig+0xca>
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001170:	f7ff fd60 	bl	8000c34 <HAL_GetTick>
 8001174:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001178:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	2701      	movs	r7, #1
 800117c:	fa96 f3a6 	rbit	r3, r6
 8001180:	6822      	ldr	r2, [r4, #0]
 8001182:	fa96 f3a6 	rbit	r3, r6
 8001186:	fab3 f383 	clz	r3, r3
 800118a:	f003 031f 	and.w	r3, r3, #31
 800118e:	fa07 f303 	lsl.w	r3, r7, r3
 8001192:	4213      	tst	r3, r2
 8001194:	d1ad      	bne.n	80010f2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001196:	f7ff fd4d 	bl	8000c34 <HAL_GetTick>
 800119a:	eba0 0008 	sub.w	r0, r0, r8
 800119e:	2864      	cmp	r0, #100	; 0x64
 80011a0:	d9ec      	bls.n	800117c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80011a2:	2003      	movs	r0, #3
 80011a4:	e79f      	b.n	80010e6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a6:	bb0b      	cbnz	r3, 80011ec <HAL_RCC_OscConfig+0x110>
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ae:	6023      	str	r3, [r4, #0]
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011b8:	f7ff fd3c 	bl	8000c34 <HAL_GetTick>
 80011bc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80011c0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c2:	2701      	movs	r7, #1
 80011c4:	fa96 f3a6 	rbit	r3, r6
 80011c8:	6822      	ldr	r2, [r4, #0]
 80011ca:	fa96 f3a6 	rbit	r3, r6
 80011ce:	fab3 f383 	clz	r3, r3
 80011d2:	f003 031f 	and.w	r3, r3, #31
 80011d6:	fa07 f303 	lsl.w	r3, r7, r3
 80011da:	4213      	tst	r3, r2
 80011dc:	d089      	beq.n	80010f2 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011de:	f7ff fd29 	bl	8000c34 <HAL_GetTick>
 80011e2:	eba0 0008 	sub.w	r0, r0, r8
 80011e6:	2864      	cmp	r0, #100	; 0x64
 80011e8:	d9ec      	bls.n	80011c4 <HAL_RCC_OscConfig+0xe8>
 80011ea:	e7da      	b.n	80011a2 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	d103      	bne.n	80011fc <HAL_RCC_OscConfig+0x120>
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f8:	6023      	str	r3, [r4, #0]
 80011fa:	e7b5      	b.n	8001168 <HAL_RCC_OscConfig+0x8c>
 80011fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001200:	6023      	str	r3, [r4, #0]
 8001202:	6823      	ldr	r3, [r4, #0]
 8001204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001208:	e7b1      	b.n	800116e <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800120a:	4c80      	ldr	r4, [pc, #512]	; (800140c <HAL_RCC_OscConfig+0x330>)
 800120c:	6863      	ldr	r3, [r4, #4]
 800120e:	f013 0f0c 	tst.w	r3, #12
 8001212:	d00a      	beq.n	800122a <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001214:	6863      	ldr	r3, [r4, #4]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b08      	cmp	r3, #8
 800121c:	d125      	bne.n	800126a <HAL_RCC_OscConfig+0x18e>
 800121e:	6863      	ldr	r3, [r4, #4]
 8001220:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001228:	d11f      	bne.n	800126a <HAL_RCC_OscConfig+0x18e>
 800122a:	2302      	movs	r3, #2
 800122c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001230:	6821      	ldr	r1, [r4, #0]
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	2201      	movs	r2, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	420b      	tst	r3, r1
 8001246:	d003      	beq.n	8001250 <HAL_RCC_OscConfig+0x174>
 8001248:	68eb      	ldr	r3, [r5, #12]
 800124a:	4293      	cmp	r3, r2
 800124c:	f47f af4a 	bne.w	80010e4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	6821      	ldr	r1, [r4, #0]
 8001252:	23f8      	movs	r3, #248	; 0xf8
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	fab3 f283 	clz	r2, r3
 800125c:	692b      	ldr	r3, [r5, #16]
 800125e:	4093      	lsls	r3, r2
 8001260:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001264:	4313      	orrs	r3, r2
 8001266:	6023      	str	r3, [r4, #0]
 8001268:	e747      	b.n	80010fa <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800126a:	68ea      	ldr	r2, [r5, #12]
 800126c:	2601      	movs	r6, #1
 800126e:	b30a      	cbz	r2, 80012b4 <HAL_RCC_OscConfig+0x1d8>
 8001270:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001274:	fab3 f383 	clz	r3, r3
 8001278:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800127c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	2702      	movs	r7, #2
 8001284:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001286:	f7ff fcd5 	bl	8000c34 <HAL_GetTick>
 800128a:	4680      	mov	r8, r0
 800128c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001290:	6822      	ldr	r2, [r4, #0]
 8001292:	fa97 f3a7 	rbit	r3, r7
 8001296:	fab3 f383 	clz	r3, r3
 800129a:	f003 031f 	and.w	r3, r3, #31
 800129e:	fa06 f303 	lsl.w	r3, r6, r3
 80012a2:	4213      	tst	r3, r2
 80012a4:	d1d4      	bne.n	8001250 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a6:	f7ff fcc5 	bl	8000c34 <HAL_GetTick>
 80012aa:	eba0 0008 	sub.w	r0, r0, r8
 80012ae:	2802      	cmp	r0, #2
 80012b0:	d9ec      	bls.n	800128c <HAL_RCC_OscConfig+0x1b0>
 80012b2:	e776      	b.n	80011a2 <HAL_RCC_OscConfig+0xc6>
 80012b4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80012b8:	fab3 f383 	clz	r3, r3
 80012bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	2702      	movs	r7, #2
 80012c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012ca:	f7ff fcb3 	bl	8000c34 <HAL_GetTick>
 80012ce:	4680      	mov	r8, r0
 80012d0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d4:	6822      	ldr	r2, [r4, #0]
 80012d6:	fa97 f3a7 	rbit	r3, r7
 80012da:	fab3 f383 	clz	r3, r3
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	fa06 f303 	lsl.w	r3, r6, r3
 80012e6:	4213      	tst	r3, r2
 80012e8:	f43f af07 	beq.w	80010fa <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ec:	f7ff fca2 	bl	8000c34 <HAL_GetTick>
 80012f0:	eba0 0008 	sub.w	r0, r0, r8
 80012f4:	2802      	cmp	r0, #2
 80012f6:	d9eb      	bls.n	80012d0 <HAL_RCC_OscConfig+0x1f4>
 80012f8:	e753      	b.n	80011a2 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012fa:	696a      	ldr	r2, [r5, #20]
 80012fc:	4e43      	ldr	r6, [pc, #268]	; (800140c <HAL_RCC_OscConfig+0x330>)
 80012fe:	4944      	ldr	r1, [pc, #272]	; (8001410 <HAL_RCC_OscConfig+0x334>)
 8001300:	2401      	movs	r4, #1
 8001302:	b31a      	cbz	r2, 800134c <HAL_RCC_OscConfig+0x270>
 8001304:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001308:	fab3 f383 	clz	r3, r3
 800130c:	440b      	add	r3, r1
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	2702      	movs	r7, #2
 8001312:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001314:	f7ff fc8e 	bl	8000c34 <HAL_GetTick>
 8001318:	4680      	mov	r8, r0
 800131a:	fa97 f3a7 	rbit	r3, r7
 800131e:	fa97 f3a7 	rbit	r3, r7
 8001322:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001326:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001328:	fa97 f3a7 	rbit	r3, r7
 800132c:	fab3 f383 	clz	r3, r3
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	fa04 f303 	lsl.w	r3, r4, r3
 8001338:	4213      	tst	r3, r2
 800133a:	f47f aee2 	bne.w	8001102 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800133e:	f7ff fc79 	bl	8000c34 <HAL_GetTick>
 8001342:	eba0 0008 	sub.w	r0, r0, r8
 8001346:	2802      	cmp	r0, #2
 8001348:	d9e7      	bls.n	800131a <HAL_RCC_OscConfig+0x23e>
 800134a:	e72a      	b.n	80011a2 <HAL_RCC_OscConfig+0xc6>
 800134c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001350:	fab3 f383 	clz	r3, r3
 8001354:	440b      	add	r3, r1
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	2702      	movs	r7, #2
 800135a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800135c:	f7ff fc6a 	bl	8000c34 <HAL_GetTick>
 8001360:	4680      	mov	r8, r0
 8001362:	fa97 f3a7 	rbit	r3, r7
 8001366:	fa97 f3a7 	rbit	r3, r7
 800136a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001370:	fa97 f3a7 	rbit	r3, r7
 8001374:	fab3 f383 	clz	r3, r3
 8001378:	f003 031f 	and.w	r3, r3, #31
 800137c:	fa04 f303 	lsl.w	r3, r4, r3
 8001380:	4213      	tst	r3, r2
 8001382:	f43f aebe 	beq.w	8001102 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001386:	f7ff fc55 	bl	8000c34 <HAL_GetTick>
 800138a:	eba0 0008 	sub.w	r0, r0, r8
 800138e:	2802      	cmp	r0, #2
 8001390:	d9e7      	bls.n	8001362 <HAL_RCC_OscConfig+0x286>
 8001392:	e706      	b.n	80011a2 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001394:	4c1d      	ldr	r4, [pc, #116]	; (800140c <HAL_RCC_OscConfig+0x330>)
 8001396:	69e3      	ldr	r3, [r4, #28]
 8001398:	00d9      	lsls	r1, r3, #3
 800139a:	d434      	bmi.n	8001406 <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800139c:	69e3      	ldr	r3, [r4, #28]
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a2:	61e3      	str	r3, [r4, #28]
 80013a4:	69e3      	ldr	r3, [r4, #28]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013ae:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	4f18      	ldr	r7, [pc, #96]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	05da      	lsls	r2, r3, #23
 80013b6:	d52f      	bpl.n	8001418 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b8:	68ab      	ldr	r3, [r5, #8]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d13d      	bne.n	800143a <HAL_RCC_OscConfig+0x35e>
 80013be:	6a23      	ldr	r3, [r4, #32]
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80013c6:	f7ff fc35 	bl	8000c34 <HAL_GetTick>
 80013ca:	2702      	movs	r7, #2
 80013cc:	4682      	mov	sl, r0
 80013ce:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d0:	f04f 0801 	mov.w	r8, #1
 80013d4:	fa97 f3a7 	rbit	r3, r7
 80013d8:	fa97 f3a7 	rbit	r3, r7
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d06c      	beq.n	80014ba <HAL_RCC_OscConfig+0x3de>
 80013e0:	6a22      	ldr	r2, [r4, #32]
 80013e2:	fa99 f3a9 	rbit	r3, r9
 80013e6:	fab3 f383 	clz	r3, r3
 80013ea:	f003 031f 	and.w	r3, r3, #31
 80013ee:	fa08 f303 	lsl.w	r3, r8, r3
 80013f2:	4213      	tst	r3, r2
 80013f4:	d058      	beq.n	80014a8 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 80013f6:	2e00      	cmp	r6, #0
 80013f8:	f43f ae87 	beq.w	800110a <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013fc:	69e3      	ldr	r3, [r4, #28]
 80013fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001402:	61e3      	str	r3, [r4, #28]
 8001404:	e681      	b.n	800110a <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8001406:	2600      	movs	r6, #0
 8001408:	e7d2      	b.n	80013b0 <HAL_RCC_OscConfig+0x2d4>
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	10908120 	.word	0x10908120
 8001414:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001420:	f7ff fc08 	bl	8000c34 <HAL_GetTick>
 8001424:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	05db      	lsls	r3, r3, #23
 800142a:	d4c5      	bmi.n	80013b8 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142c:	f7ff fc02 	bl	8000c34 <HAL_GetTick>
 8001430:	eba0 0008 	sub.w	r0, r0, r8
 8001434:	2864      	cmp	r0, #100	; 0x64
 8001436:	d9f6      	bls.n	8001426 <HAL_RCC_OscConfig+0x34a>
 8001438:	e6b3      	b.n	80011a2 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143a:	bb3b      	cbnz	r3, 800148c <HAL_RCC_OscConfig+0x3b0>
 800143c:	6a23      	ldr	r3, [r4, #32]
 800143e:	f023 0301 	bic.w	r3, r3, #1
 8001442:	6223      	str	r3, [r4, #32]
 8001444:	6a23      	ldr	r3, [r4, #32]
 8001446:	f023 0304 	bic.w	r3, r3, #4
 800144a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800144c:	f7ff fbf2 	bl	8000c34 <HAL_GetTick>
 8001450:	2702      	movs	r7, #2
 8001452:	4682      	mov	sl, r0
 8001454:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001456:	f04f 0801 	mov.w	r8, #1
 800145a:	fa97 f3a7 	rbit	r3, r7
 800145e:	fa97 f3a7 	rbit	r3, r7
 8001462:	b373      	cbz	r3, 80014c2 <HAL_RCC_OscConfig+0x3e6>
 8001464:	6a22      	ldr	r2, [r4, #32]
 8001466:	fa99 f3a9 	rbit	r3, r9
 800146a:	fab3 f383 	clz	r3, r3
 800146e:	f003 031f 	and.w	r3, r3, #31
 8001472:	fa08 f303 	lsl.w	r3, r8, r3
 8001476:	4213      	tst	r3, r2
 8001478:	d0bd      	beq.n	80013f6 <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fbdb 	bl	8000c34 <HAL_GetTick>
 800147e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001482:	eba0 000a 	sub.w	r0, r0, sl
 8001486:	4298      	cmp	r0, r3
 8001488:	d9e7      	bls.n	800145a <HAL_RCC_OscConfig+0x37e>
 800148a:	e68a      	b.n	80011a2 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148c:	2b05      	cmp	r3, #5
 800148e:	6a23      	ldr	r3, [r4, #32]
 8001490:	d103      	bne.n	800149a <HAL_RCC_OscConfig+0x3be>
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	6223      	str	r3, [r4, #32]
 8001498:	e791      	b.n	80013be <HAL_RCC_OscConfig+0x2e2>
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	6223      	str	r3, [r4, #32]
 80014a0:	6a23      	ldr	r3, [r4, #32]
 80014a2:	f023 0304 	bic.w	r3, r3, #4
 80014a6:	e78d      	b.n	80013c4 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7ff fbc4 	bl	8000c34 <HAL_GetTick>
 80014ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80014b0:	eba0 000a 	sub.w	r0, r0, sl
 80014b4:	4298      	cmp	r0, r3
 80014b6:	d98d      	bls.n	80013d4 <HAL_RCC_OscConfig+0x2f8>
 80014b8:	e673      	b.n	80011a2 <HAL_RCC_OscConfig+0xc6>
 80014ba:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014c0:	e78f      	b.n	80013e2 <HAL_RCC_OscConfig+0x306>
 80014c2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014c8:	e7cd      	b.n	8001466 <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ca:	4c44      	ldr	r4, [pc, #272]	; (80015dc <HAL_RCC_OscConfig+0x500>)
 80014cc:	6863      	ldr	r3, [r4, #4]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	f43f ae06 	beq.w	80010e4 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d8:	2a02      	cmp	r2, #2
 80014da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014de:	d158      	bne.n	8001592 <HAL_RCC_OscConfig+0x4b6>
 80014e0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014f6:	f7ff fb9d 	bl	8000c34 <HAL_GetTick>
 80014fa:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80014fe:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001500:	2601      	movs	r6, #1
 8001502:	fa97 f3a7 	rbit	r3, r7
 8001506:	6822      	ldr	r2, [r4, #0]
 8001508:	fa97 f3a7 	rbit	r3, r7
 800150c:	fab3 f383 	clz	r3, r3
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	fa06 f303 	lsl.w	r3, r6, r3
 8001518:	4213      	tst	r3, r2
 800151a:	d133      	bne.n	8001584 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800151c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800151e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001520:	f023 030f 	bic.w	r3, r3, #15
 8001524:	4313      	orrs	r3, r2
 8001526:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001528:	6862      	ldr	r2, [r4, #4]
 800152a:	6a2b      	ldr	r3, [r5, #32]
 800152c:	69e9      	ldr	r1, [r5, #28]
 800152e:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8001532:	430b      	orrs	r3, r1
 8001534:	4313      	orrs	r3, r2
 8001536:	6063      	str	r3, [r4, #4]
 8001538:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800153c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001548:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001552:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001554:	f7ff fb6e 	bl	8000c34 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001558:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800155a:	4607      	mov	r7, r0
 800155c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001560:	6822      	ldr	r2, [r4, #0]
 8001562:	fa95 f3a5 	rbit	r3, r5
 8001566:	fab3 f383 	clz	r3, r3
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	fa06 f303 	lsl.w	r3, r6, r3
 8001572:	4213      	tst	r3, r2
 8001574:	f47f adcd 	bne.w	8001112 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff fb5c 	bl	8000c34 <HAL_GetTick>
 800157c:	1bc0      	subs	r0, r0, r7
 800157e:	2802      	cmp	r0, #2
 8001580:	d9ec      	bls.n	800155c <HAL_RCC_OscConfig+0x480>
 8001582:	e60e      	b.n	80011a2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff fb56 	bl	8000c34 <HAL_GetTick>
 8001588:	eba0 0008 	sub.w	r0, r0, r8
 800158c:	2802      	cmp	r0, #2
 800158e:	d9b8      	bls.n	8001502 <HAL_RCC_OscConfig+0x426>
 8001590:	e607      	b.n	80011a2 <HAL_RCC_OscConfig+0xc6>
 8001592:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800159e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb44 	bl	8000c34 <HAL_GetTick>
 80015ac:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80015b0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b2:	2601      	movs	r6, #1
 80015b4:	fa95 f3a5 	rbit	r3, r5
 80015b8:	6822      	ldr	r2, [r4, #0]
 80015ba:	fa95 f3a5 	rbit	r3, r5
 80015be:	fab3 f383 	clz	r3, r3
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	fa06 f303 	lsl.w	r3, r6, r3
 80015ca:	4213      	tst	r3, r2
 80015cc:	f43f ada1 	beq.w	8001112 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff fb30 	bl	8000c34 <HAL_GetTick>
 80015d4:	1bc0      	subs	r0, r0, r7
 80015d6:	2802      	cmp	r0, #2
 80015d8:	d9ec      	bls.n	80015b4 <HAL_RCC_OscConfig+0x4d8>
 80015da:	e5e2      	b.n	80011a2 <HAL_RCC_OscConfig+0xc6>
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80015e0:	4911      	ldr	r1, [pc, #68]	; (8001628 <HAL_RCC_GetSysClockFreq+0x48>)
 80015e2:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015e4:	f003 020c 	and.w	r2, r3, #12
 80015e8:	2a08      	cmp	r2, #8
 80015ea:	d11a      	bne.n	8001622 <HAL_RCC_GetSysClockFreq+0x42>
 80015ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80015f0:	fa92 f2a2 	rbit	r2, r2
 80015f4:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80015f6:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80015fa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80015fc:	fa90 f0a0 	rbit	r0, r0
 8001600:	fab0 f080 	clz	r0, r0
 8001604:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001608:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800160c:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800160e:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001612:	4807      	ldr	r0, [pc, #28]	; (8001630 <HAL_RCC_GetSysClockFreq+0x50>)
 8001614:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001616:	4807      	ldr	r0, [pc, #28]	; (8001634 <HAL_RCC_GetSysClockFreq+0x54>)
 8001618:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800161c:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800161e:	4348      	muls	r0, r1
 8001620:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001622:	4804      	ldr	r0, [pc, #16]	; (8001634 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	080052e8 	.word	0x080052e8
 8001630:	080052f8 	.word	0x080052f8
 8001634:	007a1200 	.word	0x007a1200

08001638 <HAL_RCC_ClockConfig>:
{
 8001638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800163c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800163e:	4604      	mov	r4, r0
 8001640:	b910      	cbnz	r0, 8001648 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001642:	2001      	movs	r0, #1
 8001644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001648:	4a4c      	ldr	r2, [pc, #304]	; (800177c <HAL_RCC_ClockConfig+0x144>)
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	428b      	cmp	r3, r1
 8001652:	d32e      	bcc.n	80016b2 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001654:	6822      	ldr	r2, [r4, #0]
 8001656:	0791      	lsls	r1, r2, #30
 8001658:	d436      	bmi.n	80016c8 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165a:	07d2      	lsls	r2, r2, #31
 800165c:	d43c      	bmi.n	80016d8 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800165e:	4a47      	ldr	r2, [pc, #284]	; (800177c <HAL_RCC_ClockConfig+0x144>)
 8001660:	6813      	ldr	r3, [r2, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	429d      	cmp	r5, r3
 8001668:	d375      	bcc.n	8001756 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	4d44      	ldr	r5, [pc, #272]	; (8001780 <HAL_RCC_ClockConfig+0x148>)
 800166e:	f012 0f04 	tst.w	r2, #4
 8001672:	d17c      	bne.n	800176e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001674:	0713      	lsls	r3, r2, #28
 8001676:	d506      	bpl.n	8001686 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001678:	686b      	ldr	r3, [r5, #4]
 800167a:	6922      	ldr	r2, [r4, #16]
 800167c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001680:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001684:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001686:	f7ff ffab 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 800168a:	686b      	ldr	r3, [r5, #4]
 800168c:	22f0      	movs	r2, #240	; 0xf0
 800168e:	fa92 f2a2 	rbit	r2, r2
 8001692:	fab2 f282 	clz	r2, r2
 8001696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800169a:	40d3      	lsrs	r3, r2
 800169c:	4a39      	ldr	r2, [pc, #228]	; (8001784 <HAL_RCC_ClockConfig+0x14c>)
 800169e:	5cd3      	ldrb	r3, [r2, r3]
 80016a0:	40d8      	lsrs	r0, r3
 80016a2:	4b39      	ldr	r3, [pc, #228]	; (8001788 <HAL_RCC_ClockConfig+0x150>)
 80016a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff fa82 	bl	8000bb0 <HAL_InitTick>
  return HAL_OK;
 80016ac:	2000      	movs	r0, #0
 80016ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	6813      	ldr	r3, [r2, #0]
 80016b4:	f023 0307 	bic.w	r3, r3, #7
 80016b8:	430b      	orrs	r3, r1
 80016ba:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016bc:	6813      	ldr	r3, [r2, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	4299      	cmp	r1, r3
 80016c4:	d1bd      	bne.n	8001642 <HAL_RCC_ClockConfig+0xa>
 80016c6:	e7c5      	b.n	8001654 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c8:	492d      	ldr	r1, [pc, #180]	; (8001780 <HAL_RCC_ClockConfig+0x148>)
 80016ca:	68a0      	ldr	r0, [r4, #8]
 80016cc:	684b      	ldr	r3, [r1, #4]
 80016ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016d2:	4303      	orrs	r3, r0
 80016d4:	604b      	str	r3, [r1, #4]
 80016d6:	e7c0      	b.n	800165a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d8:	6862      	ldr	r2, [r4, #4]
 80016da:	4e29      	ldr	r6, [pc, #164]	; (8001780 <HAL_RCC_ClockConfig+0x148>)
 80016dc:	2a01      	cmp	r2, #1
 80016de:	d127      	bne.n	8001730 <HAL_RCC_ClockConfig+0xf8>
 80016e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e8:	6831      	ldr	r1, [r6, #0]
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fc:	d0a1      	beq.n	8001642 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fe:	6873      	ldr	r3, [r6, #4]
 8001700:	f023 0303 	bic.w	r3, r3, #3
 8001704:	431a      	orrs	r2, r3
 8001706:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8001708:	f7ff fa94 	bl	8000c34 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001710:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	6873      	ldr	r3, [r6, #4]
 8001714:	6862      	ldr	r2, [r4, #4]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800171e:	d09e      	beq.n	800165e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff fa88 	bl	8000c34 <HAL_GetTick>
 8001724:	1bc0      	subs	r0, r0, r7
 8001726:	4540      	cmp	r0, r8
 8001728:	d9f3      	bls.n	8001712 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 800172a:	2003      	movs	r0, #3
}
 800172c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001730:	2a02      	cmp	r2, #2
 8001732:	bf0c      	ite	eq
 8001734:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001738:	2302      	movne	r3, #2
 800173a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173e:	6830      	ldr	r0, [r6, #0]
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	fab3 f383 	clz	r3, r3
 8001748:	f003 031f 	and.w	r3, r3, #31
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	4203      	tst	r3, r0
 8001754:	e7d2      	b.n	80016fc <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	6813      	ldr	r3, [r2, #0]
 8001758:	f023 0307 	bic.w	r3, r3, #7
 800175c:	432b      	orrs	r3, r5
 800175e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001760:	6813      	ldr	r3, [r2, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	429d      	cmp	r5, r3
 8001768:	f47f af6b 	bne.w	8001642 <HAL_RCC_ClockConfig+0xa>
 800176c:	e77d      	b.n	800166a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800176e:	686b      	ldr	r3, [r5, #4]
 8001770:	68e1      	ldr	r1, [r4, #12]
 8001772:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001776:	430b      	orrs	r3, r1
 8001778:	606b      	str	r3, [r5, #4]
 800177a:	e77b      	b.n	8001674 <HAL_RCC_ClockConfig+0x3c>
 800177c:	40022000 	.word	0x40022000
 8001780:	40021000 	.word	0x40021000
 8001784:	08005313 	.word	0x08005313
 8001788:	20000008 	.word	0x20000008

0800178c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800178e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	fa92 f2a2 	rbit	r2, r2
 8001798:	fab2 f282 	clz	r2, r2
 800179c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017a0:	40d3      	lsrs	r3, r2
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017a4:	5cd3      	ldrb	r3, [r2, r3]
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80017a8:	6810      	ldr	r0, [r2, #0]
}    
 80017aa:	40d8      	lsrs	r0, r3
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	08005323 	.word	0x08005323
 80017b8:	20000008 	.word	0x20000008

080017bc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017be:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	fa92 f2a2 	rbit	r2, r2
 80017c8:	fab2 f282 	clz	r2, r2
 80017cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80017d0:	40d3      	lsrs	r3, r2
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80017d8:	6810      	ldr	r0, [r2, #0]
} 
 80017da:	40d8      	lsrs	r0, r3
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	08005323 	.word	0x08005323
 80017e8:	20000008 	.word	0x20000008

080017ec <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017ec:	6803      	ldr	r3, [r0, #0]
{
 80017ee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017f2:	03df      	lsls	r7, r3, #15
{
 80017f4:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017f6:	d523      	bpl.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f8:	4d9b      	ldr	r5, [pc, #620]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80017fa:	69eb      	ldr	r3, [r5, #28]
 80017fc:	00de      	lsls	r6, r3, #3
 80017fe:	f100 80d7 	bmi.w	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	69eb      	ldr	r3, [r5, #28]
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	61eb      	str	r3, [r5, #28]
 800180a:	69eb      	ldr	r3, [r5, #28]
 800180c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001814:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001816:	4f95      	ldr	r7, [pc, #596]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	05d8      	lsls	r0, r3, #23
 800181c:	f140 80ca 	bpl.w	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001820:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001822:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001826:	f040 80da 	bne.w	80019de <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800182a:	6a2b      	ldr	r3, [r5, #32]
 800182c:	6862      	ldr	r2, [r4, #4]
 800182e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001832:	4313      	orrs	r3, r2
 8001834:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001836:	b11e      	cbz	r6, 8001840 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	69eb      	ldr	r3, [r5, #28]
 800183a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183e:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001840:	6820      	ldr	r0, [r4, #0]
 8001842:	07c3      	lsls	r3, r0, #31
 8001844:	d506      	bpl.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001846:	4a88      	ldr	r2, [pc, #544]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001848:	68a1      	ldr	r1, [r4, #8]
 800184a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800184c:	f023 0303 	bic.w	r3, r3, #3
 8001850:	430b      	orrs	r3, r1
 8001852:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001854:	0787      	lsls	r7, r0, #30
 8001856:	d506      	bpl.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001858:	4a83      	ldr	r2, [pc, #524]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800185a:	68e1      	ldr	r1, [r4, #12]
 800185c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800185e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001862:	430b      	orrs	r3, r1
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001866:	0746      	lsls	r6, r0, #29
 8001868:	d506      	bpl.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800186a:	4a7f      	ldr	r2, [pc, #508]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800186c:	6921      	ldr	r1, [r4, #16]
 800186e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001870:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001874:	430b      	orrs	r3, r1
 8001876:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001878:	0685      	lsls	r5, r0, #26
 800187a:	d506      	bpl.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800187c:	4a7a      	ldr	r2, [pc, #488]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800187e:	69e1      	ldr	r1, [r4, #28]
 8001880:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001882:	f023 0310 	bic.w	r3, r3, #16
 8001886:	430b      	orrs	r3, r1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800188a:	0381      	lsls	r1, r0, #14
 800188c:	d506      	bpl.n	800189c <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800188e:	4a76      	ldr	r2, [pc, #472]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001890:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001892:	6853      	ldr	r3, [r2, #4]
 8001894:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001898:	430b      	orrs	r3, r1
 800189a:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800189c:	0642      	lsls	r2, r0, #25
 800189e:	d506      	bpl.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80018a0:	4a71      	ldr	r2, [pc, #452]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018a2:	6a21      	ldr	r1, [r4, #32]
 80018a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018a6:	f023 0320 	bic.w	r3, r3, #32
 80018aa:	430b      	orrs	r3, r1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80018ae:	0343      	lsls	r3, r0, #13
 80018b0:	d506      	bpl.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80018b2:	4a6d      	ldr	r2, [pc, #436]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018bc:	430b      	orrs	r3, r1
 80018be:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80018c0:	0707      	lsls	r7, r0, #28
 80018c2:	d506      	bpl.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80018c4:	4a68      	ldr	r2, [pc, #416]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018c6:	6961      	ldr	r1, [r4, #20]
 80018c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018ca:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80018ce:	430b      	orrs	r3, r1
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80018d2:	06c6      	lsls	r6, r0, #27
 80018d4:	d506      	bpl.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80018d6:	4a64      	ldr	r2, [pc, #400]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018d8:	69a1      	ldr	r1, [r4, #24]
 80018da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018dc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80018e0:	430b      	orrs	r3, r1
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80018e4:	0585      	lsls	r5, r0, #22
 80018e6:	d506      	bpl.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80018e8:	4a5f      	ldr	r2, [pc, #380]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80018ec:	6853      	ldr	r3, [r2, #4]
 80018ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018f2:	430b      	orrs	r3, r1
 80018f4:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80018f6:	0601      	lsls	r1, r0, #24
 80018f8:	d506      	bpl.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80018fa:	4a5b      	ldr	r2, [pc, #364]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80018fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001900:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001904:	430b      	orrs	r3, r1
 8001906:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001908:	05c2      	lsls	r2, r0, #23
 800190a:	d506      	bpl.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800190c:	4a56      	ldr	r2, [pc, #344]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800190e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001910:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001912:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001916:	430b      	orrs	r3, r1
 8001918:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800191a:	04c3      	lsls	r3, r0, #19
 800191c:	d506      	bpl.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800191e:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001922:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001928:	430b      	orrs	r3, r1
 800192a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800192c:	0487      	lsls	r7, r0, #18
 800192e:	d506      	bpl.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001930:	4a4d      	ldr	r2, [pc, #308]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001932:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001934:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001936:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800193a:	430b      	orrs	r3, r1
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800193e:	02c6      	lsls	r6, r0, #11
 8001940:	d506      	bpl.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001942:	4a49      	ldr	r2, [pc, #292]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001944:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001946:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194c:	430b      	orrs	r3, r1
 800194e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001950:	0285      	lsls	r5, r0, #10
 8001952:	d506      	bpl.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001954:	4a44      	ldr	r2, [pc, #272]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001956:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001958:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800195a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800195e:	430b      	orrs	r3, r1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001962:	0241      	lsls	r1, r0, #9
 8001964:	d506      	bpl.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001966:	4a40      	ldr	r2, [pc, #256]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001968:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800196a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800196c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001970:	430b      	orrs	r3, r1
 8001972:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001974:	0202      	lsls	r2, r0, #8
 8001976:	d506      	bpl.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001978:	4a3b      	ldr	r2, [pc, #236]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800197a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800197c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800197e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001982:	430b      	orrs	r3, r1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001986:	01c3      	lsls	r3, r0, #7
 8001988:	d506      	bpl.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800198a:	4a37      	ldr	r2, [pc, #220]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800198c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800198e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001994:	430b      	orrs	r3, r1
 8001996:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001998:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800199c:	d01c      	beq.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800199e:	4a32      	ldr	r2, [pc, #200]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80019a0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80019a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80019a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80019a8:	430b      	orrs	r3, r1
 80019aa:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80019ac:	2000      	movs	r0, #0
 80019ae:	e013      	b.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 80019b0:	2600      	movs	r6, #0
 80019b2:	e730      	b.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80019bc:	f7ff f93a 	bl	8000c34 <HAL_GetTick>
 80019c0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	05d9      	lsls	r1, r3, #23
 80019c6:	f53f af2b 	bmi.w	8001820 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ca:	f7ff f933 	bl	8000c34 <HAL_GetTick>
 80019ce:	eba0 0008 	sub.w	r0, r0, r8
 80019d2:	2864      	cmp	r0, #100	; 0x64
 80019d4:	d9f5      	bls.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 80019d6:	2003      	movs	r0, #3
}
 80019d8:	b002      	add	sp, #8
 80019da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019de:	6862      	ldr	r2, [r4, #4]
 80019e0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80019e4:	4293      	cmp	r3, r2
 80019e6:	f43f af20 	beq.w	800182a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019ea:	6a29      	ldr	r1, [r5, #32]
 80019ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f0:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80019f4:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80019f8:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80019fc:	fab2 f282 	clz	r2, r2
 8001a00:	4472      	add	r2, lr
 8001a02:	0092      	lsls	r2, r2, #2
 8001a04:	2701      	movs	r7, #1
 8001a06:	6017      	str	r7, [r2, #0]
 8001a08:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	4473      	add	r3, lr
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a18:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001a1a:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a1c:	f57f af05 	bpl.w	800182a <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001a20:	f7ff f908 	bl	8000c34 <HAL_GetTick>
 8001a24:	f04f 0802 	mov.w	r8, #2
 8001a28:	4682      	mov	sl, r0
 8001a2a:	46c1      	mov	r9, r8
 8001a2c:	fa98 f3a8 	rbit	r3, r8
 8001a30:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	b1a3      	cbz	r3, 8001a60 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001a36:	6a2a      	ldr	r2, [r5, #32]
 8001a38:	fa99 f3a9 	rbit	r3, r9
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	fa07 f303 	lsl.w	r3, r7, r3
 8001a48:	4213      	tst	r3, r2
 8001a4a:	f47f aeee 	bne.w	800182a <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7ff f8f1 	bl	8000c34 <HAL_GetTick>
 8001a52:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a56:	eba0 000a 	sub.w	r0, r0, sl
 8001a5a:	4298      	cmp	r0, r3
 8001a5c:	d9e6      	bls.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001a5e:	e7ba      	b.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001a60:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001a66:	e7e7      	b.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	10908100 	.word	0x10908100

08001a74 <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001a74:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001a76:	2302      	movs	r3, #2
 8001a78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8001a7c:	6813      	ldr	r3, [r2, #0]
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001a84:	2301      	movs	r3, #1
 8001a86:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
}
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	4770      	bx	lr

08001a8e <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a8e:	6803      	ldr	r3, [r0, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_TIM_OC_DelayElapsedCallback>:
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_TIM_IC_CaptureCallback>:
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001aa8:	4770      	bx	lr

08001aaa <HAL_TIM_TriggerCallback>:
 8001aaa:	4770      	bx	lr

08001aac <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001aac:	6803      	ldr	r3, [r0, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	0791      	lsls	r1, r2, #30
{
 8001ab2:	b510      	push	{r4, lr}
 8001ab4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ab6:	d50f      	bpl.n	8001ad8 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	0792      	lsls	r2, r2, #30
 8001abc:	d50c      	bpl.n	8001ad8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001abe:	f06f 0202 	mvn.w	r2, #2
 8001ac2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ac4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ac6:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ac8:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aca:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001acc:	f000 8085 	beq.w	8001bda <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001ad0:	f7ff ffe9 	bl	8001aa6 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	0752      	lsls	r2, r2, #29
 8001ade:	d510      	bpl.n	8001b02 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	0750      	lsls	r0, r2, #29
 8001ae4:	d50d      	bpl.n	8001b02 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ae6:	f06f 0204 	mvn.w	r2, #4
 8001aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001aec:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aee:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001af0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001af4:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001af6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001af8:	d075      	beq.n	8001be6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001afa:	f7ff ffd4 	bl	8001aa6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afe:	2300      	movs	r3, #0
 8001b00:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	0711      	lsls	r1, r2, #28
 8001b08:	d50f      	bpl.n	8001b2a <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	0712      	lsls	r2, r2, #28
 8001b0e:	d50c      	bpl.n	8001b2a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b10:	f06f 0208 	mvn.w	r2, #8
 8001b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b16:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b18:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b1a:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b1c:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b1e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b20:	d067      	beq.n	8001bf2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b22:	f7ff ffc0 	bl	8001aa6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	2300      	movs	r3, #0
 8001b28:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	06d0      	lsls	r0, r2, #27
 8001b30:	d510      	bpl.n	8001b54 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	06d1      	lsls	r1, r2, #27
 8001b36:	d50d      	bpl.n	8001b54 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b38:	f06f 0210 	mvn.w	r2, #16
 8001b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b3e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b40:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b42:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b46:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b48:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b4a:	d058      	beq.n	8001bfe <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4c:	f7ff ffab 	bl	8001aa6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b50:	2300      	movs	r3, #0
 8001b52:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	07d2      	lsls	r2, r2, #31
 8001b5a:	d508      	bpl.n	8001b6e <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	07d0      	lsls	r0, r2, #31
 8001b60:	d505      	bpl.n	8001b6e <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b62:	f06f 0201 	mvn.w	r2, #1
 8001b66:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f000 ff1d 	bl	80029a8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	0611      	lsls	r1, r2, #24
 8001b74:	d508      	bpl.n	8001b88 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	0612      	lsls	r2, r2, #24
 8001b7a:	d505      	bpl.n	8001b88 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b80:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001b82:	4620      	mov	r0, r4
 8001b84:	f000 f9b1 	bl	8001eea <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	05d0      	lsls	r0, r2, #23
 8001b8e:	d508      	bpl.n	8001ba2 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	0611      	lsls	r1, r2, #24
 8001b94:	d505      	bpl.n	8001ba2 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b9a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f000 f9a5 	bl	8001eec <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	691a      	ldr	r2, [r3, #16]
 8001ba6:	0652      	lsls	r2, r2, #25
 8001ba8:	d508      	bpl.n	8001bbc <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	0650      	lsls	r0, r2, #25
 8001bae:	d505      	bpl.n	8001bbc <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001bb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bb4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f7ff ff77 	bl	8001aaa <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	0691      	lsls	r1, r2, #26
 8001bc2:	d522      	bpl.n	8001c0a <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	0692      	lsls	r2, r2, #26
 8001bc8:	d51f      	bpl.n	8001c0a <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001bca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001bce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001bd0:	611a      	str	r2, [r3, #16]
    }
  }
}
 8001bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001bd6:	f000 b987 	b.w	8001ee8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bda:	f7ff ff63 	bl	8001aa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bde:	4620      	mov	r0, r4
 8001be0:	f7ff ff62 	bl	8001aa8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001be4:	e776      	b.n	8001ad4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be6:	f7ff ff5d 	bl	8001aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bea:	4620      	mov	r0, r4
 8001bec:	f7ff ff5c 	bl	8001aa8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bf0:	e785      	b.n	8001afe <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf2:	f7ff ff57 	bl	8001aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7ff ff56 	bl	8001aa8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bfc:	e793      	b.n	8001b26 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfe:	f7ff ff51 	bl	8001aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c02:	4620      	mov	r0, r4
 8001c04:	f7ff ff50 	bl	8001aa8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c08:	e7a2      	b.n	8001b50 <HAL_TIM_IRQHandler+0xa4>
 8001c0a:	bd10      	pop	{r4, pc}

08001c0c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c0c:	4a32      	ldr	r2, [pc, #200]	; (8001cd8 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8001c0e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c10:	4290      	cmp	r0, r2
 8001c12:	d012      	beq.n	8001c3a <TIM_Base_SetConfig+0x2e>
 8001c14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c18:	d00f      	beq.n	8001c3a <TIM_Base_SetConfig+0x2e>
 8001c1a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c1e:	4290      	cmp	r0, r2
 8001c20:	d00b      	beq.n	8001c3a <TIM_Base_SetConfig+0x2e>
 8001c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c26:	4290      	cmp	r0, r2
 8001c28:	d007      	beq.n	8001c3a <TIM_Base_SetConfig+0x2e>
 8001c2a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001c2e:	4290      	cmp	r0, r2
 8001c30:	d003      	beq.n	8001c3a <TIM_Base_SetConfig+0x2e>
 8001c32:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8001c36:	4290      	cmp	r0, r2
 8001c38:	d115      	bne.n	8001c66 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001c3a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c40:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c42:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <TIM_Base_SetConfig+0xcc>)
 8001c44:	4290      	cmp	r0, r2
 8001c46:	d01d      	beq.n	8001c84 <TIM_Base_SetConfig+0x78>
 8001c48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c4c:	d01a      	beq.n	8001c84 <TIM_Base_SetConfig+0x78>
 8001c4e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c52:	4290      	cmp	r0, r2
 8001c54:	d016      	beq.n	8001c84 <TIM_Base_SetConfig+0x78>
 8001c56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c5a:	4290      	cmp	r0, r2
 8001c5c:	d012      	beq.n	8001c84 <TIM_Base_SetConfig+0x78>
 8001c5e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001c62:	4290      	cmp	r0, r2
 8001c64:	d00e      	beq.n	8001c84 <TIM_Base_SetConfig+0x78>
 8001c66:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <TIM_Base_SetConfig+0xd0>)
 8001c68:	4290      	cmp	r0, r2
 8001c6a:	d00b      	beq.n	8001c84 <TIM_Base_SetConfig+0x78>
 8001c6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c70:	4290      	cmp	r0, r2
 8001c72:	d007      	beq.n	8001c84 <TIM_Base_SetConfig+0x78>
 8001c74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c78:	4290      	cmp	r0, r2
 8001c7a:	d003      	beq.n	8001c84 <TIM_Base_SetConfig+0x78>
 8001c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c80:	4290      	cmp	r0, r2
 8001c82:	d103      	bne.n	8001c8c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c84:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c8a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c8c:	694a      	ldr	r2, [r1, #20]
 8001c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c92:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001c94:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c96:	688b      	ldr	r3, [r1, #8]
 8001c98:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c9a:	680b      	ldr	r3, [r1, #0]
 8001c9c:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <TIM_Base_SetConfig+0xcc>)
 8001ca0:	4298      	cmp	r0, r3
 8001ca2:	d013      	beq.n	8001ccc <TIM_Base_SetConfig+0xc0>
 8001ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca8:	4298      	cmp	r0, r3
 8001caa:	d00f      	beq.n	8001ccc <TIM_Base_SetConfig+0xc0>
 8001cac:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001cb0:	4298      	cmp	r0, r3
 8001cb2:	d00b      	beq.n	8001ccc <TIM_Base_SetConfig+0xc0>
 8001cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cb8:	4298      	cmp	r0, r3
 8001cba:	d007      	beq.n	8001ccc <TIM_Base_SetConfig+0xc0>
 8001cbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cc0:	4298      	cmp	r0, r3
 8001cc2:	d003      	beq.n	8001ccc <TIM_Base_SetConfig+0xc0>
 8001cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc8:	4298      	cmp	r0, r3
 8001cca:	d101      	bne.n	8001cd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ccc:	690b      	ldr	r3, [r1, #16]
 8001cce:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	6143      	str	r3, [r0, #20]
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40012c00 	.word	0x40012c00
 8001cdc:	40014000 	.word	0x40014000

08001ce0 <HAL_TIM_Base_Init>:
{ 
 8001ce0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	b1a0      	cbz	r0, 8001d10 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001ce6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cee:	b91b      	cbnz	r3, 8001cf8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001cf0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001cf4:	f001 f932 	bl	8002f5c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001cfe:	6820      	ldr	r0, [r4, #0]
 8001d00:	1d21      	adds	r1, r4, #4
 8001d02:	f7ff ff83 	bl	8001c0c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d10:	2001      	movs	r0, #1
}
 8001d12:	bd10      	pop	{r4, pc}

08001d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d14:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001d16:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d18:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d1a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d1e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001d22:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d24:	6083      	str	r3, [r0, #8]
 8001d26:	bd10      	pop	{r4, pc}

08001d28 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001d28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001d2c:	2b01      	cmp	r3, #1
{
 8001d2e:	b570      	push	{r4, r5, r6, lr}
 8001d30:	4604      	mov	r4, r0
 8001d32:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001d36:	d01a      	beq.n	8001d6e <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d38:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001d3c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001d44:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d46:	4b52      	ldr	r3, [pc, #328]	; (8001e90 <HAL_TIM_ConfigClockSource+0x168>)
 8001d48:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001d4a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d4c:	680b      	ldr	r3, [r1, #0]
 8001d4e:	2b40      	cmp	r3, #64	; 0x40
 8001d50:	d075      	beq.n	8001e3e <HAL_TIM_ConfigClockSource+0x116>
 8001d52:	d818      	bhi.n	8001d86 <HAL_TIM_ConfigClockSource+0x5e>
 8001d54:	2b10      	cmp	r3, #16
 8001d56:	f000 808f 	beq.w	8001e78 <HAL_TIM_ConfigClockSource+0x150>
 8001d5a:	d809      	bhi.n	8001d70 <HAL_TIM_ConfigClockSource+0x48>
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8085 	beq.w	8001e6c <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8001d62:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d64:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d6a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001d6e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	f000 8087 	beq.w	8001e84 <HAL_TIM_ConfigClockSource+0x15c>
 8001d76:	2b30      	cmp	r3, #48	; 0x30
 8001d78:	d1f3      	bne.n	8001d62 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8001d7a:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d80:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001d84:	e033      	b.n	8001dee <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001d86:	2b70      	cmp	r3, #112	; 0x70
 8001d88:	d033      	beq.n	8001df2 <HAL_TIM_ConfigClockSource+0xca>
 8001d8a:	d81b      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x9c>
 8001d8c:	2b50      	cmp	r3, #80	; 0x50
 8001d8e:	d03f      	beq.n	8001e10 <HAL_TIM_ConfigClockSource+0xe8>
 8001d90:	2b60      	cmp	r3, #96	; 0x60
 8001d92:	d1e6      	bne.n	8001d62 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001d94:	684d      	ldr	r5, [r1, #4]
 8001d96:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d98:	6a01      	ldr	r1, [r0, #32]
 8001d9a:	f021 0110 	bic.w	r1, r1, #16
 8001d9e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001da0:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001da2:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001da4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001da8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001dac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001db0:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001db4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001db6:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001db8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001dbe:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001dc2:	e014      	b.n	8001dee <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc8:	d00c      	beq.n	8001de4 <HAL_TIM_ConfigClockSource+0xbc>
 8001dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dce:	d1c8      	bne.n	8001d62 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001dd0:	68cb      	ldr	r3, [r1, #12]
 8001dd2:	684a      	ldr	r2, [r1, #4]
 8001dd4:	6889      	ldr	r1, [r1, #8]
 8001dd6:	f7ff ff9d 	bl	8001d14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dda:	6822      	ldr	r2, [r4, #0]
 8001ddc:	6893      	ldr	r3, [r2, #8]
 8001dde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de2:	e013      	b.n	8001e0c <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001de4:	6883      	ldr	r3, [r0, #8]
 8001de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dea:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001dee:	6083      	str	r3, [r0, #8]
 8001df0:	e7b7      	b.n	8001d62 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001df2:	68cb      	ldr	r3, [r1, #12]
 8001df4:	684a      	ldr	r2, [r1, #4]
 8001df6:	6889      	ldr	r1, [r1, #8]
 8001df8:	f7ff ff8c 	bl	8001d14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001dfc:	6822      	ldr	r2, [r4, #0]
 8001dfe:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e04:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e0c:	6093      	str	r3, [r2, #8]
    break;
 8001e0e:	e7a8      	b.n	8001d62 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001e10:	684a      	ldr	r2, [r1, #4]
 8001e12:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e14:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e16:	6a05      	ldr	r5, [r0, #32]
 8001e18:	f025 0501 	bic.w	r5, r5, #1
 8001e1c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001e1e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e20:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e28:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001e2c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001e2e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e30:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001e32:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e38:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001e3c:	e7d7      	b.n	8001dee <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001e3e:	684a      	ldr	r2, [r1, #4]
 8001e40:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e42:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e44:	6a05      	ldr	r5, [r0, #32]
 8001e46:	f025 0501 	bic.w	r5, r5, #1
 8001e4a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001e4c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e4e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e56:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001e5a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001e5c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e5e:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001e60:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e66:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001e6a:	e7c0      	b.n	8001dee <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001e6c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e72:	f043 0307 	orr.w	r3, r3, #7
 8001e76:	e7ba      	b.n	8001dee <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001e78:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e7e:	f043 0317 	orr.w	r3, r3, #23
 8001e82:	e7b4      	b.n	8001dee <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001e84:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e8a:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001e8e:	e7ae      	b.n	8001dee <HAL_TIM_ConfigClockSource+0xc6>
 8001e90:	fffe0088 	.word	0xfffe0088

08001e94 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001e94:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e98:	2b01      	cmp	r3, #1
{
 8001e9a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001e9c:	d020      	beq.n	8001ee0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e9e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001ea0:	4d10      	ldr	r5, [pc, #64]	; (8001ee4 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 8001ea2:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001ea4:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001ea6:	42aa      	cmp	r2, r5
 8001ea8:	d007      	beq.n	8001eba <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8001eaa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001eae:	42aa      	cmp	r2, r5
 8001eb0:	d003      	beq.n	8001eba <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8001eb2:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001eb6:	42aa      	cmp	r2, r5
 8001eb8:	d103      	bne.n	8001ec2 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001eba:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001ebc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001ec0:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ec2:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ec4:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001eca:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001ecc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ed0:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ed2:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001ed4:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001ed6:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001ed8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001ee0:	2002      	movs	r0, #2
} 
 8001ee2:	bd30      	pop	{r4, r5, pc}
 8001ee4:	40012c00 	.word	0x40012c00

08001ee8 <HAL_TIMEx_CommutationCallback>:
 8001ee8:	4770      	bx	lr

08001eea <HAL_TIMEx_BreakCallback>:
 8001eea:	4770      	bx	lr

08001eec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001eec:	4770      	bx	lr

08001eee <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001eee:	6803      	ldr	r3, [r0, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ef6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f00:	2320      	movs	r3, #32
 8001f02:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8001f06:	4770      	bx	lr

08001f08 <HAL_UART_Transmit_DMA>:
{
 8001f08:	b538      	push	{r3, r4, r5, lr}
 8001f0a:	4604      	mov	r4, r0
 8001f0c:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001f0e:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8001f12:	2a20      	cmp	r2, #32
 8001f14:	d12b      	bne.n	8001f6e <HAL_UART_Transmit_DMA+0x66>
    if((pData == NULL ) || (Size == 0U))
 8001f16:	b341      	cbz	r1, 8001f6a <HAL_UART_Transmit_DMA+0x62>
 8001f18:	b33b      	cbz	r3, 8001f6a <HAL_UART_Transmit_DMA+0x62>
    __HAL_LOCK(huart);
 8001f1a:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8001f1e:	2a01      	cmp	r2, #1
 8001f20:	d025      	beq.n	8001f6e <HAL_UART_Transmit_DMA+0x66>
 8001f22:	2201      	movs	r2, #1
 8001f24:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001f28:	6e20      	ldr	r0, [r4, #96]	; 0x60
    huart->TxXferCount = Size;
 8001f2a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2e:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f30:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f32:	66e5      	str	r5, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f34:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize = Size;
 8001f3a:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr = pData;
 8001f3e:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001f40:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001f42:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <HAL_UART_Transmit_DMA+0x70>)
 8001f44:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001f46:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <HAL_UART_Transmit_DMA+0x74>)
 8001f48:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8001f4a:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8001f4c:	6345      	str	r5, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8001f4e:	3228      	adds	r2, #40	; 0x28
 8001f50:	f7fe ff3b 	bl	8000dca <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	2240      	movs	r2, #64	; 0x40
 8001f58:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f5a:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8001f5c:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f64:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8001f66:	4628      	mov	r0, r5
 8001f68:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8001f6e:	2002      	movs	r0, #2
}
 8001f70:	bd38      	pop	{r3, r4, r5, pc}
 8001f72:	bf00      	nop
 8001f74:	08001f83 	.word	0x08001f83
 8001f78:	08001fb3 	.word	0x08001fb3
 8001f7c:	08001fc1 	.word	0x08001fc1

08001f80 <HAL_UART_TxCpltCallback>:
 8001f80:	4770      	bx	lr

08001f82 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001f82:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001f84:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001f86:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f013 0320 	ands.w	r3, r3, #32
 8001f8e:	d10b      	bne.n	8001fa8 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 8001f90:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f94:	6813      	ldr	r3, [r2, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f9c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	bd08      	pop	{r3, pc}
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8001fa8:	4610      	mov	r0, r2
 8001faa:	f7ff ffe9 	bl	8001f80 <HAL_UART_TxCpltCallback>
 8001fae:	bd08      	pop	{r3, pc}

08001fb0 <HAL_UART_TxHalfCpltCallback>:
 8001fb0:	4770      	bx	lr

08001fb2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001fb2:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 8001fb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001fb6:	f7ff fffb 	bl	8001fb0 <HAL_UART_TxHalfCpltCallback>
 8001fba:	bd08      	pop	{r3, pc}

08001fbc <HAL_UART_RxCpltCallback>:
 8001fbc:	4770      	bx	lr

08001fbe <HAL_UART_ErrorCallback>:
 8001fbe:	4770      	bx	lr

08001fc0 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001fc0:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8001fc2:	b508      	push	{r3, lr}

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001fc4:	f891 3069 	ldrb.w	r3, [r1, #105]	; 0x69
 8001fc8:	2b21      	cmp	r3, #33	; 0x21
 8001fca:	d10d      	bne.n	8001fe8 <UART_DMAError+0x28>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8001fcc:	680b      	ldr	r3, [r1, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	0612      	lsls	r2, r2, #24
 8001fd2:	d509      	bpl.n	8001fe8 <UART_DMAError+0x28>
  {
    huart->TxXferCount = 0U;
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001fe0:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	f881 3069 	strb.w	r3, [r1, #105]	; 0x69
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001fe8:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 8001fec:	2b22      	cmp	r3, #34	; 0x22
 8001fee:	d109      	bne.n	8002004 <UART_DMAError+0x44>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8001ff0:	680b      	ldr	r3, [r1, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	065b      	lsls	r3, r3, #25
 8001ff6:	d505      	bpl.n	8002004 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8001ffe:	4608      	mov	r0, r1
 8002000:	f7ff ff75 	bl	8001eee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002004:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
 8002006:	f043 0310 	orr.w	r3, r3, #16
 800200a:	66cb      	str	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800200c:	4608      	mov	r0, r1
 800200e:	f7ff ffd6 	bl	8001fbe <HAL_UART_ErrorCallback>
 8002012:	bd08      	pop	{r3, pc}

08002014 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002014:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002016:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800201e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002022:	f7ff ffcc 	bl	8001fbe <HAL_UART_ErrorCallback>
 8002026:	bd08      	pop	{r3, pc}

08002028 <UART_SetConfig>:
{
 8002028:	b538      	push	{r3, r4, r5, lr}
 800202a:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800202c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800202e:	6921      	ldr	r1, [r4, #16]
 8002030:	68a2      	ldr	r2, [r4, #8]
 8002032:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002034:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002036:	430a      	orrs	r2, r1
 8002038:	6961      	ldr	r1, [r4, #20]
 800203a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800203c:	4977      	ldr	r1, [pc, #476]	; (800221c <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800203e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002040:	4001      	ands	r1, r0
 8002042:	430a      	orrs	r2, r1
 8002044:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002046:	686a      	ldr	r2, [r5, #4]
 8002048:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800204a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800204c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002050:	430a      	orrs	r2, r1
 8002052:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002054:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002056:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002058:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800205c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800205e:	430a      	orrs	r2, r1
 8002060:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002062:	4a6f      	ldr	r2, [pc, #444]	; (8002220 <UART_SetConfig+0x1f8>)
 8002064:	4295      	cmp	r5, r2
 8002066:	d112      	bne.n	800208e <UART_SetConfig+0x66>
 8002068:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 800206c:	496d      	ldr	r1, [pc, #436]	; (8002224 <UART_SetConfig+0x1fc>)
 800206e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002070:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002078:	5c8a      	ldrb	r2, [r1, r2]
 800207a:	d066      	beq.n	800214a <UART_SetConfig+0x122>
    switch (clocksource)
 800207c:	2a08      	cmp	r2, #8
 800207e:	d819      	bhi.n	80020b4 <UART_SetConfig+0x8c>
 8002080:	e8df f002 	tbb	[pc, r2]
 8002084:	189e92c2 	.word	0x189e92c2
 8002088:	181818a9 	.word	0x181818a9
 800208c:	ac          	.byte	0xac
 800208d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800208e:	4a66      	ldr	r2, [pc, #408]	; (8002228 <UART_SetConfig+0x200>)
 8002090:	4295      	cmp	r5, r2
 8002092:	d124      	bne.n	80020de <UART_SetConfig+0xb6>
 8002094:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8002098:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800209a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800209e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80020a2:	f000 80a0 	beq.w	80021e6 <UART_SetConfig+0x1be>
 80020a6:	d807      	bhi.n	80020b8 <UART_SetConfig+0x90>
 80020a8:	2a00      	cmp	r2, #0
 80020aa:	f000 80aa 	beq.w	8002202 <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b2:	d076      	beq.n	80021a2 <UART_SetConfig+0x17a>
        ret = HAL_ERROR;
 80020b4:	2001      	movs	r0, #1
  return ret;
 80020b6:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020b8:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80020bc:	f000 8099 	beq.w	80021f2 <UART_SetConfig+0x1ca>
 80020c0:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80020c4:	d1f3      	bne.n	80020ae <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ca:	d179      	bne.n	80021c0 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80020cc:	6860      	ldr	r0, [r4, #4]
 80020ce:	0843      	lsrs	r3, r0, #1
 80020d0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80020d4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80020d8:	fbb3 f3f0 	udiv	r3, r3, r0
 80020dc:	e054      	b.n	8002188 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020de:	4a53      	ldr	r2, [pc, #332]	; (800222c <UART_SetConfig+0x204>)
 80020e0:	4295      	cmp	r5, r2
 80020e2:	d10e      	bne.n	8002102 <UART_SetConfig+0xda>
 80020e4:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80020e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020ea:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80020ee:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80020f2:	d078      	beq.n	80021e6 <UART_SetConfig+0x1be>
 80020f4:	d9d8      	bls.n	80020a8 <UART_SetConfig+0x80>
 80020f6:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80020fa:	d07a      	beq.n	80021f2 <UART_SetConfig+0x1ca>
 80020fc:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002100:	e7e0      	b.n	80020c4 <UART_SetConfig+0x9c>
 8002102:	4a4b      	ldr	r2, [pc, #300]	; (8002230 <UART_SetConfig+0x208>)
 8002104:	4295      	cmp	r5, r2
 8002106:	d10e      	bne.n	8002126 <UART_SetConfig+0xfe>
 8002108:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800210c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800210e:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8002112:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002116:	d066      	beq.n	80021e6 <UART_SetConfig+0x1be>
 8002118:	d9c6      	bls.n	80020a8 <UART_SetConfig+0x80>
 800211a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800211e:	d068      	beq.n	80021f2 <UART_SetConfig+0x1ca>
 8002120:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002124:	e7ce      	b.n	80020c4 <UART_SetConfig+0x9c>
 8002126:	4a43      	ldr	r2, [pc, #268]	; (8002234 <UART_SetConfig+0x20c>)
 8002128:	4295      	cmp	r5, r2
 800212a:	d1c0      	bne.n	80020ae <UART_SetConfig+0x86>
 800212c:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002130:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002132:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8002136:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800213a:	d054      	beq.n	80021e6 <UART_SetConfig+0x1be>
 800213c:	d9b4      	bls.n	80020a8 <UART_SetConfig+0x80>
 800213e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002142:	d056      	beq.n	80021f2 <UART_SetConfig+0x1ca>
 8002144:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8002148:	e7bc      	b.n	80020c4 <UART_SetConfig+0x9c>
    switch (clocksource)
 800214a:	2a08      	cmp	r2, #8
 800214c:	d829      	bhi.n	80021a2 <UART_SetConfig+0x17a>
 800214e:	a301      	add	r3, pc, #4	; (adr r3, 8002154 <UART_SetConfig+0x12c>)
 8002150:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002154:	08002179 	.word	0x08002179
 8002158:	0800219d 	.word	0x0800219d
 800215c:	080020cd 	.word	0x080020cd
 8002160:	080021a3 	.word	0x080021a3
 8002164:	080021ed 	.word	0x080021ed
 8002168:	080021a3 	.word	0x080021a3
 800216c:	080021a3 	.word	0x080021a3
 8002170:	080021a3 	.word	0x080021a3
 8002174:	080021f9 	.word	0x080021f9
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002178:	f7ff fb08 	bl	800178c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800217c:	6861      	ldr	r1, [r4, #4]
 800217e:	084a      	lsrs	r2, r1, #1
 8002180:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002184:	fbb3 f3f1 	udiv	r3, r3, r1
 8002188:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800218a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 800218c:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8002190:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002192:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002196:	4313      	orrs	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]
 800219a:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800219c:	f7ff fb0e 	bl	80017bc <HAL_RCC_GetPCLK2Freq>
 80021a0:	e7ec      	b.n	800217c <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 80021a2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e7f1      	b.n	800218c <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80021a8:	f7ff fb08 	bl	80017bc <HAL_RCC_GetPCLK2Freq>
 80021ac:	6863      	ldr	r3, [r4, #4]
 80021ae:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80021b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <UART_SetConfig+0x1f8>)
 80021b8:	b280      	uxth	r0, r0
 80021ba:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80021bc:	2000      	movs	r0, #0
        break;
 80021be:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80021c0:	6862      	ldr	r2, [r4, #4]
 80021c2:	0853      	lsrs	r3, r2, #1
 80021c4:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80021c8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80021cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	60eb      	str	r3, [r5, #12]
 80021d4:	e7f2      	b.n	80021bc <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80021d6:	f7ff fa03 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 80021da:	e017      	b.n	800220c <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80021dc:	6862      	ldr	r2, [r4, #4]
 80021de:	0853      	lsrs	r3, r2, #1
 80021e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80021e4:	e7f2      	b.n	80021cc <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ea:	d1f4      	bne.n	80021d6 <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80021ec:	f7ff f9f8 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 80021f0:	e7c4      	b.n	800217c <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021f6:	d1f1      	bne.n	80021dc <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80021f8:	6860      	ldr	r0, [r4, #4]
 80021fa:	0843      	lsrs	r3, r0, #1
 80021fc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002200:	e76a      	b.n	80020d8 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002206:	d0b7      	beq.n	8002178 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002208:	f7ff fac0 	bl	800178c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800220c:	6863      	ldr	r3, [r4, #4]
 800220e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002212:	fbb0 f0f3 	udiv	r0, r0, r3
 8002216:	b280      	uxth	r0, r0
 8002218:	60e8      	str	r0, [r5, #12]
 800221a:	e7cf      	b.n	80021bc <UART_SetConfig+0x194>
 800221c:	efff69f3 	.word	0xefff69f3
 8002220:	40013800 	.word	0x40013800
 8002224:	08005308 	.word	0x08005308
 8002228:	40004400 	.word	0x40004400
 800222c:	40004800 	.word	0x40004800
 8002230:	40004c00 	.word	0x40004c00
 8002234:	40005000 	.word	0x40005000

08002238 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002238:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800223a:	07da      	lsls	r2, r3, #31
{
 800223c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800223e:	d506      	bpl.n	800224e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002240:	6801      	ldr	r1, [r0, #0]
 8002242:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002244:	684a      	ldr	r2, [r1, #4]
 8002246:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800224a:	4322      	orrs	r2, r4
 800224c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800224e:	079c      	lsls	r4, r3, #30
 8002250:	d506      	bpl.n	8002260 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002252:	6801      	ldr	r1, [r0, #0]
 8002254:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002256:	684a      	ldr	r2, [r1, #4]
 8002258:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800225c:	4322      	orrs	r2, r4
 800225e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002260:	0759      	lsls	r1, r3, #29
 8002262:	d506      	bpl.n	8002272 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002264:	6801      	ldr	r1, [r0, #0]
 8002266:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002268:	684a      	ldr	r2, [r1, #4]
 800226a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800226e:	4322      	orrs	r2, r4
 8002270:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002272:	071a      	lsls	r2, r3, #28
 8002274:	d506      	bpl.n	8002284 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002276:	6801      	ldr	r1, [r0, #0]
 8002278:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800227a:	684a      	ldr	r2, [r1, #4]
 800227c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002280:	4322      	orrs	r2, r4
 8002282:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002284:	06dc      	lsls	r4, r3, #27
 8002286:	d506      	bpl.n	8002296 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002288:	6801      	ldr	r1, [r0, #0]
 800228a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800228c:	688a      	ldr	r2, [r1, #8]
 800228e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002292:	4322      	orrs	r2, r4
 8002294:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002296:	0699      	lsls	r1, r3, #26
 8002298:	d506      	bpl.n	80022a8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800229a:	6801      	ldr	r1, [r0, #0]
 800229c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800229e:	688a      	ldr	r2, [r1, #8]
 80022a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a4:	4322      	orrs	r2, r4
 80022a6:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80022a8:	065a      	lsls	r2, r3, #25
 80022aa:	d50f      	bpl.n	80022cc <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022ac:	6801      	ldr	r1, [r0, #0]
 80022ae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80022b0:	684a      	ldr	r2, [r1, #4]
 80022b2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80022b6:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022b8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022bc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022be:	d105      	bne.n	80022cc <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80022c0:	684a      	ldr	r2, [r1, #4]
 80022c2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80022c4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80022c8:	4322      	orrs	r2, r4
 80022ca:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80022cc:	061b      	lsls	r3, r3, #24
 80022ce:	d506      	bpl.n	80022de <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022d0:	6802      	ldr	r2, [r0, #0]
 80022d2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80022d4:	6853      	ldr	r3, [r2, #4]
 80022d6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80022da:	430b      	orrs	r3, r1
 80022dc:	6053      	str	r3, [r2, #4]
 80022de:	bd10      	pop	{r4, pc}

080022e0 <UART_WaitOnFlagUntilTimeout>:
{
 80022e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e4:	9d06      	ldr	r5, [sp, #24]
 80022e6:	4604      	mov	r4, r0
 80022e8:	460f      	mov	r7, r1
 80022ea:	4616      	mov	r6, r2
 80022ec:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ee:	6821      	ldr	r1, [r4, #0]
 80022f0:	69ca      	ldr	r2, [r1, #28]
 80022f2:	ea37 0302 	bics.w	r3, r7, r2
 80022f6:	bf0c      	ite	eq
 80022f8:	2201      	moveq	r2, #1
 80022fa:	2200      	movne	r2, #0
 80022fc:	42b2      	cmp	r2, r6
 80022fe:	d002      	beq.n	8002306 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002300:	2000      	movs	r0, #0
}
 8002302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002306:	1c6b      	adds	r3, r5, #1
 8002308:	d0f2      	beq.n	80022f0 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800230a:	b99d      	cbnz	r5, 8002334 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002314:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800231e:	2320      	movs	r3, #32
 8002320:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002324:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002328:	2300      	movs	r3, #0
 800232a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800232e:	2003      	movs	r0, #3
 8002330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002334:	f7fe fc7e 	bl	8000c34 <HAL_GetTick>
 8002338:	eba0 0008 	sub.w	r0, r0, r8
 800233c:	4285      	cmp	r5, r0
 800233e:	d2d6      	bcs.n	80022ee <UART_WaitOnFlagUntilTimeout+0xe>
 8002340:	e7e4      	b.n	800230c <UART_WaitOnFlagUntilTimeout+0x2c>

08002342 <UART_CheckIdleState>:
{
 8002342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002344:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002346:	2600      	movs	r6, #0
 8002348:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800234a:	f7fe fc73 	bl	8000c34 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002354:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002356:	d417      	bmi.n	8002388 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	075b      	lsls	r3, r3, #29
 800235e:	d50a      	bpl.n	8002376 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2200      	movs	r2, #0
 8002368:	462b      	mov	r3, r5
 800236a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800236e:	4620      	mov	r0, r4
 8002370:	f7ff ffb6 	bl	80022e0 <UART_WaitOnFlagUntilTimeout>
 8002374:	b9a0      	cbnz	r0, 80023a0 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002376:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002378:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800237a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800237e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002382:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002386:	e00c      	b.n	80023a2 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	4632      	mov	r2, r6
 8002390:	4603      	mov	r3, r0
 8002392:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002396:	4620      	mov	r0, r4
 8002398:	f7ff ffa2 	bl	80022e0 <UART_WaitOnFlagUntilTimeout>
 800239c:	2800      	cmp	r0, #0
 800239e:	d0db      	beq.n	8002358 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80023a0:	2003      	movs	r0, #3
}
 80023a2:	b002      	add	sp, #8
 80023a4:	bd70      	pop	{r4, r5, r6, pc}

080023a6 <HAL_UART_Init>:
{
 80023a6:	b510      	push	{r4, lr}
  if(huart == NULL)
 80023a8:	4604      	mov	r4, r0
 80023aa:	b360      	cbz	r0, 8002406 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80023ac:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80023b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023b4:	b91b      	cbnz	r3, 80023be <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80023b6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80023ba:	f000 fe39 	bl	8003030 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80023be:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80023c0:	2324      	movs	r3, #36	; 0x24
 80023c2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80023c6:	6813      	ldr	r3, [r2, #0]
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023ce:	4620      	mov	r0, r4
 80023d0:	f7ff fe2a 	bl	8002028 <UART_SetConfig>
 80023d4:	2801      	cmp	r0, #1
 80023d6:	d016      	beq.n	8002406 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023da:	b113      	cbz	r3, 80023e2 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80023dc:	4620      	mov	r0, r4
 80023de:	f7ff ff2b 	bl	8002238 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023f2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80023fa:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80023fc:	601a      	str	r2, [r3, #0]
}
 80023fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002402:	f7ff bf9e 	b.w	8002342 <UART_CheckIdleState>
}
 8002406:	2001      	movs	r0, #1
 8002408:	bd10      	pop	{r4, pc}

0800240a <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800240a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800240e:	2b21      	cmp	r3, #33	; 0x21
 8002410:	d127      	bne.n	8002462 <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 8002412:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002416:	6802      	ldr	r2, [r0, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	b94b      	cbnz	r3, 8002430 <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800241c:	6811      	ldr	r1, [r2, #0]
 800241e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002422:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002424:	6811      	ldr	r1, [r2, #0]
 8002426:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800242a:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 800242c:	2000      	movs	r0, #0
 800242e:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002430:	6883      	ldr	r3, [r0, #8]
 8002432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002436:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002438:	d10e      	bne.n	8002458 <UART_Transmit_IT+0x4e>
 800243a:	6901      	ldr	r1, [r0, #16]
 800243c:	b961      	cbnz	r1, 8002458 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800243e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002442:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002446:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002448:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800244a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800244e:	3b01      	subs	r3, #1
 8002450:	b29b      	uxth	r3, r3
 8002452:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8002456:	e7e9      	b.n	800242c <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002458:	1c59      	adds	r1, r3, #1
 800245a:	64c1      	str	r1, [r0, #76]	; 0x4c
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	8513      	strh	r3, [r2, #40]	; 0x28
 8002460:	e7f3      	b.n	800244a <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8002462:	2002      	movs	r0, #2
  }
}
 8002464:	4770      	bx	lr

08002466 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002466:	6801      	ldr	r1, [r0, #0]
{
 8002468:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800246a:	680b      	ldr	r3, [r1, #0]
 800246c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002470:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002472:	2320      	movs	r3, #32
 8002474:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8002478:	f7ff fd82 	bl	8001f80 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800247c:	2000      	movs	r0, #0
 800247e:	bd08      	pop	{r3, pc}

08002480 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002480:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002484:	2b22      	cmp	r3, #34	; 0x22
{
 8002486:	b510      	push	{r4, lr}
 8002488:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800248a:	d129      	bne.n	80024e0 <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800248c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800248e:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 8002490:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002498:	ea02 0201 	and.w	r2, r2, r1
 800249c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800249e:	d11b      	bne.n	80024d8 <UART_Receive_IT+0x58>
 80024a0:	6901      	ldr	r1, [r0, #16]
 80024a2:	b9c9      	cbnz	r1, 80024d8 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80024a4:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 80024a8:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80024aa:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80024ae:	3c01      	subs	r4, #1
 80024b0:	b2a4      	uxth	r4, r4
 80024b2:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80024b6:	b96c      	cbnz	r4, 80024d4 <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024b8:	6803      	ldr	r3, [r0, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80024c0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024ca:	2320      	movs	r3, #32
 80024cc:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80024d0:	f7ff fd74 	bl	8001fbc <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 80024d4:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80024d6:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80024d8:	1c59      	adds	r1, r3, #1
 80024da:	6541      	str	r1, [r0, #84]	; 0x54
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e7e4      	b.n	80024aa <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	f042 0208 	orr.w	r2, r2, #8
 80024e6:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 80024e8:	2002      	movs	r0, #2
 80024ea:	bd10      	pop	{r4, pc}

080024ec <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024ec:	6802      	ldr	r2, [r0, #0]
 80024ee:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024f0:	6811      	ldr	r1, [r2, #0]
{
 80024f2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80024f4:	f013 050f 	ands.w	r5, r3, #15
{
 80024f8:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80024fa:	d107      	bne.n	800250c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024fc:	069e      	lsls	r6, r3, #26
 80024fe:	d505      	bpl.n	800250c <HAL_UART_IRQHandler+0x20>
 8002500:	068e      	lsls	r6, r1, #26
 8002502:	d503      	bpl.n	800250c <HAL_UART_IRQHandler+0x20>
}
 8002504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002508:	f7ff bfba 	b.w	8002480 <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 800250c:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 800250e:	2d00      	cmp	r5, #0
 8002510:	d05c      	beq.n	80025cc <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002512:	f010 0501 	ands.w	r5, r0, #1
 8002516:	d102      	bne.n	800251e <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002518:	f411 7f90 	tst.w	r1, #288	; 0x120
 800251c:	d056      	beq.n	80025cc <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800251e:	07d8      	lsls	r0, r3, #31
 8002520:	d507      	bpl.n	8002532 <HAL_UART_IRQHandler+0x46>
 8002522:	05ce      	lsls	r6, r1, #23
 8002524:	d505      	bpl.n	8002532 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002526:	2001      	movs	r0, #1
 8002528:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800252a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800252c:	f040 0001 	orr.w	r0, r0, #1
 8002530:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002532:	0798      	lsls	r0, r3, #30
 8002534:	d506      	bpl.n	8002544 <HAL_UART_IRQHandler+0x58>
 8002536:	b12d      	cbz	r5, 8002544 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002538:	2002      	movs	r0, #2
 800253a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800253c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800253e:	f040 0004 	orr.w	r0, r0, #4
 8002542:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002544:	075e      	lsls	r6, r3, #29
 8002546:	d506      	bpl.n	8002556 <HAL_UART_IRQHandler+0x6a>
 8002548:	b12d      	cbz	r5, 8002556 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800254a:	2004      	movs	r0, #4
 800254c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800254e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002550:	f040 0002 	orr.w	r0, r0, #2
 8002554:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002556:	0718      	lsls	r0, r3, #28
 8002558:	d507      	bpl.n	800256a <HAL_UART_IRQHandler+0x7e>
 800255a:	068e      	lsls	r6, r1, #26
 800255c:	d400      	bmi.n	8002560 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800255e:	b125      	cbz	r5, 800256a <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002560:	2008      	movs	r0, #8
 8002562:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002564:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002566:	4302      	orrs	r2, r0
 8002568:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800256a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800256c:	2a00      	cmp	r2, #0
 800256e:	d050      	beq.n	8002612 <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002570:	0698      	lsls	r0, r3, #26
 8002572:	d504      	bpl.n	800257e <HAL_UART_IRQHandler+0x92>
 8002574:	068a      	lsls	r2, r1, #26
 8002576:	d502      	bpl.n	800257e <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff ff81 	bl	8002480 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800257e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002580:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 8002582:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002584:	d404      	bmi.n	8002590 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800258a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800258e:	d019      	beq.n	80025c4 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 8002590:	f7ff fcad 	bl	8001eee <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	0656      	lsls	r6, r2, #25
 800259a:	d50f      	bpl.n	80025bc <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800259c:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800259e:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a4:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80025a6:	b148      	cbz	r0, 80025bc <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025a8:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <HAL_UART_IRQHandler+0x128>)
 80025aa:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025ac:	f7fe fc4a 	bl	8000e44 <HAL_DMA_Abort_IT>
 80025b0:	b378      	cbz	r0, 8002612 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025b2:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80025b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80025ba:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80025bc:	4620      	mov	r0, r4
 80025be:	f7ff fcfe 	bl	8001fbe <HAL_UART_ErrorCallback>
 80025c2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80025c4:	f7ff fcfb 	bl	8001fbe <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c8:	66e5      	str	r5, [r4, #108]	; 0x6c
 80025ca:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80025cc:	02dd      	lsls	r5, r3, #11
 80025ce:	d50e      	bpl.n	80025ee <HAL_UART_IRQHandler+0x102>
 80025d0:	0246      	lsls	r6, r0, #9
 80025d2:	d50c      	bpl.n	80025ee <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80025d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025d8:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80025da:	2320      	movs	r3, #32
 80025dc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 80025e0:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80025e2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80025e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80025ea:	f000 b815 	b.w	8002618 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025ee:	061d      	lsls	r5, r3, #24
 80025f0:	d506      	bpl.n	8002600 <HAL_UART_IRQHandler+0x114>
 80025f2:	0608      	lsls	r0, r1, #24
 80025f4:	d504      	bpl.n	8002600 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 80025f6:	4620      	mov	r0, r4
}
 80025f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 80025fc:	f7ff bf05 	b.w	800240a <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002600:	065a      	lsls	r2, r3, #25
 8002602:	d506      	bpl.n	8002612 <HAL_UART_IRQHandler+0x126>
 8002604:	064b      	lsls	r3, r1, #25
 8002606:	d504      	bpl.n	8002612 <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8002608:	4620      	mov	r0, r4
}
 800260a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 800260e:	f7ff bf2a 	b.w	8002466 <UART_EndTransmit_IT>
 8002612:	bd70      	pop	{r4, r5, r6, pc}
 8002614:	08002015 	.word	0x08002015

08002618 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002618:	4770      	bx	lr
	...

0800261c <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <MX_DMA_Init+0x3c>)
{
 800261e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	615a      	str	r2, [r3, #20]
 8002628:	695b      	ldr	r3, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800262c:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002630:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002632:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002634:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002636:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002638:	f7fe fb28 	bl	8000c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800263c:	200e      	movs	r0, #14
 800263e:	f7fe fb59 	bl	8000cf4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	4611      	mov	r1, r2
 8002646:	200f      	movs	r0, #15
 8002648:	f7fe fb20 	bl	8000c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800264c:	200f      	movs	r0, #15
 800264e:	f7fe fb51 	bl	8000cf4 <HAL_NVIC_EnableIRQ>

}
 8002652:	b003      	add	sp, #12
 8002654:	f85d fb04 	ldr.w	pc, [sp], #4
 8002658:	40021000 	.word	0x40021000

0800265c <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 800265c:	b510      	push	{r4, lr}
	OneWire_Reset(&OneWire); // Reset the bus
 800265e:	4c07      	ldr	r4, [pc, #28]	; (800267c <DS18B20_StartAll+0x20>)
 8002660:	4620      	mov	r0, r4
 8002662:	f000 fa53 	bl	8002b0c <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8002666:	4620      	mov	r0, r4
 8002668:	21cc      	movs	r1, #204	; 0xcc
 800266a:	f000 faa6 	bl	8002bba <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 800266e:	4620      	mov	r0, r4
 8002670:	2144      	movs	r1, #68	; 0x44
}
 8002672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8002676:	f000 baa0 	b.w	8002bba <OneWire_WriteByte>
 800267a:	bf00      	nop
 800267c:	20000220 	.word	0x20000220

08002680 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8002680:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if( number >= TempSensorCount) // If read sensor is not availible
 8002682:	4b28      	ldr	r3, [pc, #160]	; (8002724 <DS18B20_Read+0xa4>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	4283      	cmp	r3, r0
{
 8002688:	460d      	mov	r5, r1
	if( number >= TempSensorCount) // If read sensor is not availible
 800268a:	d802      	bhi.n	8002692 <DS18B20_Read+0x12>
		return 0;
 800268c:	2000      	movs	r0, #0
	}
	
	*destination = result;
	
	return 1; //temperature valid
}
 800268e:	b002      	add	sp, #8
 8002690:	bd70      	pop	{r4, r5, r6, pc}
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8002692:	0100      	lsls	r0, r0, #4
 8002694:	4b24      	ldr	r3, [pc, #144]	; (8002728 <DS18B20_Read+0xa8>)
 8002696:	18c4      	adds	r4, r0, r3
	return 1;
}

uint8_t DS18B20_Is(uint8_t* ROM)
{
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8002698:	5cc3      	ldrb	r3, [r0, r3]
 800269a:	2b28      	cmp	r3, #40	; 0x28
 800269c:	d1f6      	bne.n	800268c <DS18B20_Read+0xc>
	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 800269e:	4823      	ldr	r0, [pc, #140]	; (800272c <DS18B20_Read+0xac>)
 80026a0:	f000 fa70 	bl	8002b84 <OneWire_ReadBit>
 80026a4:	2800      	cmp	r0, #0
 80026a6:	d0f1      	beq.n	800268c <DS18B20_Read+0xc>
	OneWire_Reset(&OneWire); // Reset the bus
 80026a8:	4820      	ldr	r0, [pc, #128]	; (800272c <DS18B20_Read+0xac>)
		data[i] = OneWire_ReadByte(&OneWire);
 80026aa:	4e20      	ldr	r6, [pc, #128]	; (800272c <DS18B20_Read+0xac>)
	OneWire_Reset(&OneWire); // Reset the bus
 80026ac:	f000 fa2e 	bl	8002b0c <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80026b0:	4621      	mov	r1, r4
 80026b2:	481e      	ldr	r0, [pc, #120]	; (800272c <DS18B20_Read+0xac>)
 80026b4:	f000 fb16 	bl	8002ce4 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 80026b8:	21be      	movs	r1, #190	; 0xbe
 80026ba:	481c      	ldr	r0, [pc, #112]	; (800272c <DS18B20_Read+0xac>)
 80026bc:	f000 fa7d 	bl	8002bba <OneWire_WriteByte>
 80026c0:	2400      	movs	r4, #0
		data[i] = OneWire_ReadByte(&OneWire);
 80026c2:	4630      	mov	r0, r6
 80026c4:	f000 fa89 	bl	8002bda <OneWire_ReadByte>
 80026c8:	f80d 0004 	strb.w	r0, [sp, r4]
 80026cc:	3401      	adds	r4, #1
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 80026ce:	2c05      	cmp	r4, #5
 80026d0:	d1f7      	bne.n	80026c2 <DS18B20_Read+0x42>
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 80026d2:	f89d 3000 	ldrb.w	r3, [sp]
 80026d6:	f89d 4001 	ldrb.w	r4, [sp, #1]
	OneWire_Reset(&OneWire); // Reset the bus
 80026da:	4814      	ldr	r0, [pc, #80]	; (800272c <DS18B20_Read+0xac>)
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 80026dc:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
	OneWire_Reset(&OneWire); // Reset the bus
 80026e0:	f000 fa14 	bl	8002b0c <OneWire_Reset>
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 80026e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026e8:	f3c3 1341 	ubfx	r3, r3, #5, #2
	switch (resolution) // Chceck the correct value dur to resolution
 80026ec:	3309      	adds	r3, #9
 80026ee:	ee07 4a90 	vmov	s15, r4
 80026f2:	2b0b      	cmp	r3, #11
 80026f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f8:	d00d      	beq.n	8002716 <DS18B20_Read+0x96>
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d00e      	beq.n	800271c <DS18B20_Read+0x9c>
 80026fe:	2b0a      	cmp	r3, #10
			result = temperature*(float)DS18B20_STEP_9BIT;
 8002700:	bf14      	ite	ne
 8002702:	eeb6 7a00 	vmovne.f32	s14, #96	; 0x3f000000  0.5
			result = temperature*(float)DS18B20_STEP_10BIT;
 8002706:	eeb5 7a00 	vmoveq.f32	s14, #80	; 0x3e800000  0.250
			result = temperature*(float)DS18B20_STEP_12BIT;
 800270a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270e:	2001      	movs	r0, #1
	*destination = result;
 8002710:	edc5 7a00 	vstr	s15, [r5]
 8002714:	e7bb      	b.n	800268e <DS18B20_Read+0xe>
			result = temperature*(float)DS18B20_STEP_11BIT;
 8002716:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800271a:	e7f6      	b.n	800270a <DS18B20_Read+0x8a>
			result = temperature*(float)DS18B20_STEP_12BIT;
 800271c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002730 <DS18B20_Read+0xb0>
 8002720:	e7f3      	b.n	800270a <DS18B20_Read+0x8a>
 8002722:	bf00      	nop
 8002724:	200001f8 	.word	0x200001f8
 8002728:	20000210 	.word	0x20000210
 800272c:	20000220 	.word	0x20000220
 8002730:	3d800000 	.word	0x3d800000

08002734 <DS18B20_SetResolution>:
{
 8002734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( number >= TempSensorCount)
 8002738:	4b33      	ldr	r3, [pc, #204]	; (8002808 <DS18B20_SetResolution+0xd4>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	4283      	cmp	r3, r0
{
 800273e:	460d      	mov	r5, r1
	if( number >= TempSensorCount)
 8002740:	d905      	bls.n	800274e <DS18B20_SetResolution+0x1a>
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8002742:	0100      	lsls	r0, r0, #4
 8002744:	4b31      	ldr	r3, [pc, #196]	; (800280c <DS18B20_SetResolution+0xd8>)
 8002746:	18c6      	adds	r6, r0, r3
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8002748:	5cc3      	ldrb	r3, [r0, r3]
 800274a:	2b28      	cmp	r3, #40	; 0x28
 800274c:	d016      	beq.n	800277c <DS18B20_SetResolution+0x48>
		return 0;
 800274e:	2000      	movs	r0, #0
 8002750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if (resolution == DS18B20_Resolution_10bits) 
 8002754:	2d0a      	cmp	r5, #10
 8002756:	d104      	bne.n	8002762 <DS18B20_SetResolution+0x2e>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002758:	f004 04bf 	and.w	r4, r4, #191	; 0xbf
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800275c:	f044 0420 	orr.w	r4, r4, #32
 8002760:	e02d      	b.n	80027be <DS18B20_SetResolution+0x8a>
	else if (resolution == DS18B20_Resolution_11bits)
 8002762:	2d0b      	cmp	r5, #11
 8002764:	d104      	bne.n	8002770 <DS18B20_SetResolution+0x3c>
 8002766:	f004 04df 	and.w	r4, r4, #223	; 0xdf
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 800276a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 800276e:	e026      	b.n	80027be <DS18B20_SetResolution+0x8a>
	else if (resolution == DS18B20_Resolution_12bits)
 8002770:	2d0c      	cmp	r5, #12
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002772:	bf04      	itt	eq
 8002774:	f044 0460 	orreq.w	r4, r4, #96	; 0x60
 8002778:	b2e4      	uxtbeq	r4, r4
 800277a:	e020      	b.n	80027be <DS18B20_SetResolution+0x8a>
	OneWire_Reset(&OneWire); // Reset the bus
 800277c:	4824      	ldr	r0, [pc, #144]	; (8002810 <DS18B20_SetResolution+0xdc>)
 800277e:	f000 f9c5 	bl	8002b0c <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002782:	4631      	mov	r1, r6
 8002784:	4822      	ldr	r0, [pc, #136]	; (8002810 <DS18B20_SetResolution+0xdc>)
 8002786:	f000 faad 	bl	8002ce4 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 800278a:	21be      	movs	r1, #190	; 0xbe
 800278c:	4820      	ldr	r0, [pc, #128]	; (8002810 <DS18B20_SetResolution+0xdc>)
 800278e:	f000 fa14 	bl	8002bba <OneWire_WriteByte>
	OneWire_ReadByte(&OneWire);
 8002792:	481f      	ldr	r0, [pc, #124]	; (8002810 <DS18B20_SetResolution+0xdc>)
 8002794:	f000 fa21 	bl	8002bda <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 8002798:	481d      	ldr	r0, [pc, #116]	; (8002810 <DS18B20_SetResolution+0xdc>)
 800279a:	f000 fa1e 	bl	8002bda <OneWire_ReadByte>
	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 800279e:	481c      	ldr	r0, [pc, #112]	; (8002810 <DS18B20_SetResolution+0xdc>)
 80027a0:	f000 fa1b 	bl	8002bda <OneWire_ReadByte>
 80027a4:	4607      	mov	r7, r0
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 80027a6:	481a      	ldr	r0, [pc, #104]	; (8002810 <DS18B20_SetResolution+0xdc>)
 80027a8:	f000 fa17 	bl	8002bda <OneWire_ReadByte>
 80027ac:	4680      	mov	r8, r0
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 80027ae:	4818      	ldr	r0, [pc, #96]	; (8002810 <DS18B20_SetResolution+0xdc>)
 80027b0:	f000 fa13 	bl	8002bda <OneWire_ReadByte>
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 80027b4:	2d09      	cmp	r5, #9
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 80027b6:	4604      	mov	r4, r0
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 80027b8:	d1cc      	bne.n	8002754 <DS18B20_SetResolution+0x20>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80027ba:	f004 049f 	and.w	r4, r4, #159	; 0x9f
	OneWire_Reset(&OneWire); // Reset the bus
 80027be:	4814      	ldr	r0, [pc, #80]	; (8002810 <DS18B20_SetResolution+0xdc>)
 80027c0:	f000 f9a4 	bl	8002b0c <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80027c4:	4631      	mov	r1, r6
 80027c6:	4812      	ldr	r0, [pc, #72]	; (8002810 <DS18B20_SetResolution+0xdc>)
 80027c8:	f000 fa8c 	bl	8002ce4 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 80027cc:	214e      	movs	r1, #78	; 0x4e
 80027ce:	4810      	ldr	r0, [pc, #64]	; (8002810 <DS18B20_SetResolution+0xdc>)
 80027d0:	f000 f9f3 	bl	8002bba <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 80027d4:	4639      	mov	r1, r7
 80027d6:	480e      	ldr	r0, [pc, #56]	; (8002810 <DS18B20_SetResolution+0xdc>)
 80027d8:	f000 f9ef 	bl	8002bba <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 80027dc:	4641      	mov	r1, r8
 80027de:	480c      	ldr	r0, [pc, #48]	; (8002810 <DS18B20_SetResolution+0xdc>)
 80027e0:	f000 f9eb 	bl	8002bba <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 80027e4:	4621      	mov	r1, r4
 80027e6:	480a      	ldr	r0, [pc, #40]	; (8002810 <DS18B20_SetResolution+0xdc>)
 80027e8:	f000 f9e7 	bl	8002bba <OneWire_WriteByte>
	OneWire_Reset(&OneWire); // Reset the bus
 80027ec:	4808      	ldr	r0, [pc, #32]	; (8002810 <DS18B20_SetResolution+0xdc>)
 80027ee:	f000 f98d 	bl	8002b0c <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80027f2:	4631      	mov	r1, r6
 80027f4:	4806      	ldr	r0, [pc, #24]	; (8002810 <DS18B20_SetResolution+0xdc>)
 80027f6:	f000 fa75 	bl	8002ce4 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 80027fa:	2148      	movs	r1, #72	; 0x48
 80027fc:	4804      	ldr	r0, [pc, #16]	; (8002810 <DS18B20_SetResolution+0xdc>)
 80027fe:	f000 f9dc 	bl	8002bba <OneWire_WriteByte>
	return 1;
 8002802:	2001      	movs	r0, #1
 8002804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002808:	200001f8 	.word	0x200001f8
 800280c:	20000210 	.word	0x20000210
 8002810:	20000220 	.word	0x20000220

08002814 <DS18B20_AllDone>:
	return 0;
}

uint8_t DS18B20_AllDone(void)
{
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8002814:	4801      	ldr	r0, [pc, #4]	; (800281c <DS18B20_AllDone+0x8>)
 8002816:	f000 b9b5 	b.w	8002b84 <OneWire_ReadBit>
 800281a:	bf00      	nop
 800281c:	20000220 	.word	0x20000220

08002820 <DS18B20_ReadAll>:
}

void DS18B20_ReadAll(void)
{
 8002820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i;

	if (DS18B20_AllDone())
 8002824:	f7ff fff6 	bl	8002814 <DS18B20_AllDone>
 8002828:	b1c0      	cbz	r0, 800285c <DS18B20_ReadAll+0x3c>
 800282a:	2400      	movs	r4, #0
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 800282c:	4f0c      	ldr	r7, [pc, #48]	; (8002860 <DS18B20_ReadAll+0x40>)
		{
			ds18b20[i].ValidDataFlag = 0;
 800282e:	4d0d      	ldr	r5, [pc, #52]	; (8002864 <DS18B20_ReadAll+0x44>)
 8002830:	46a0      	mov	r8, r4
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8002832:	783b      	ldrb	r3, [r7, #0]
 8002834:	b2e0      	uxtb	r0, r4
 8002836:	4283      	cmp	r3, r0
 8002838:	d801      	bhi.n	800283e <DS18B20_ReadAll+0x1e>
 800283a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ds18b20[i].ValidDataFlag = 0;
 800283e:	0101      	lsls	r1, r0, #4
 8002840:	186e      	adds	r6, r5, r1
 8002842:	f886 800c 	strb.w	r8, [r6, #12]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8002846:	5c6b      	ldrb	r3, [r5, r1]
 8002848:	2b28      	cmp	r3, #40	; 0x28
 800284a:	d001      	beq.n	8002850 <DS18B20_ReadAll+0x30>
 800284c:	3401      	adds	r4, #1
 800284e:	e7f0      	b.n	8002832 <DS18B20_ReadAll+0x12>

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8002850:	3108      	adds	r1, #8
 8002852:	4429      	add	r1, r5
 8002854:	f7ff ff14 	bl	8002680 <DS18B20_Read>
 8002858:	7330      	strb	r0, [r6, #12]
 800285a:	e7f7      	b.n	800284c <DS18B20_ReadAll+0x2c>
 800285c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002860:	200001f8 	.word	0x200001f8
 8002864:	20000210 	.word	0x20000210

08002868 <DS18B20_GetTemperature>:
	return TempSensorCount;
}

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
	if(!ds18b20[number].ValidDataFlag)
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <DS18B20_GetTemperature+0x14>)
 800286a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800286e:	7b18      	ldrb	r0, [r3, #12]
 8002870:	b110      	cbz	r0, 8002878 <DS18B20_GetTemperature+0x10>
		return 0;

	*destination = ds18b20[number].Temperature;
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	600b      	str	r3, [r1, #0]
	return 1;
 8002876:	2001      	movs	r0, #1

}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000210 	.word	0x20000210

08002880 <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8002880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t next = 0, i = 0, j;
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 8002884:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002888:	f44f 6280 	mov.w	r2, #1024	; 0x400
{
 800288c:	4607      	mov	r7, r0
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 800288e:	4819      	ldr	r0, [pc, #100]	; (80028f4 <DS18B20_Init+0x74>)
 8002890:	4d19      	ldr	r5, [pc, #100]	; (80028f8 <DS18B20_Init+0x78>)

	next = OneWire_First(&OneWire); // Search first OneWire device
	while(next)
	{
		TempSensorCount++;
 8002892:	4e1a      	ldr	r6, [pc, #104]	; (80028fc <DS18B20_Init+0x7c>)
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8002894:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80028f4 <DS18B20_Init+0x74>
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 8002898:	f000 fa40 	bl	8002d1c <OneWire_Init>
	next = OneWire_First(&OneWire); // Search first OneWire device
 800289c:	4815      	ldr	r0, [pc, #84]	; (80028f4 <DS18B20_Init+0x74>)
 800289e:	f000 fa17 	bl	8002cd0 <OneWire_First>
	uint8_t next = 0, i = 0, j;
 80028a2:	2100      	movs	r1, #0
	while(next)
 80028a4:	b948      	cbnz	r0, 80028ba <DS18B20_Init+0x3a>
 80028a6:	460c      	mov	r4, r1
			break;
	}

	for(j = 0; j < i; j++)
	{
		if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 80028a8:	b223      	sxth	r3, r4
 80028aa:	eb05 1503 	add.w	r5, r5, r3, lsl #4
	for(j = 0; j < i; j++)
 80028ae:	2600      	movs	r6, #0
 80028b0:	b2f0      	uxtb	r0, r6
 80028b2:	4284      	cmp	r4, r0
 80028b4:	d813      	bhi.n	80028de <DS18B20_Init+0x5e>
 80028b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TempSensorCount++;
 80028ba:	7833      	ldrb	r3, [r6, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80028bc:	1c4c      	adds	r4, r1, #1
		TempSensorCount++;
 80028be:	3301      	adds	r3, #1
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80028c0:	eb05 1101 	add.w	r1, r5, r1, lsl #4
 80028c4:	4640      	mov	r0, r8
		TempSensorCount++;
 80028c6:	7033      	strb	r3, [r6, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80028c8:	f000 fa1c 	bl	8002d04 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 80028cc:	4640      	mov	r0, r8
 80028ce:	f000 fa06 	bl	8002cde <OneWire_Next>
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 80028d2:	7833      	ldrb	r3, [r6, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80028d4:	b2e4      	uxtb	r4, r4
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e6      	bne.n	80028a8 <DS18B20_Init+0x28>
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80028da:	4621      	mov	r1, r4
 80028dc:	e7e2      	b.n	80028a4 <DS18B20_Init+0x24>
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 80028de:	782b      	ldrb	r3, [r5, #0]
 80028e0:	2b28      	cmp	r3, #40	; 0x28
 80028e2:	d003      	beq.n	80028ec <DS18B20_Init+0x6c>
		{
			DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
		}

		DS18B20_StartAll(); // Start conversion on all sensors
 80028e4:	f7ff feba 	bl	800265c <DS18B20_StartAll>
 80028e8:	3601      	adds	r6, #1
 80028ea:	e7e1      	b.n	80028b0 <DS18B20_Init+0x30>
			DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 80028ec:	4639      	mov	r1, r7
 80028ee:	f7ff ff21 	bl	8002734 <DS18B20_SetResolution>
 80028f2:	e7f7      	b.n	80028e4 <DS18B20_Init+0x64>
 80028f4:	20000220 	.word	0x20000220
 80028f8:	20000210 	.word	0x20000210
 80028fc:	200001f8 	.word	0x200001f8

08002900 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002900:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002902:	2214      	movs	r2, #20
{
 8002904:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002906:	eb0d 0002 	add.w	r0, sp, r2
 800290a:	2100      	movs	r1, #0
 800290c:	f000 fc76 	bl	80031fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002910:	4b22      	ldr	r3, [pc, #136]	; (800299c <MX_GPIO_Init+0x9c>)
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002918:	615a      	str	r2, [r3, #20]
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002920:	9201      	str	r2, [sp, #4]
 8002922:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800292a:	615a      	str	r2, [r3, #20]
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002932:	9202      	str	r2, [sp, #8]
 8002934:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800293c:	615a      	str	r2, [r3, #20]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002944:	9203      	str	r2, [sp, #12]
 8002946:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800294e:	615a      	str	r2, [r3, #20]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 8002956:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002958:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 800295a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800295e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002962:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 8002964:	f7fe fbb0 	bl	80010c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 800296e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002970:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <MX_GPIO_Init+0xa0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002974:	480b      	ldr	r0, [pc, #44]	; (80029a4 <MX_GPIO_Init+0xa4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002976:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800297a:	f7fe facf 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|DS18B20_Pin;
 800297e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002982:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002984:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002986:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002990:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002992:	f7fe fac3 	bl	8000f1c <HAL_GPIO_Init>

}
 8002996:	b00a      	add	sp, #40	; 0x28
 8002998:	bd10      	pop	{r4, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	10210000 	.word	0x10210000
 80029a4:	48000800 	.word	0x48000800

080029a8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b500      	push	{lr}
 80029aa:	b093      	sub	sp, #76	; 0x4c
	float temperature;
	char message[64];
	int messageSize;

	DS18B20_ReadAll();
 80029ac:	f7ff ff38 	bl	8002820 <DS18B20_ReadAll>
	DS18B20_StartAll();
 80029b0:	f7ff fe54 	bl	800265c <DS18B20_StartAll>

	if (DS18B20_GetTemperature(0, &temperature)) {
 80029b4:	a901      	add	r1, sp, #4
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7ff ff56 	bl	8002868 <DS18B20_GetTemperature>
 80029bc:	b190      	cbz	r0, 80029e4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		memset(message, 0, sizeof(message));
 80029be:	2240      	movs	r2, #64	; 0x40
 80029c0:	2100      	movs	r1, #0
 80029c2:	a802      	add	r0, sp, #8
 80029c4:	f000 fc1a 	bl	80031fc <memset>
		messageSize = sprintf(message, "%.1f\n\r", temperature);
 80029c8:	9801      	ldr	r0, [sp, #4]
 80029ca:	f7fd fdc5 	bl	8000558 <__aeabi_f2d>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	a802      	add	r0, sp, #8
 80029d4:	4907      	ldr	r1, [pc, #28]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80029d6:	f001 f885 	bl	8003ae4 <siprintf>
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageSize);
 80029da:	a902      	add	r1, sp, #8
 80029dc:	b282      	uxth	r2, r0
 80029de:	4806      	ldr	r0, [pc, #24]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80029e0:	f7ff fa92 	bl	8001f08 <HAL_UART_Transmit_DMA>
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80029e4:	2120      	movs	r1, #32
 80029e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ea:	f7fe fb72 	bl	80010d2 <HAL_GPIO_TogglePin>

}
 80029ee:	b013      	add	sp, #76	; 0x4c
 80029f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80029f4:	0800530c 	.word	0x0800530c
 80029f8:	2000033c 	.word	0x2000033c

080029fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029fc:	b530      	push	{r4, r5, lr}
 80029fe:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a00:	2228      	movs	r2, #40	; 0x28
 8002a02:	2100      	movs	r1, #0
 8002a04:	a806      	add	r0, sp, #24
 8002a06:	f000 fbf9 	bl	80031fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a0a:	2214      	movs	r2, #20
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	a801      	add	r0, sp, #4
 8002a10:	f000 fbf4 	bl	80031fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a14:	2258      	movs	r2, #88	; 0x58
 8002a16:	2100      	movs	r1, #0
 8002a18:	a810      	add	r0, sp, #64	; 0x40
 8002a1a:	f000 fbef 	bl	80031fc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a22:	2310      	movs	r3, #16
 8002a24:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a2a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a2c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a2e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a30:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a34:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a36:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a38:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a3a:	f7fe fb4f 	bl	80010dc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a3e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a40:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a42:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a44:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a4a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a4c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a4e:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a50:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a52:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a54:	f7fe fdf0 	bl	8001638 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <SystemClock_Config+0x74>)
 8002a5a:	9310      	str	r3, [sp, #64]	; 0x40
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a5c:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a5e:	9412      	str	r4, [sp, #72]	; 0x48
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a60:	9413      	str	r4, [sp, #76]	; 0x4c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002a62:	941d      	str	r4, [sp, #116]	; 0x74
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002a64:	941e      	str	r4, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a66:	f7fe fec1 	bl	80017ec <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002a6a:	b027      	add	sp, #156	; 0x9c
 8002a6c:	bd30      	pop	{r4, r5, pc}
 8002a6e:	bf00      	nop
 8002a70:	00101003 	.word	0x00101003

08002a74 <main>:
{
 8002a74:	b508      	push	{r3, lr}
  HAL_Init();
 8002a76:	f7fe f8bf 	bl	8000bf8 <HAL_Init>
  SystemClock_Config();
 8002a7a:	f7ff ffbf 	bl	80029fc <SystemClock_Config>
  MX_GPIO_Init();
 8002a7e:	f7ff ff3f 	bl	8002900 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a82:	f7ff fdcb 	bl	800261c <MX_DMA_Init>
  MX_TIM1_Init();
 8002a86:	f000 f9f7 	bl	8002e78 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002a8a:	f000 fab3 	bl	8002ff4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002a8e:	f000 fa2d 	bl	8002eec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002a92:	f000 fa91 	bl	8002fb8 <MX_USART1_UART_Init>
	DS18B20_Init(DS18B20_Resolution_9bits);
 8002a96:	2009      	movs	r0, #9
 8002a98:	f7ff fef2 	bl	8002880 <DS18B20_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8002a9c:	4801      	ldr	r0, [pc, #4]	; (8002aa4 <main+0x30>)
 8002a9e:	f7fe fff6 	bl	8001a8e <HAL_TIM_Base_Start_IT>
 8002aa2:	e7fe      	b.n	8002aa2 <main+0x2e>
 8002aa4:	20000274 	.word	0x20000274

08002aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aa8:	4770      	bx	lr
	...

08002aac <OneWire_Delay>:
//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
	_DS18B20_TIMER.Instance->CNT = 0;
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <OneWire_Delay+0x10>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 8002ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab6:	4282      	cmp	r2, r0
 8002ab8:	d9fc      	bls.n	8002ab4 <OneWire_Delay+0x8>
}
 8002aba:	4770      	bx	lr
 8002abc:	20000234 	.word	0x20000234

08002ac0 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8002ac0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8002ac6:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8002ac8:	a906      	add	r1, sp, #24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002aca:	2301      	movs	r3, #1
 8002acc:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8002ace:	8883      	ldrh	r3, [r0, #4]
 8002ad0:	f841 3d14 	str.w	r3, [r1, #-20]!
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8002ad4:	6800      	ldr	r0, [r0, #0]
 8002ad6:	f7fe fa21 	bl	8000f1c <HAL_GPIO_Init>
}	
 8002ada:	b007      	add	sp, #28
 8002adc:	f85d fb04 	ldr.w	pc, [sp], #4

08002ae0 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8002ae0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8002ae2:	2311      	movs	r3, #17
 8002ae4:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8002aea:	a906      	add	r1, sp, #24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002aec:	2301      	movs	r3, #1
 8002aee:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8002af0:	8883      	ldrh	r3, [r0, #4]
 8002af2:	f841 3d14 	str.w	r3, [r1, #-20]!
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8002af6:	6800      	ldr	r0, [r0, #0]
 8002af8:	f7fe fa10 	bl	8000f1c <HAL_GPIO_Init>
}
 8002afc:	b007      	add	sp, #28
 8002afe:	f85d fb04 	ldr.w	pc, [sp], #4

08002b02 <OneWire_OutputLow>:
//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8002b02:	8883      	ldrh	r3, [r0, #4]
 8002b04:	6802      	ldr	r2, [r0, #0]
 8002b06:	041b      	lsls	r3, r3, #16
 8002b08:	6193      	str	r3, [r2, #24]
 8002b0a:	4770      	bx	lr

08002b0c <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8002b0c:	b510      	push	{r4, lr}
 8002b0e:	4604      	mov	r4, r0
	uint8_t i;
	
	OneWire_OutputLow(onewire);  // Write bus output low
 8002b10:	f7ff fff7 	bl	8002b02 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8002b14:	f7ff ffe4 	bl	8002ae0 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 8002b18:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002b1c:	f7ff ffc6 	bl	8002aac <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8002b20:	4620      	mov	r0, r4
 8002b22:	f7ff ffcd 	bl	8002ac0 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8002b26:	2046      	movs	r0, #70	; 0x46
 8002b28:	f7ff ffc0 	bl	8002aac <OneWire_Delay>
	
	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8002b2c:	88a1      	ldrh	r1, [r4, #4]
 8002b2e:	6820      	ldr	r0, [r4, #0]
 8002b30:	f7fe fac4 	bl	80010bc <HAL_GPIO_ReadPin>
 8002b34:	4601      	mov	r1, r0
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8002b36:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8002b3a:	f7ff ffb7 	bl	8002aac <OneWire_Delay>

	return i;
}
 8002b3e:	4608      	mov	r0, r1
 8002b40:	bd10      	pop	{r4, pc}

08002b42 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8002b42:	b510      	push	{r4, lr}
 8002b44:	4604      	mov	r4, r0
	if (bit) // Send '1',
 8002b46:	b189      	cbz	r1, 8002b6c <OneWire_WriteBit+0x2a>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8002b48:	f7ff ffdb 	bl	8002b02 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8002b4c:	f7ff ffc8 	bl	8002ae0 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8002b50:	2006      	movs	r0, #6
 8002b52:	f7ff ffab 	bl	8002aac <OneWire_Delay>
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7ff ffb2 	bl	8002ac0 <OneWire_BusInputDirection>
		
		OneWire_Delay(64);
 8002b5c:	2040      	movs	r0, #64	; 0x40
		OneWire_BusOutputDirection(onewire);
		OneWire_Delay(60);
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		
		OneWire_Delay(10);
 8002b5e:	f7ff ffa5 	bl	8002aac <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus
 8002b62:	4620      	mov	r0, r4
	}
}
 8002b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		OneWire_BusInputDirection(onewire); // Release bus
 8002b68:	f7ff bfaa 	b.w	8002ac0 <OneWire_BusInputDirection>
		OneWire_OutputLow(onewire); // Set the bus low
 8002b6c:	f7ff ffc9 	bl	8002b02 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8002b70:	f7ff ffb6 	bl	8002ae0 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8002b74:	203c      	movs	r0, #60	; 0x3c
 8002b76:	f7ff ff99 	bl	8002aac <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7ff ffa0 	bl	8002ac0 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8002b80:	200a      	movs	r0, #10
 8002b82:	e7ec      	b.n	8002b5e <OneWire_WriteBit+0x1c>

08002b84 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8002b84:	b510      	push	{r4, lr}
 8002b86:	4604      	mov	r4, r0
	uint8_t bit = 0; // Default read bit state is low
	
	OneWire_OutputLow(onewire); // Set low to initiate reading
 8002b88:	f7ff ffbb 	bl	8002b02 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8002b8c:	f7ff ffa8 	bl	8002ae0 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8002b90:	2002      	movs	r0, #2
 8002b92:	f7ff ff8b 	bl	8002aac <OneWire_Delay>
	
	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7ff ff92 	bl	8002ac0 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8002b9c:	200a      	movs	r0, #10
 8002b9e:	f7ff ff85 	bl	8002aac <OneWire_Delay>
	
	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8002ba2:	88a1      	ldrh	r1, [r4, #4]
 8002ba4:	6820      	ldr	r0, [r4, #0]
 8002ba6:	f7fe fa89 	bl	80010bc <HAL_GPIO_ReadPin>
 8002baa:	4601      	mov	r1, r0
		bit = 1;
	
	OneWire_Delay(50); // Wait for end of read cycle
 8002bac:	2032      	movs	r0, #50	; 0x32
 8002bae:	f7ff ff7d 	bl	8002aac <OneWire_Delay>

	return bit;
}
 8002bb2:	1c08      	adds	r0, r1, #0
 8002bb4:	bf18      	it	ne
 8002bb6:	2001      	movne	r0, #1
 8002bb8:	bd10      	pop	{r4, pc}

08002bba <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8002bba:	b570      	push	{r4, r5, r6, lr}
 8002bbc:	4606      	mov	r6, r0
 8002bbe:	460d      	mov	r5, r1
 8002bc0:	2408      	movs	r4, #8
	uint8_t i = 8;

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8002bc2:	f005 0101 	and.w	r1, r5, #1
 8002bc6:	4630      	mov	r0, r6
 8002bc8:	3c01      	subs	r4, #1
 8002bca:	f7ff ffba 	bl	8002b42 <OneWire_WriteBit>
		byte >>= 1;
	} while(--i);
 8002bce:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		byte >>= 1;
 8002bd2:	ea4f 0555 	mov.w	r5, r5, lsr #1
	} while(--i);
 8002bd6:	d1f4      	bne.n	8002bc2 <OneWire_WriteByte+0x8>
}
 8002bd8:	bd70      	pop	{r4, r5, r6, pc}

08002bda <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8002bda:	b570      	push	{r4, r5, r6, lr}
 8002bdc:	4606      	mov	r6, r0
 8002bde:	2508      	movs	r5, #8
	uint8_t i = 8, byte = 0;
 8002be0:	2400      	movs	r4, #0

	do{
		byte >>= 1;
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8002be2:	4630      	mov	r0, r6
 8002be4:	f7ff ffce 	bl	8002b84 <OneWire_ReadBit>
		byte >>= 1;
 8002be8:	0864      	lsrs	r4, r4, #1
 8002bea:	3d01      	subs	r5, #1
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8002bec:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
	} while(--i);
 8002bf0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8002bf4:	b2e4      	uxtb	r4, r4
	} while(--i);
 8002bf6:	d1f4      	bne.n	8002be2 <OneWire_ReadByte+0x8>
	
	return byte;
}
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}

08002bfc <OneWire_Search>:
	onewire->LastDeviceFlag = 0;
	onewire->LastFamilyDiscrepancy = 0;
}

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8002bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	last_zero = 0;
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8002c00:	7a03      	ldrb	r3, [r0, #8]
{
 8002c02:	4604      	mov	r4, r0
 8002c04:	460d      	mov	r5, r1
	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8002c06:	b91b      	cbnz	r3, 8002c10 <OneWire_Search+0x14>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8002c08:	f7ff ff80 	bl	8002b0c <OneWire_Reset>
 8002c0c:	4681      	mov	r9, r0
 8002c0e:	b128      	cbz	r0, 8002c1c <OneWire_Search+0x20>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8002c10:	2000      	movs	r0, #0
 8002c12:	71a0      	strb	r0, [r4, #6]
			onewire->LastDeviceFlag = 0;
 8002c14:	7220      	strb	r0, [r4, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8002c16:	71e0      	strb	r0, [r4, #7]
			return 0;
 8002c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f7ff ffcb 	bl	8002bba <OneWire_WriteByte>
	rom_byte_mask = 1;
 8002c24:	2601      	movs	r6, #1
	rom_byte_number = 0;
 8002c26:	464f      	mov	r7, r9
	id_bit_number = 1;
 8002c28:	4635      	mov	r5, r6

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f7ff ffaa 	bl	8002b84 <OneWire_ReadBit>
 8002c30:	4680      	mov	r8, r0
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8002c32:	4620      	mov	r0, r4
 8002c34:	f7ff ffa6 	bl	8002b84 <OneWire_ReadBit>

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8002c38:	f1b8 0f01 	cmp.w	r8, #1
 8002c3c:	d110      	bne.n	8002c60 <OneWire_Search+0x64>
 8002c3e:	2801      	cmp	r0, #1
 8002c40:	d12e      	bne.n	8002ca0 <OneWire_Search+0xa4>
					rom_byte_mask = 1; // Reset the mask - first bit
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8002c42:	2d40      	cmp	r5, #64	; 0x40
 8002c44:	d9e4      	bls.n	8002c10 <OneWire_Search+0x14>
		{
			onewire->LastDiscrepancy = last_zero;
 8002c46:	f884 9006 	strb.w	r9, [r4, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8002c4a:	f1b9 0f00 	cmp.w	r9, #0
 8002c4e:	d101      	bne.n	8002c54 <OneWire_Search+0x58>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8002c50:	2301      	movs	r3, #1
 8002c52:	7223      	strb	r3, [r4, #8]
			search_result = 1; // Searching successful
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8002c54:	7a63      	ldrb	r3, [r4, #9]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0da      	beq.n	8002c10 <OneWire_Search+0x14>
 8002c5a:	2001      	movs	r0, #1
		onewire->LastFamilyDiscrepancy = 0;
		search_result = 0;
	}

	return search_result;
}
 8002c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (id_bit != cmp_id_bit)
 8002c60:	4580      	cmp	r8, r0
 8002c62:	eb04 0307 	add.w	r3, r4, r7
 8002c66:	d110      	bne.n	8002c8a <OneWire_Search+0x8e>
					if (id_bit_number < onewire->LastDiscrepancy)
 8002c68:	79a2      	ldrb	r2, [r4, #6]
 8002c6a:	4295      	cmp	r5, r2
 8002c6c:	d212      	bcs.n	8002c94 <OneWire_Search+0x98>
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8002c6e:	7a5a      	ldrb	r2, [r3, #9]
 8002c70:	4216      	tst	r6, r2
 8002c72:	bf14      	ite	ne
 8002c74:	f04f 0801 	movne.w	r8, #1
 8002c78:	f04f 0800 	moveq.w	r8, #0
					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8002c7c:	f1b8 0f00 	cmp.w	r8, #0
 8002c80:	d10e      	bne.n	8002ca0 <OneWire_Search+0xa4>
						if (last_zero < 9) // Check for last discrepancy in family
 8002c82:	2d08      	cmp	r5, #8
 8002c84:	d800      	bhi.n	8002c88 <OneWire_Search+0x8c>
							onewire->LastFamilyDiscrepancy = last_zero;
 8002c86:	71e5      	strb	r5, [r4, #7]
 8002c88:	46a9      	mov	r9, r5
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8002c8a:	7a5a      	ldrb	r2, [r3, #9]
 8002c8c:	ea22 0206 	bic.w	r2, r2, r6
 8002c90:	725a      	strb	r2, [r3, #9]
 8002c92:	e00b      	b.n	8002cac <OneWire_Search+0xb0>
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8002c94:	bf0c      	ite	eq
 8002c96:	f04f 0801 	moveq.w	r8, #1
 8002c9a:	f04f 0800 	movne.w	r8, #0
 8002c9e:	e7ed      	b.n	8002c7c <OneWire_Search+0x80>
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8002ca0:	19e2      	adds	r2, r4, r7
 8002ca2:	f04f 0801 	mov.w	r8, #1
 8002ca6:	7a53      	ldrb	r3, [r2, #9]
 8002ca8:	4333      	orrs	r3, r6
 8002caa:	7253      	strb	r3, [r2, #9]
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8002cac:	4641      	mov	r1, r8
 8002cae:	4620      	mov	r0, r4
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8002cb0:	0076      	lsls	r6, r6, #1
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8002cb2:	f7ff ff46 	bl	8002b42 <OneWire_WriteBit>
				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8002cb6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
					rom_byte_number++; // Next byte number
 8002cba:	bf04      	itt	eq
 8002cbc:	3701      	addeq	r7, #1
 8002cbe:	b2ff      	uxtbeq	r7, r7
				id_bit_number++; // Next bit search - increase the id
 8002cc0:	f105 0501 	add.w	r5, r5, #1
					rom_byte_mask = 1; // Reset the mask - first bit
 8002cc4:	bf08      	it	eq
 8002cc6:	2601      	moveq	r6, #1
		} while(rom_byte_number < 8);  // Read 8 bytes
 8002cc8:	2f07      	cmp	r7, #7
				id_bit_number++; // Next bit search - increase the id
 8002cca:	b2ed      	uxtb	r5, r5
		} while(rom_byte_number < 8);  // Read 8 bytes
 8002ccc:	d9ad      	bls.n	8002c2a <OneWire_Search+0x2e>
 8002cce:	e7b8      	b.n	8002c42 <OneWire_Search+0x46>

08002cd0 <OneWire_First>:
	onewire->LastDiscrepancy = 0;
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	7182      	strb	r2, [r0, #6]
	onewire->LastDeviceFlag = 0;
 8002cd4:	7202      	strb	r2, [r0, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8002cd6:	71c2      	strb	r2, [r0, #7]
//
uint8_t OneWire_First(OneWire_t* onewire)
{
	OneWire_ResetSearch(onewire);

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8002cd8:	21f0      	movs	r1, #240	; 0xf0
 8002cda:	f7ff bf8f 	b.w	8002bfc <OneWire_Search>

08002cde <OneWire_Next>:
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8002cde:	21f0      	movs	r1, #240	; 0xf0
 8002ce0:	f7ff bf8c 	b.w	8002bfc <OneWire_Search>

08002ce4 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8002ce4:	b570      	push	{r4, r5, r6, lr}
 8002ce6:	460c      	mov	r4, r1
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8002ce8:	2155      	movs	r1, #85	; 0x55
{
 8002cea:	4606      	mov	r6, r0
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8002cec:	f7ff ff65 	bl	8002bba <OneWire_WriteByte>
 8002cf0:	1e65      	subs	r5, r4, #1
 8002cf2:	3407      	adds	r4, #7
	
	for (i = 0; i < 8; i++)
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8002cf4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002cf8:	4630      	mov	r0, r6
 8002cfa:	f7ff ff5e 	bl	8002bba <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8002cfe:	42a5      	cmp	r5, r4
 8002d00:	d1f8      	bne.n	8002cf4 <OneWire_SelectWithPointer+0x10>
	}	
}
 8002d02:	bd70      	pop	{r4, r5, r6, pc}

08002d04 <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8002d04:	f100 0309 	add.w	r3, r0, #9
 8002d08:	3901      	subs	r1, #1
 8002d0a:	3011      	adds	r0, #17
	uint8_t i;
	for (i = 0; i < 8; i++) {
		*(firstIndex + i) = onewire->ROM_NO[i];
 8002d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d10:	f801 2f01 	strb.w	r2, [r1, #1]!
	for (i = 0; i < 8; i++) {
 8002d14:	4283      	cmp	r3, r0
 8002d16:	d1f9      	bne.n	8002d0c <OneWire_GetFullROM+0x8>
	}
}
 8002d18:	4770      	bx	lr
	...

08002d1c <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d1c:	b570      	push	{r4, r5, r6, lr}
 8002d1e:	4604      	mov	r4, r0
 8002d20:	460e      	mov	r6, r1
 8002d22:	4615      	mov	r5, r2
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8002d24:	480d      	ldr	r0, [pc, #52]	; (8002d5c <OneWire_Init+0x40>)
 8002d26:	f7fe fea5 	bl	8001a74 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
	onewire->GPIO_Pin = GPIO_Pin;

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8002d2a:	4620      	mov	r0, r4
	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8002d2c:	6026      	str	r6, [r4, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8002d2e:	80a5      	strh	r5, [r4, #4]
	OneWire_BusOutputDirection(onewire);
 8002d30:	f7ff fed6 	bl	8002ae0 <OneWire_BusOutputDirection>
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	88a2      	ldrh	r2, [r4, #4]
 8002d38:	619a      	str	r2, [r3, #24]
	OneWire_OutputHigh(onewire);
	HAL_Delay(100);
 8002d3a:	2064      	movs	r0, #100	; 0x64
 8002d3c:	f7fd ff80 	bl	8000c40 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8002d40:	4620      	mov	r0, r4
 8002d42:	f7ff fede 	bl	8002b02 <OneWire_OutputLow>
	HAL_Delay(100);
 8002d46:	2064      	movs	r0, #100	; 0x64
 8002d48:	f7fd ff7a 	bl	8000c40 <HAL_Delay>
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	88a2      	ldrh	r2, [r4, #4]
 8002d50:	619a      	str	r2, [r3, #24]
	OneWire_OutputHigh(onewire);
	HAL_Delay(200);
 8002d52:	20c8      	movs	r0, #200	; 0xc8
}
 8002d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(200);
 8002d58:	f7fd bf72 	b.w	8000c40 <HAL_Delay>
 8002d5c:	20000234 	.word	0x20000234

08002d60 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <HAL_MspInit+0x34>)
{
 8002d62:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	619a      	str	r2, [r3, #24]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	f002 0201 	and.w	r2, r2, #1
 8002d72:	9200      	str	r2, [sp, #0]
 8002d74:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d76:	69da      	ldr	r2, [r3, #28]
 8002d78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d7c:	61da      	str	r2, [r3, #28]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d84:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d86:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d88:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d8a:	f7fd ff6d 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d8e:	b003      	add	sp, #12
 8002d90:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d94:	40021000 	.word	0x40021000

08002d98 <NMI_Handler>:
 8002d98:	4770      	bx	lr

08002d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d9a:	e7fe      	b.n	8002d9a <HardFault_Handler>

08002d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d9c:	e7fe      	b.n	8002d9c <MemManage_Handler>

08002d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d9e:	e7fe      	b.n	8002d9e <BusFault_Handler>

08002da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002da0:	e7fe      	b.n	8002da0 <UsageFault_Handler>

08002da2 <SVC_Handler>:
 8002da2:	4770      	bx	lr

08002da4 <DebugMon_Handler>:
 8002da4:	4770      	bx	lr

08002da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002da6:	4770      	bx	lr

08002da8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002da8:	f7fd bf38 	b.w	8000c1c <HAL_IncTick>

08002dac <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002dac:	4801      	ldr	r0, [pc, #4]	; (8002db4 <DMA1_Channel4_IRQHandler+0x8>)
 8002dae:	f7fe b86d 	b.w	8000e8c <HAL_DMA_IRQHandler>
 8002db2:	bf00      	nop
 8002db4:	200002b4 	.word	0x200002b4

08002db8 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002db8:	4801      	ldr	r0, [pc, #4]	; (8002dc0 <DMA1_Channel5_IRQHandler+0x8>)
 8002dba:	f7fe b867 	b.w	8000e8c <HAL_DMA_IRQHandler>
 8002dbe:	bf00      	nop
 8002dc0:	200002f8 	.word	0x200002f8

08002dc4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dc4:	4801      	ldr	r0, [pc, #4]	; (8002dcc <TIM2_IRQHandler+0x8>)
 8002dc6:	f7fe be71 	b.w	8001aac <HAL_TIM_IRQHandler>
 8002dca:	bf00      	nop
 8002dcc:	20000274 	.word	0x20000274

08002dd0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dd0:	4801      	ldr	r0, [pc, #4]	; (8002dd8 <USART1_IRQHandler+0x8>)
 8002dd2:	f7ff bb8b 	b.w	80024ec <HAL_UART_IRQHandler>
 8002dd6:	bf00      	nop
 8002dd8:	2000033c 	.word	0x2000033c

08002ddc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002ddc:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <_sbrk+0x2c>)
 8002de0:	6819      	ldr	r1, [r3, #0]
{
 8002de2:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002de4:	b909      	cbnz	r1, 8002dea <_sbrk+0xe>
		heap_end = &end;
 8002de6:	4909      	ldr	r1, [pc, #36]	; (8002e0c <_sbrk+0x30>)
 8002de8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002dea:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002dec:	4669      	mov	r1, sp
 8002dee:	4402      	add	r2, r0
 8002df0:	428a      	cmp	r2, r1
 8002df2:	d906      	bls.n	8002e02 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002df4:	f000 f9d8 	bl	80031a8 <__errno>
 8002df8:	230c      	movs	r3, #12
 8002dfa:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002e02:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002e04:	bd08      	pop	{r3, pc}
 8002e06:	bf00      	nop
 8002e08:	200001fc 	.word	0x200001fc
 8002e0c:	20000420 	.word	0x20000420

08002e10 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e10:	4915      	ldr	r1, [pc, #84]	; (8002e68 <SystemInit+0x58>)
 8002e12:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002e16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002e1e:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <SystemInit+0x5c>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002e28:	6858      	ldr	r0, [r3, #4]
 8002e2a:	4a11      	ldr	r2, [pc, #68]	; (8002e70 <SystemInit+0x60>)
 8002e2c:	4002      	ands	r2, r0
 8002e2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002e36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e42:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002e4a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4e:	f022 020f 	bic.w	r2, r2, #15
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002e54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e56:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <SystemInit+0x64>)
 8002e58:	4002      	ands	r2, r0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e64:	608b      	str	r3, [r1, #8]
 8002e66:	4770      	bx	lr
 8002e68:	e000ed00 	.word	0xe000ed00
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	f87fc00c 	.word	0xf87fc00c
 8002e74:	ff00fccc 	.word	0xff00fccc

08002e78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e78:	b500      	push	{lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e7a:	2210      	movs	r2, #16
{
 8002e7c:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e7e:	2100      	movs	r1, #0
 8002e80:	eb0d 0002 	add.w	r0, sp, r2
 8002e84:	f000 f9ba 	bl	80031fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim1.Instance = TIM1;
 8002e88:	4816      	ldr	r0, [pc, #88]	; (8002ee4 <MX_TIM1_Init+0x6c>)
  htim1.Init.Prescaler = 71;
 8002e8a:	4917      	ldr	r1, [pc, #92]	; (8002ee8 <MX_TIM1_Init+0x70>)
 8002e8c:	2247      	movs	r2, #71	; 0x47
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e8e:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 71;
 8002e90:	e880 0006 	stmia.w	r0, {r1, r2}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xFFFF;
 8002e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	9302      	str	r3, [sp, #8]
 8002e9c:	9303      	str	r3, [sp, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e9e:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0xFFFF;
 8002ea0:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ea2:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ea4:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ea8:	f7fe ff1a 	bl	8001ce0 <HAL_TIM_Base_Init>
 8002eac:	b108      	cbz	r0, 8002eb2 <MX_TIM1_Init+0x3a>
  {
    Error_Handler();
 8002eae:	f7ff fdfb 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002eb6:	a904      	add	r1, sp, #16
 8002eb8:	480a      	ldr	r0, [pc, #40]	; (8002ee4 <MX_TIM1_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eba:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ebc:	f7fe ff34 	bl	8001d28 <HAL_TIM_ConfigClockSource>
 8002ec0:	b108      	cbz	r0, 8002ec6 <MX_TIM1_Init+0x4e>
  {
    Error_Handler();
 8002ec2:	f7ff fdf1 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec6:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ec8:	a901      	add	r1, sp, #4
 8002eca:	4806      	ldr	r0, [pc, #24]	; (8002ee4 <MX_TIM1_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ecc:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ece:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ed2:	f7fe ffdf 	bl	8001e94 <HAL_TIMEx_MasterConfigSynchronization>
 8002ed6:	b108      	cbz	r0, 8002edc <MX_TIM1_Init+0x64>
  {
    Error_Handler();
 8002ed8:	f7ff fde6 	bl	8002aa8 <Error_Handler>
  }

}
 8002edc:	b009      	add	sp, #36	; 0x24
 8002ede:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ee2:	bf00      	nop
 8002ee4:	20000234 	.word	0x20000234
 8002ee8:	40012c00 	.word	0x40012c00

08002eec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002eec:	b500      	push	{lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eee:	2210      	movs	r2, #16
{
 8002ef0:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	eb0d 0002 	add.w	r0, sp, r2
 8002ef8:	f000 f980 	bl	80031fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
 8002efc:	4816      	ldr	r0, [pc, #88]	; (8002f58 <MX_TIM2_Init+0x6c>)
  htim2.Init.Prescaler = 7199;
 8002efe:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002f02:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f06:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 7199;
 8002f08:	e880 0006 	stmia.w	r0, {r1, r2}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 49999;
 8002f0c:	f24c 324f 	movw	r2, #49999	; 0xc34f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	9302      	str	r3, [sp, #8]
 8002f14:	9303      	str	r3, [sp, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f16:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 49999;
 8002f18:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f1a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f1e:	f7fe fedf 	bl	8001ce0 <HAL_TIM_Base_Init>
 8002f22:	b108      	cbz	r0, 8002f28 <MX_TIM2_Init+0x3c>
  {
    Error_Handler();
 8002f24:	f7ff fdc0 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f2c:	a904      	add	r1, sp, #16
 8002f2e:	480a      	ldr	r0, [pc, #40]	; (8002f58 <MX_TIM2_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f30:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f32:	f7fe fef9 	bl	8001d28 <HAL_TIM_ConfigClockSource>
 8002f36:	b108      	cbz	r0, 8002f3c <MX_TIM2_Init+0x50>
  {
    Error_Handler();
 8002f38:	f7ff fdb6 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f3c:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f3e:	a901      	add	r1, sp, #4
 8002f40:	4805      	ldr	r0, [pc, #20]	; (8002f58 <MX_TIM2_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f42:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f44:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f46:	f7fe ffa5 	bl	8001e94 <HAL_TIMEx_MasterConfigSynchronization>
 8002f4a:	b108      	cbz	r0, 8002f50 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002f4c:	f7ff fdac 	bl	8002aa8 <Error_Handler>
  }

}
 8002f50:	b009      	add	sp, #36	; 0x24
 8002f52:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f56:	bf00      	nop
 8002f58:	20000274 	.word	0x20000274

08002f5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f5c:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM1)
 8002f5e:	6803      	ldr	r3, [r0, #0]
 8002f60:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <HAL_TIM_Base_MspInit+0x54>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d10c      	bne.n	8002f80 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <HAL_TIM_Base_MspInit+0x58>)
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6e:	619a      	str	r2, [r3, #24]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002f7a:	b003      	add	sp, #12
 8002f7c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM2)
 8002f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f84:	d1f9      	bne.n	8002f7a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f86:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f8a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	61da      	str	r2, [r3, #28]
 8002f94:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f96:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f9e:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fa0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fa2:	f7fd fe73 	bl	8000c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fa6:	201c      	movs	r0, #28
 8002fa8:	f7fd fea4 	bl	8000cf4 <HAL_NVIC_EnableIRQ>
}
 8002fac:	e7e5      	b.n	8002f7a <HAL_TIM_Base_MspInit+0x1e>
 8002fae:	bf00      	nop
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40021000 	.word	0x40021000

08002fb8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fb8:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8002fba:	480c      	ldr	r0, [pc, #48]	; (8002fec <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 9600;
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <MX_USART1_UART_Init+0x38>)
 8002fbe:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 8002fc2:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fc6:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fcc:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fce:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fd0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fd6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fd8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fda:	f7ff f9e4 	bl	80023a6 <HAL_UART_Init>
 8002fde:	b118      	cbz	r0, 8002fe8 <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8002fe0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002fe4:	f7ff bd60 	b.w	8002aa8 <Error_Handler>
 8002fe8:	bd08      	pop	{r3, pc}
 8002fea:	bf00      	nop
 8002fec:	2000033c 	.word	0x2000033c
 8002ff0:	40013800 	.word	0x40013800

08002ff4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ff4:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8002ff6:	480c      	ldr	r0, [pc, #48]	; (8003028 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 9600;
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <MX_USART2_UART_Init+0x38>)
 8002ffa:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 8002ffe:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003002:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003004:	2300      	movs	r3, #0
 8003006:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003008:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800300a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800300c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800300e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003010:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003012:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003014:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003016:	f7ff f9c6 	bl	80023a6 <HAL_UART_Init>
 800301a:	b118      	cbz	r0, 8003024 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 800301c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003020:	f7ff bd42 	b.w	8002aa8 <Error_Handler>
 8003024:	bd08      	pop	{r3, pc}
 8003026:	bf00      	nop
 8003028:	200003ac 	.word	0x200003ac
 800302c:	40004400 	.word	0x40004400

08003030 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003030:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003032:	2214      	movs	r2, #20
{
 8003034:	b08b      	sub	sp, #44	; 0x2c
 8003036:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	2100      	movs	r1, #0
 800303a:	eb0d 0002 	add.w	r0, sp, r2
 800303e:	f000 f8dd 	bl	80031fc <memset>
  if(uartHandle->Instance==USART1)
 8003042:	682b      	ldr	r3, [r5, #0]
 8003044:	4a3b      	ldr	r2, [pc, #236]	; (8003134 <HAL_UART_MspInit+0x104>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d151      	bne.n	80030ee <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800304a:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <HAL_UART_MspInit+0x108>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800304c:	4c3b      	ldr	r4, [pc, #236]	; (800313c <HAL_UART_MspInit+0x10c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800304e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003050:	483b      	ldr	r0, [pc, #236]	; (8003140 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003056:	619a      	str	r2, [r3, #24]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800305e:	9201      	str	r2, [sp, #4]
 8003060:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003068:	615a      	str	r2, [r3, #20]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003070:	9302      	str	r3, [sp, #8]
 8003072:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003074:	2330      	movs	r3, #48	; 0x30
 8003076:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003078:	2302      	movs	r3, #2
 800307a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800307c:	2303      	movs	r3, #3
 800307e:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003080:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003082:	2307      	movs	r3, #7
 8003084:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003086:	f7fd ff49 	bl	8000f1c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800308a:	4b2e      	ldr	r3, [pc, #184]	; (8003144 <HAL_UART_MspInit+0x114>)
 800308c:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800308e:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003090:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003092:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003094:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003096:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003098:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800309a:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800309c:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800309e:	61a3      	str	r3, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030a0:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80030a2:	f7fd fe6b 	bl	8000d7c <HAL_DMA_Init>
 80030a6:	b108      	cbz	r0, 80030ac <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 80030a8:	f7ff fcfe 	bl	8002aa8 <Error_Handler>

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030ac:	4a26      	ldr	r2, [pc, #152]	; (8003148 <HAL_UART_MspInit+0x118>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80030ae:	666c      	str	r4, [r5, #100]	; 0x64
 80030b0:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80030b2:	4c26      	ldr	r4, [pc, #152]	; (800314c <HAL_UART_MspInit+0x11c>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030b4:	2310      	movs	r3, #16
 80030b6:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80030ba:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030bc:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030be:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c0:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030c2:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030c4:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030c6:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80030c8:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030ca:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80030cc:	f7fd fe56 	bl	8000d7c <HAL_DMA_Init>
 80030d0:	b108      	cbz	r0, 80030d6 <HAL_UART_MspInit+0xa6>
    {
      Error_Handler();
 80030d2:	f7ff fce9 	bl	8002aa8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80030da:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030dc:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80030de:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030e0:	f7fd fdd4 	bl	8000c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030e4:	2025      	movs	r0, #37	; 0x25
 80030e6:	f7fd fe05 	bl	8000cf4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80030ea:	b00b      	add	sp, #44	; 0x2c
 80030ec:	bd30      	pop	{r4, r5, pc}
  else if(uartHandle->Instance==USART2)
 80030ee:	4a18      	ldr	r2, [pc, #96]	; (8003150 <HAL_UART_MspInit+0x120>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d1fa      	bne.n	80030ea <HAL_UART_MspInit+0xba>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030f4:	4b10      	ldr	r3, [pc, #64]	; (8003138 <HAL_UART_MspInit+0x108>)
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80030fc:	61da      	str	r2, [r3, #28]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003104:	9203      	str	r2, [sp, #12]
 8003106:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800310e:	615a      	str	r2, [r3, #20]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	9304      	str	r3, [sp, #16]
 8003118:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800311a:	230c      	movs	r3, #12
 800311c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311e:	2302      	movs	r3, #2
 8003120:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003122:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003124:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800312a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312c:	f7fd fef6 	bl	8000f1c <HAL_GPIO_Init>
}
 8003130:	e7db      	b.n	80030ea <HAL_UART_MspInit+0xba>
 8003132:	bf00      	nop
 8003134:	40013800 	.word	0x40013800
 8003138:	40021000 	.word	0x40021000
 800313c:	200002f8 	.word	0x200002f8
 8003140:	48000800 	.word	0x48000800
 8003144:	40020058 	.word	0x40020058
 8003148:	40020044 	.word	0x40020044
 800314c:	200002b4 	.word	0x200002b4
 8003150:	40004400 	.word	0x40004400

08003154 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800318c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003158:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800315a:	e003      	b.n	8003164 <LoopCopyDataInit>

0800315c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800315e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003160:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003162:	3104      	adds	r1, #4

08003164 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003164:	480b      	ldr	r0, [pc, #44]	; (8003194 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003168:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800316a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800316c:	d3f6      	bcc.n	800315c <CopyDataInit>
	ldr	r2, =_sbss
 800316e:	4a0b      	ldr	r2, [pc, #44]	; (800319c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003170:	e002      	b.n	8003178 <LoopFillZerobss>

08003172 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003172:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003174:	f842 3b04 	str.w	r3, [r2], #4

08003178 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <LoopForever+0x16>)
	cmp	r2, r3
 800317a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800317c:	d3f9      	bcc.n	8003172 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800317e:	f7ff fe47 	bl	8002e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003182:	f000 f817 	bl	80031b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003186:	f7ff fc75 	bl	8002a74 <main>

0800318a <LoopForever>:

LoopForever:
    b LoopForever
 800318a:	e7fe      	b.n	800318a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800318c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003190:	08005590 	.word	0x08005590
	ldr	r0, =_sdata
 8003194:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003198:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 800319c:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80031a0:	20000420 	.word	0x20000420

080031a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031a4:	e7fe      	b.n	80031a4 <ADC1_2_IRQHandler>
	...

080031a8 <__errno>:
 80031a8:	4b01      	ldr	r3, [pc, #4]	; (80031b0 <__errno+0x8>)
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	2000000c 	.word	0x2000000c

080031b4 <__libc_init_array>:
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	4e0d      	ldr	r6, [pc, #52]	; (80031ec <__libc_init_array+0x38>)
 80031b8:	4c0d      	ldr	r4, [pc, #52]	; (80031f0 <__libc_init_array+0x3c>)
 80031ba:	1ba4      	subs	r4, r4, r6
 80031bc:	10a4      	asrs	r4, r4, #2
 80031be:	2500      	movs	r5, #0
 80031c0:	42a5      	cmp	r5, r4
 80031c2:	d109      	bne.n	80031d8 <__libc_init_array+0x24>
 80031c4:	4e0b      	ldr	r6, [pc, #44]	; (80031f4 <__libc_init_array+0x40>)
 80031c6:	4c0c      	ldr	r4, [pc, #48]	; (80031f8 <__libc_init_array+0x44>)
 80031c8:	f002 f882 	bl	80052d0 <_init>
 80031cc:	1ba4      	subs	r4, r4, r6
 80031ce:	10a4      	asrs	r4, r4, #2
 80031d0:	2500      	movs	r5, #0
 80031d2:	42a5      	cmp	r5, r4
 80031d4:	d105      	bne.n	80031e2 <__libc_init_array+0x2e>
 80031d6:	bd70      	pop	{r4, r5, r6, pc}
 80031d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031dc:	4798      	blx	r3
 80031de:	3501      	adds	r5, #1
 80031e0:	e7ee      	b.n	80031c0 <__libc_init_array+0xc>
 80031e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031e6:	4798      	blx	r3
 80031e8:	3501      	adds	r5, #1
 80031ea:	e7f2      	b.n	80031d2 <__libc_init_array+0x1e>
 80031ec:	08005588 	.word	0x08005588
 80031f0:	08005588 	.word	0x08005588
 80031f4:	08005588 	.word	0x08005588
 80031f8:	0800558c 	.word	0x0800558c

080031fc <memset>:
 80031fc:	4402      	add	r2, r0
 80031fe:	4603      	mov	r3, r0
 8003200:	4293      	cmp	r3, r2
 8003202:	d100      	bne.n	8003206 <memset+0xa>
 8003204:	4770      	bx	lr
 8003206:	f803 1b01 	strb.w	r1, [r3], #1
 800320a:	e7f9      	b.n	8003200 <memset+0x4>

0800320c <__cvt>:
 800320c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003210:	ec55 4b10 	vmov	r4, r5, d0
 8003214:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003216:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800321a:	2d00      	cmp	r5, #0
 800321c:	460e      	mov	r6, r1
 800321e:	4691      	mov	r9, r2
 8003220:	4619      	mov	r1, r3
 8003222:	bfb8      	it	lt
 8003224:	4622      	movlt	r2, r4
 8003226:	462b      	mov	r3, r5
 8003228:	f027 0720 	bic.w	r7, r7, #32
 800322c:	bfbb      	ittet	lt
 800322e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003232:	461d      	movlt	r5, r3
 8003234:	2300      	movge	r3, #0
 8003236:	232d      	movlt	r3, #45	; 0x2d
 8003238:	bfb8      	it	lt
 800323a:	4614      	movlt	r4, r2
 800323c:	2f46      	cmp	r7, #70	; 0x46
 800323e:	700b      	strb	r3, [r1, #0]
 8003240:	d004      	beq.n	800324c <__cvt+0x40>
 8003242:	2f45      	cmp	r7, #69	; 0x45
 8003244:	d100      	bne.n	8003248 <__cvt+0x3c>
 8003246:	3601      	adds	r6, #1
 8003248:	2102      	movs	r1, #2
 800324a:	e000      	b.n	800324e <__cvt+0x42>
 800324c:	2103      	movs	r1, #3
 800324e:	ab03      	add	r3, sp, #12
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	ab02      	add	r3, sp, #8
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	4632      	mov	r2, r6
 8003258:	4653      	mov	r3, sl
 800325a:	ec45 4b10 	vmov	d0, r4, r5
 800325e:	f000 fcf3 	bl	8003c48 <_dtoa_r>
 8003262:	2f47      	cmp	r7, #71	; 0x47
 8003264:	4680      	mov	r8, r0
 8003266:	d102      	bne.n	800326e <__cvt+0x62>
 8003268:	f019 0f01 	tst.w	r9, #1
 800326c:	d026      	beq.n	80032bc <__cvt+0xb0>
 800326e:	2f46      	cmp	r7, #70	; 0x46
 8003270:	eb08 0906 	add.w	r9, r8, r6
 8003274:	d111      	bne.n	800329a <__cvt+0x8e>
 8003276:	f898 3000 	ldrb.w	r3, [r8]
 800327a:	2b30      	cmp	r3, #48	; 0x30
 800327c:	d10a      	bne.n	8003294 <__cvt+0x88>
 800327e:	2200      	movs	r2, #0
 8003280:	2300      	movs	r3, #0
 8003282:	4620      	mov	r0, r4
 8003284:	4629      	mov	r1, r5
 8003286:	f7fd fc23 	bl	8000ad0 <__aeabi_dcmpeq>
 800328a:	b918      	cbnz	r0, 8003294 <__cvt+0x88>
 800328c:	f1c6 0601 	rsb	r6, r6, #1
 8003290:	f8ca 6000 	str.w	r6, [sl]
 8003294:	f8da 3000 	ldr.w	r3, [sl]
 8003298:	4499      	add	r9, r3
 800329a:	2200      	movs	r2, #0
 800329c:	2300      	movs	r3, #0
 800329e:	4620      	mov	r0, r4
 80032a0:	4629      	mov	r1, r5
 80032a2:	f7fd fc15 	bl	8000ad0 <__aeabi_dcmpeq>
 80032a6:	b938      	cbnz	r0, 80032b8 <__cvt+0xac>
 80032a8:	2230      	movs	r2, #48	; 0x30
 80032aa:	9b03      	ldr	r3, [sp, #12]
 80032ac:	4599      	cmp	r9, r3
 80032ae:	d905      	bls.n	80032bc <__cvt+0xb0>
 80032b0:	1c59      	adds	r1, r3, #1
 80032b2:	9103      	str	r1, [sp, #12]
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e7f8      	b.n	80032aa <__cvt+0x9e>
 80032b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80032bc:	9b03      	ldr	r3, [sp, #12]
 80032be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032c0:	eba3 0308 	sub.w	r3, r3, r8
 80032c4:	4640      	mov	r0, r8
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	b004      	add	sp, #16
 80032ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080032ce <__exponent>:
 80032ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032d0:	4603      	mov	r3, r0
 80032d2:	2900      	cmp	r1, #0
 80032d4:	bfb8      	it	lt
 80032d6:	4249      	neglt	r1, r1
 80032d8:	f803 2b02 	strb.w	r2, [r3], #2
 80032dc:	bfb4      	ite	lt
 80032de:	222d      	movlt	r2, #45	; 0x2d
 80032e0:	222b      	movge	r2, #43	; 0x2b
 80032e2:	2909      	cmp	r1, #9
 80032e4:	7042      	strb	r2, [r0, #1]
 80032e6:	dd20      	ble.n	800332a <__exponent+0x5c>
 80032e8:	f10d 0207 	add.w	r2, sp, #7
 80032ec:	4617      	mov	r7, r2
 80032ee:	260a      	movs	r6, #10
 80032f0:	fb91 f5f6 	sdiv	r5, r1, r6
 80032f4:	fb06 1115 	mls	r1, r6, r5, r1
 80032f8:	3130      	adds	r1, #48	; 0x30
 80032fa:	2d09      	cmp	r5, #9
 80032fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003300:	f102 34ff 	add.w	r4, r2, #4294967295
 8003304:	4629      	mov	r1, r5
 8003306:	dc09      	bgt.n	800331c <__exponent+0x4e>
 8003308:	3130      	adds	r1, #48	; 0x30
 800330a:	3a02      	subs	r2, #2
 800330c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003310:	42ba      	cmp	r2, r7
 8003312:	461c      	mov	r4, r3
 8003314:	d304      	bcc.n	8003320 <__exponent+0x52>
 8003316:	1a20      	subs	r0, r4, r0
 8003318:	b003      	add	sp, #12
 800331a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800331c:	4622      	mov	r2, r4
 800331e:	e7e7      	b.n	80032f0 <__exponent+0x22>
 8003320:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003324:	f803 1b01 	strb.w	r1, [r3], #1
 8003328:	e7f2      	b.n	8003310 <__exponent+0x42>
 800332a:	2230      	movs	r2, #48	; 0x30
 800332c:	461c      	mov	r4, r3
 800332e:	4411      	add	r1, r2
 8003330:	f804 2b02 	strb.w	r2, [r4], #2
 8003334:	7059      	strb	r1, [r3, #1]
 8003336:	e7ee      	b.n	8003316 <__exponent+0x48>

08003338 <_printf_float>:
 8003338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333c:	b08d      	sub	sp, #52	; 0x34
 800333e:	460c      	mov	r4, r1
 8003340:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003344:	4616      	mov	r6, r2
 8003346:	461f      	mov	r7, r3
 8003348:	4605      	mov	r5, r0
 800334a:	f001 fa4b 	bl	80047e4 <_localeconv_r>
 800334e:	6803      	ldr	r3, [r0, #0]
 8003350:	9304      	str	r3, [sp, #16]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fc ff44 	bl	80001e0 <strlen>
 8003358:	2300      	movs	r3, #0
 800335a:	930a      	str	r3, [sp, #40]	; 0x28
 800335c:	f8d8 3000 	ldr.w	r3, [r8]
 8003360:	9005      	str	r0, [sp, #20]
 8003362:	3307      	adds	r3, #7
 8003364:	f023 0307 	bic.w	r3, r3, #7
 8003368:	f103 0208 	add.w	r2, r3, #8
 800336c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003370:	f8d4 b000 	ldr.w	fp, [r4]
 8003374:	f8c8 2000 	str.w	r2, [r8]
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003380:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003384:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003388:	9307      	str	r3, [sp, #28]
 800338a:	f8cd 8018 	str.w	r8, [sp, #24]
 800338e:	f04f 32ff 	mov.w	r2, #4294967295
 8003392:	4ba5      	ldr	r3, [pc, #660]	; (8003628 <_printf_float+0x2f0>)
 8003394:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003398:	f7fd fbcc 	bl	8000b34 <__aeabi_dcmpun>
 800339c:	2800      	cmp	r0, #0
 800339e:	f040 81fb 	bne.w	8003798 <_printf_float+0x460>
 80033a2:	f04f 32ff 	mov.w	r2, #4294967295
 80033a6:	4ba0      	ldr	r3, [pc, #640]	; (8003628 <_printf_float+0x2f0>)
 80033a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033ac:	f7fd fba4 	bl	8000af8 <__aeabi_dcmple>
 80033b0:	2800      	cmp	r0, #0
 80033b2:	f040 81f1 	bne.w	8003798 <_printf_float+0x460>
 80033b6:	2200      	movs	r2, #0
 80033b8:	2300      	movs	r3, #0
 80033ba:	4640      	mov	r0, r8
 80033bc:	4649      	mov	r1, r9
 80033be:	f7fd fb91 	bl	8000ae4 <__aeabi_dcmplt>
 80033c2:	b110      	cbz	r0, 80033ca <_printf_float+0x92>
 80033c4:	232d      	movs	r3, #45	; 0x2d
 80033c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ca:	4b98      	ldr	r3, [pc, #608]	; (800362c <_printf_float+0x2f4>)
 80033cc:	4a98      	ldr	r2, [pc, #608]	; (8003630 <_printf_float+0x2f8>)
 80033ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80033d2:	bf8c      	ite	hi
 80033d4:	4690      	movhi	r8, r2
 80033d6:	4698      	movls	r8, r3
 80033d8:	2303      	movs	r3, #3
 80033da:	f02b 0204 	bic.w	r2, fp, #4
 80033de:	6123      	str	r3, [r4, #16]
 80033e0:	6022      	str	r2, [r4, #0]
 80033e2:	f04f 0900 	mov.w	r9, #0
 80033e6:	9700      	str	r7, [sp, #0]
 80033e8:	4633      	mov	r3, r6
 80033ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80033ec:	4621      	mov	r1, r4
 80033ee:	4628      	mov	r0, r5
 80033f0:	f000 f9e2 	bl	80037b8 <_printf_common>
 80033f4:	3001      	adds	r0, #1
 80033f6:	f040 8093 	bne.w	8003520 <_printf_float+0x1e8>
 80033fa:	f04f 30ff 	mov.w	r0, #4294967295
 80033fe:	b00d      	add	sp, #52	; 0x34
 8003400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003404:	6861      	ldr	r1, [r4, #4]
 8003406:	1c4b      	adds	r3, r1, #1
 8003408:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800340c:	d13f      	bne.n	800348e <_printf_float+0x156>
 800340e:	2306      	movs	r3, #6
 8003410:	6063      	str	r3, [r4, #4]
 8003412:	2300      	movs	r3, #0
 8003414:	9303      	str	r3, [sp, #12]
 8003416:	ab0a      	add	r3, sp, #40	; 0x28
 8003418:	9302      	str	r3, [sp, #8]
 800341a:	ab09      	add	r3, sp, #36	; 0x24
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	ec49 8b10 	vmov	d0, r8, r9
 8003422:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003426:	6022      	str	r2, [r4, #0]
 8003428:	f8cd a004 	str.w	sl, [sp, #4]
 800342c:	6861      	ldr	r1, [r4, #4]
 800342e:	4628      	mov	r0, r5
 8003430:	f7ff feec 	bl	800320c <__cvt>
 8003434:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003438:	2b47      	cmp	r3, #71	; 0x47
 800343a:	4680      	mov	r8, r0
 800343c:	d109      	bne.n	8003452 <_printf_float+0x11a>
 800343e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003440:	1cd8      	adds	r0, r3, #3
 8003442:	db02      	blt.n	800344a <_printf_float+0x112>
 8003444:	6862      	ldr	r2, [r4, #4]
 8003446:	4293      	cmp	r3, r2
 8003448:	dd57      	ble.n	80034fa <_printf_float+0x1c2>
 800344a:	f1aa 0a02 	sub.w	sl, sl, #2
 800344e:	fa5f fa8a 	uxtb.w	sl, sl
 8003452:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003456:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003458:	d834      	bhi.n	80034c4 <_printf_float+0x18c>
 800345a:	3901      	subs	r1, #1
 800345c:	4652      	mov	r2, sl
 800345e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003462:	9109      	str	r1, [sp, #36]	; 0x24
 8003464:	f7ff ff33 	bl	80032ce <__exponent>
 8003468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800346a:	1883      	adds	r3, r0, r2
 800346c:	2a01      	cmp	r2, #1
 800346e:	4681      	mov	r9, r0
 8003470:	6123      	str	r3, [r4, #16]
 8003472:	dc02      	bgt.n	800347a <_printf_float+0x142>
 8003474:	6822      	ldr	r2, [r4, #0]
 8003476:	07d1      	lsls	r1, r2, #31
 8003478:	d501      	bpl.n	800347e <_printf_float+0x146>
 800347a:	3301      	adds	r3, #1
 800347c:	6123      	str	r3, [r4, #16]
 800347e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0af      	beq.n	80033e6 <_printf_float+0xae>
 8003486:	232d      	movs	r3, #45	; 0x2d
 8003488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800348c:	e7ab      	b.n	80033e6 <_printf_float+0xae>
 800348e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003492:	d002      	beq.n	800349a <_printf_float+0x162>
 8003494:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003498:	d1bb      	bne.n	8003412 <_printf_float+0xda>
 800349a:	b189      	cbz	r1, 80034c0 <_printf_float+0x188>
 800349c:	2300      	movs	r3, #0
 800349e:	9303      	str	r3, [sp, #12]
 80034a0:	ab0a      	add	r3, sp, #40	; 0x28
 80034a2:	9302      	str	r3, [sp, #8]
 80034a4:	ab09      	add	r3, sp, #36	; 0x24
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	ec49 8b10 	vmov	d0, r8, r9
 80034ac:	6022      	str	r2, [r4, #0]
 80034ae:	f8cd a004 	str.w	sl, [sp, #4]
 80034b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80034b6:	4628      	mov	r0, r5
 80034b8:	f7ff fea8 	bl	800320c <__cvt>
 80034bc:	4680      	mov	r8, r0
 80034be:	e7be      	b.n	800343e <_printf_float+0x106>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e7a5      	b.n	8003410 <_printf_float+0xd8>
 80034c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80034c8:	d119      	bne.n	80034fe <_printf_float+0x1c6>
 80034ca:	2900      	cmp	r1, #0
 80034cc:	6863      	ldr	r3, [r4, #4]
 80034ce:	dd0c      	ble.n	80034ea <_printf_float+0x1b2>
 80034d0:	6121      	str	r1, [r4, #16]
 80034d2:	b913      	cbnz	r3, 80034da <_printf_float+0x1a2>
 80034d4:	6822      	ldr	r2, [r4, #0]
 80034d6:	07d2      	lsls	r2, r2, #31
 80034d8:	d502      	bpl.n	80034e0 <_printf_float+0x1a8>
 80034da:	3301      	adds	r3, #1
 80034dc:	440b      	add	r3, r1
 80034de:	6123      	str	r3, [r4, #16]
 80034e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80034e4:	f04f 0900 	mov.w	r9, #0
 80034e8:	e7c9      	b.n	800347e <_printf_float+0x146>
 80034ea:	b913      	cbnz	r3, 80034f2 <_printf_float+0x1ba>
 80034ec:	6822      	ldr	r2, [r4, #0]
 80034ee:	07d0      	lsls	r0, r2, #31
 80034f0:	d501      	bpl.n	80034f6 <_printf_float+0x1be>
 80034f2:	3302      	adds	r3, #2
 80034f4:	e7f3      	b.n	80034de <_printf_float+0x1a6>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e7f1      	b.n	80034de <_printf_float+0x1a6>
 80034fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80034fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003502:	4293      	cmp	r3, r2
 8003504:	db05      	blt.n	8003512 <_printf_float+0x1da>
 8003506:	6822      	ldr	r2, [r4, #0]
 8003508:	6123      	str	r3, [r4, #16]
 800350a:	07d1      	lsls	r1, r2, #31
 800350c:	d5e8      	bpl.n	80034e0 <_printf_float+0x1a8>
 800350e:	3301      	adds	r3, #1
 8003510:	e7e5      	b.n	80034de <_printf_float+0x1a6>
 8003512:	2b00      	cmp	r3, #0
 8003514:	bfd4      	ite	le
 8003516:	f1c3 0302 	rsble	r3, r3, #2
 800351a:	2301      	movgt	r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	e7de      	b.n	80034de <_printf_float+0x1a6>
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	055a      	lsls	r2, r3, #21
 8003524:	d407      	bmi.n	8003536 <_printf_float+0x1fe>
 8003526:	6923      	ldr	r3, [r4, #16]
 8003528:	4642      	mov	r2, r8
 800352a:	4631      	mov	r1, r6
 800352c:	4628      	mov	r0, r5
 800352e:	47b8      	blx	r7
 8003530:	3001      	adds	r0, #1
 8003532:	d12b      	bne.n	800358c <_printf_float+0x254>
 8003534:	e761      	b.n	80033fa <_printf_float+0xc2>
 8003536:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800353a:	f240 80e2 	bls.w	8003702 <_printf_float+0x3ca>
 800353e:	2200      	movs	r2, #0
 8003540:	2300      	movs	r3, #0
 8003542:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003546:	f7fd fac3 	bl	8000ad0 <__aeabi_dcmpeq>
 800354a:	2800      	cmp	r0, #0
 800354c:	d03c      	beq.n	80035c8 <_printf_float+0x290>
 800354e:	2301      	movs	r3, #1
 8003550:	4a38      	ldr	r2, [pc, #224]	; (8003634 <_printf_float+0x2fc>)
 8003552:	4631      	mov	r1, r6
 8003554:	4628      	mov	r0, r5
 8003556:	47b8      	blx	r7
 8003558:	3001      	adds	r0, #1
 800355a:	f43f af4e 	beq.w	80033fa <_printf_float+0xc2>
 800355e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003562:	429a      	cmp	r2, r3
 8003564:	db02      	blt.n	800356c <_printf_float+0x234>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	07d8      	lsls	r0, r3, #31
 800356a:	d50f      	bpl.n	800358c <_printf_float+0x254>
 800356c:	9b05      	ldr	r3, [sp, #20]
 800356e:	9a04      	ldr	r2, [sp, #16]
 8003570:	4631      	mov	r1, r6
 8003572:	4628      	mov	r0, r5
 8003574:	47b8      	blx	r7
 8003576:	3001      	adds	r0, #1
 8003578:	f43f af3f 	beq.w	80033fa <_printf_float+0xc2>
 800357c:	f04f 0800 	mov.w	r8, #0
 8003580:	f104 091a 	add.w	r9, r4, #26
 8003584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003586:	3b01      	subs	r3, #1
 8003588:	4598      	cmp	r8, r3
 800358a:	db12      	blt.n	80035b2 <_printf_float+0x27a>
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	079b      	lsls	r3, r3, #30
 8003590:	d509      	bpl.n	80035a6 <_printf_float+0x26e>
 8003592:	f04f 0800 	mov.w	r8, #0
 8003596:	f104 0919 	add.w	r9, r4, #25
 800359a:	68e3      	ldr	r3, [r4, #12]
 800359c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	4598      	cmp	r8, r3
 80035a2:	f2c0 80ee 	blt.w	8003782 <_printf_float+0x44a>
 80035a6:	68e0      	ldr	r0, [r4, #12]
 80035a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035aa:	4298      	cmp	r0, r3
 80035ac:	bfb8      	it	lt
 80035ae:	4618      	movlt	r0, r3
 80035b0:	e725      	b.n	80033fe <_printf_float+0xc6>
 80035b2:	2301      	movs	r3, #1
 80035b4:	464a      	mov	r2, r9
 80035b6:	4631      	mov	r1, r6
 80035b8:	4628      	mov	r0, r5
 80035ba:	47b8      	blx	r7
 80035bc:	3001      	adds	r0, #1
 80035be:	f43f af1c 	beq.w	80033fa <_printf_float+0xc2>
 80035c2:	f108 0801 	add.w	r8, r8, #1
 80035c6:	e7dd      	b.n	8003584 <_printf_float+0x24c>
 80035c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	dc34      	bgt.n	8003638 <_printf_float+0x300>
 80035ce:	2301      	movs	r3, #1
 80035d0:	4a18      	ldr	r2, [pc, #96]	; (8003634 <_printf_float+0x2fc>)
 80035d2:	4631      	mov	r1, r6
 80035d4:	4628      	mov	r0, r5
 80035d6:	47b8      	blx	r7
 80035d8:	3001      	adds	r0, #1
 80035da:	f43f af0e 	beq.w	80033fa <_printf_float+0xc2>
 80035de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035e0:	b923      	cbnz	r3, 80035ec <_printf_float+0x2b4>
 80035e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035e4:	b913      	cbnz	r3, 80035ec <_printf_float+0x2b4>
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	07d9      	lsls	r1, r3, #31
 80035ea:	d5cf      	bpl.n	800358c <_printf_float+0x254>
 80035ec:	9b05      	ldr	r3, [sp, #20]
 80035ee:	9a04      	ldr	r2, [sp, #16]
 80035f0:	4631      	mov	r1, r6
 80035f2:	4628      	mov	r0, r5
 80035f4:	47b8      	blx	r7
 80035f6:	3001      	adds	r0, #1
 80035f8:	f43f aeff 	beq.w	80033fa <_printf_float+0xc2>
 80035fc:	f04f 0900 	mov.w	r9, #0
 8003600:	f104 0a1a 	add.w	sl, r4, #26
 8003604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003606:	425b      	negs	r3, r3
 8003608:	4599      	cmp	r9, r3
 800360a:	db01      	blt.n	8003610 <_printf_float+0x2d8>
 800360c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800360e:	e78b      	b.n	8003528 <_printf_float+0x1f0>
 8003610:	2301      	movs	r3, #1
 8003612:	4652      	mov	r2, sl
 8003614:	4631      	mov	r1, r6
 8003616:	4628      	mov	r0, r5
 8003618:	47b8      	blx	r7
 800361a:	3001      	adds	r0, #1
 800361c:	f43f aeed 	beq.w	80033fa <_printf_float+0xc2>
 8003620:	f109 0901 	add.w	r9, r9, #1
 8003624:	e7ee      	b.n	8003604 <_printf_float+0x2cc>
 8003626:	bf00      	nop
 8003628:	7fefffff 	.word	0x7fefffff
 800362c:	0800532b 	.word	0x0800532b
 8003630:	0800532f 	.word	0x0800532f
 8003634:	0800533b 	.word	0x0800533b
 8003638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800363a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800363c:	429a      	cmp	r2, r3
 800363e:	bfa8      	it	ge
 8003640:	461a      	movge	r2, r3
 8003642:	2a00      	cmp	r2, #0
 8003644:	4691      	mov	r9, r2
 8003646:	dc38      	bgt.n	80036ba <_printf_float+0x382>
 8003648:	f104 031a 	add.w	r3, r4, #26
 800364c:	f04f 0b00 	mov.w	fp, #0
 8003650:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003654:	9306      	str	r3, [sp, #24]
 8003656:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800365a:	ebaa 0309 	sub.w	r3, sl, r9
 800365e:	459b      	cmp	fp, r3
 8003660:	db33      	blt.n	80036ca <_printf_float+0x392>
 8003662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003666:	429a      	cmp	r2, r3
 8003668:	db3a      	blt.n	80036e0 <_printf_float+0x3a8>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	07da      	lsls	r2, r3, #31
 800366e:	d437      	bmi.n	80036e0 <_printf_float+0x3a8>
 8003670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003672:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003674:	eba3 020a 	sub.w	r2, r3, sl
 8003678:	eba3 0901 	sub.w	r9, r3, r1
 800367c:	4591      	cmp	r9, r2
 800367e:	bfa8      	it	ge
 8003680:	4691      	movge	r9, r2
 8003682:	f1b9 0f00 	cmp.w	r9, #0
 8003686:	dc33      	bgt.n	80036f0 <_printf_float+0x3b8>
 8003688:	f04f 0800 	mov.w	r8, #0
 800368c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003690:	f104 0a1a 	add.w	sl, r4, #26
 8003694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	eba3 0309 	sub.w	r3, r3, r9
 800369e:	4598      	cmp	r8, r3
 80036a0:	f6bf af74 	bge.w	800358c <_printf_float+0x254>
 80036a4:	2301      	movs	r3, #1
 80036a6:	4652      	mov	r2, sl
 80036a8:	4631      	mov	r1, r6
 80036aa:	4628      	mov	r0, r5
 80036ac:	47b8      	blx	r7
 80036ae:	3001      	adds	r0, #1
 80036b0:	f43f aea3 	beq.w	80033fa <_printf_float+0xc2>
 80036b4:	f108 0801 	add.w	r8, r8, #1
 80036b8:	e7ec      	b.n	8003694 <_printf_float+0x35c>
 80036ba:	4613      	mov	r3, r2
 80036bc:	4631      	mov	r1, r6
 80036be:	4642      	mov	r2, r8
 80036c0:	4628      	mov	r0, r5
 80036c2:	47b8      	blx	r7
 80036c4:	3001      	adds	r0, #1
 80036c6:	d1bf      	bne.n	8003648 <_printf_float+0x310>
 80036c8:	e697      	b.n	80033fa <_printf_float+0xc2>
 80036ca:	2301      	movs	r3, #1
 80036cc:	9a06      	ldr	r2, [sp, #24]
 80036ce:	4631      	mov	r1, r6
 80036d0:	4628      	mov	r0, r5
 80036d2:	47b8      	blx	r7
 80036d4:	3001      	adds	r0, #1
 80036d6:	f43f ae90 	beq.w	80033fa <_printf_float+0xc2>
 80036da:	f10b 0b01 	add.w	fp, fp, #1
 80036de:	e7ba      	b.n	8003656 <_printf_float+0x31e>
 80036e0:	9b05      	ldr	r3, [sp, #20]
 80036e2:	9a04      	ldr	r2, [sp, #16]
 80036e4:	4631      	mov	r1, r6
 80036e6:	4628      	mov	r0, r5
 80036e8:	47b8      	blx	r7
 80036ea:	3001      	adds	r0, #1
 80036ec:	d1c0      	bne.n	8003670 <_printf_float+0x338>
 80036ee:	e684      	b.n	80033fa <_printf_float+0xc2>
 80036f0:	464b      	mov	r3, r9
 80036f2:	eb08 020a 	add.w	r2, r8, sl
 80036f6:	4631      	mov	r1, r6
 80036f8:	4628      	mov	r0, r5
 80036fa:	47b8      	blx	r7
 80036fc:	3001      	adds	r0, #1
 80036fe:	d1c3      	bne.n	8003688 <_printf_float+0x350>
 8003700:	e67b      	b.n	80033fa <_printf_float+0xc2>
 8003702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003704:	2a01      	cmp	r2, #1
 8003706:	dc01      	bgt.n	800370c <_printf_float+0x3d4>
 8003708:	07db      	lsls	r3, r3, #31
 800370a:	d537      	bpl.n	800377c <_printf_float+0x444>
 800370c:	2301      	movs	r3, #1
 800370e:	4642      	mov	r2, r8
 8003710:	4631      	mov	r1, r6
 8003712:	4628      	mov	r0, r5
 8003714:	47b8      	blx	r7
 8003716:	3001      	adds	r0, #1
 8003718:	f43f ae6f 	beq.w	80033fa <_printf_float+0xc2>
 800371c:	9b05      	ldr	r3, [sp, #20]
 800371e:	9a04      	ldr	r2, [sp, #16]
 8003720:	4631      	mov	r1, r6
 8003722:	4628      	mov	r0, r5
 8003724:	47b8      	blx	r7
 8003726:	3001      	adds	r0, #1
 8003728:	f43f ae67 	beq.w	80033fa <_printf_float+0xc2>
 800372c:	2200      	movs	r2, #0
 800372e:	2300      	movs	r3, #0
 8003730:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003734:	f7fd f9cc 	bl	8000ad0 <__aeabi_dcmpeq>
 8003738:	b158      	cbz	r0, 8003752 <_printf_float+0x41a>
 800373a:	f04f 0800 	mov.w	r8, #0
 800373e:	f104 0a1a 	add.w	sl, r4, #26
 8003742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003744:	3b01      	subs	r3, #1
 8003746:	4598      	cmp	r8, r3
 8003748:	db0d      	blt.n	8003766 <_printf_float+0x42e>
 800374a:	464b      	mov	r3, r9
 800374c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003750:	e6eb      	b.n	800352a <_printf_float+0x1f2>
 8003752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003754:	f108 0201 	add.w	r2, r8, #1
 8003758:	3b01      	subs	r3, #1
 800375a:	4631      	mov	r1, r6
 800375c:	4628      	mov	r0, r5
 800375e:	47b8      	blx	r7
 8003760:	3001      	adds	r0, #1
 8003762:	d1f2      	bne.n	800374a <_printf_float+0x412>
 8003764:	e649      	b.n	80033fa <_printf_float+0xc2>
 8003766:	2301      	movs	r3, #1
 8003768:	4652      	mov	r2, sl
 800376a:	4631      	mov	r1, r6
 800376c:	4628      	mov	r0, r5
 800376e:	47b8      	blx	r7
 8003770:	3001      	adds	r0, #1
 8003772:	f43f ae42 	beq.w	80033fa <_printf_float+0xc2>
 8003776:	f108 0801 	add.w	r8, r8, #1
 800377a:	e7e2      	b.n	8003742 <_printf_float+0x40a>
 800377c:	2301      	movs	r3, #1
 800377e:	4642      	mov	r2, r8
 8003780:	e7eb      	b.n	800375a <_printf_float+0x422>
 8003782:	2301      	movs	r3, #1
 8003784:	464a      	mov	r2, r9
 8003786:	4631      	mov	r1, r6
 8003788:	4628      	mov	r0, r5
 800378a:	47b8      	blx	r7
 800378c:	3001      	adds	r0, #1
 800378e:	f43f ae34 	beq.w	80033fa <_printf_float+0xc2>
 8003792:	f108 0801 	add.w	r8, r8, #1
 8003796:	e700      	b.n	800359a <_printf_float+0x262>
 8003798:	4642      	mov	r2, r8
 800379a:	464b      	mov	r3, r9
 800379c:	4640      	mov	r0, r8
 800379e:	4649      	mov	r1, r9
 80037a0:	f7fd f9c8 	bl	8000b34 <__aeabi_dcmpun>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	f43f ae2d 	beq.w	8003404 <_printf_float+0xcc>
 80037aa:	4b01      	ldr	r3, [pc, #4]	; (80037b0 <_printf_float+0x478>)
 80037ac:	4a01      	ldr	r2, [pc, #4]	; (80037b4 <_printf_float+0x47c>)
 80037ae:	e60e      	b.n	80033ce <_printf_float+0x96>
 80037b0:	08005333 	.word	0x08005333
 80037b4:	08005337 	.word	0x08005337

080037b8 <_printf_common>:
 80037b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037bc:	4691      	mov	r9, r2
 80037be:	461f      	mov	r7, r3
 80037c0:	688a      	ldr	r2, [r1, #8]
 80037c2:	690b      	ldr	r3, [r1, #16]
 80037c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037c8:	4293      	cmp	r3, r2
 80037ca:	bfb8      	it	lt
 80037cc:	4613      	movlt	r3, r2
 80037ce:	f8c9 3000 	str.w	r3, [r9]
 80037d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037d6:	4606      	mov	r6, r0
 80037d8:	460c      	mov	r4, r1
 80037da:	b112      	cbz	r2, 80037e2 <_printf_common+0x2a>
 80037dc:	3301      	adds	r3, #1
 80037de:	f8c9 3000 	str.w	r3, [r9]
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	0699      	lsls	r1, r3, #26
 80037e6:	bf42      	ittt	mi
 80037e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037ec:	3302      	addmi	r3, #2
 80037ee:	f8c9 3000 	strmi.w	r3, [r9]
 80037f2:	6825      	ldr	r5, [r4, #0]
 80037f4:	f015 0506 	ands.w	r5, r5, #6
 80037f8:	d107      	bne.n	800380a <_printf_common+0x52>
 80037fa:	f104 0a19 	add.w	sl, r4, #25
 80037fe:	68e3      	ldr	r3, [r4, #12]
 8003800:	f8d9 2000 	ldr.w	r2, [r9]
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	429d      	cmp	r5, r3
 8003808:	db29      	blt.n	800385e <_printf_common+0xa6>
 800380a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800380e:	6822      	ldr	r2, [r4, #0]
 8003810:	3300      	adds	r3, #0
 8003812:	bf18      	it	ne
 8003814:	2301      	movne	r3, #1
 8003816:	0692      	lsls	r2, r2, #26
 8003818:	d42e      	bmi.n	8003878 <_printf_common+0xc0>
 800381a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800381e:	4639      	mov	r1, r7
 8003820:	4630      	mov	r0, r6
 8003822:	47c0      	blx	r8
 8003824:	3001      	adds	r0, #1
 8003826:	d021      	beq.n	800386c <_printf_common+0xb4>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	68e5      	ldr	r5, [r4, #12]
 800382c:	f8d9 2000 	ldr.w	r2, [r9]
 8003830:	f003 0306 	and.w	r3, r3, #6
 8003834:	2b04      	cmp	r3, #4
 8003836:	bf08      	it	eq
 8003838:	1aad      	subeq	r5, r5, r2
 800383a:	68a3      	ldr	r3, [r4, #8]
 800383c:	6922      	ldr	r2, [r4, #16]
 800383e:	bf0c      	ite	eq
 8003840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003844:	2500      	movne	r5, #0
 8003846:	4293      	cmp	r3, r2
 8003848:	bfc4      	itt	gt
 800384a:	1a9b      	subgt	r3, r3, r2
 800384c:	18ed      	addgt	r5, r5, r3
 800384e:	f04f 0900 	mov.w	r9, #0
 8003852:	341a      	adds	r4, #26
 8003854:	454d      	cmp	r5, r9
 8003856:	d11b      	bne.n	8003890 <_printf_common+0xd8>
 8003858:	2000      	movs	r0, #0
 800385a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800385e:	2301      	movs	r3, #1
 8003860:	4652      	mov	r2, sl
 8003862:	4639      	mov	r1, r7
 8003864:	4630      	mov	r0, r6
 8003866:	47c0      	blx	r8
 8003868:	3001      	adds	r0, #1
 800386a:	d103      	bne.n	8003874 <_printf_common+0xbc>
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003874:	3501      	adds	r5, #1
 8003876:	e7c2      	b.n	80037fe <_printf_common+0x46>
 8003878:	18e1      	adds	r1, r4, r3
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	2030      	movs	r0, #48	; 0x30
 800387e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003882:	4422      	add	r2, r4
 8003884:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003888:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800388c:	3302      	adds	r3, #2
 800388e:	e7c4      	b.n	800381a <_printf_common+0x62>
 8003890:	2301      	movs	r3, #1
 8003892:	4622      	mov	r2, r4
 8003894:	4639      	mov	r1, r7
 8003896:	4630      	mov	r0, r6
 8003898:	47c0      	blx	r8
 800389a:	3001      	adds	r0, #1
 800389c:	d0e6      	beq.n	800386c <_printf_common+0xb4>
 800389e:	f109 0901 	add.w	r9, r9, #1
 80038a2:	e7d7      	b.n	8003854 <_printf_common+0x9c>

080038a4 <_printf_i>:
 80038a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038a8:	4617      	mov	r7, r2
 80038aa:	7e0a      	ldrb	r2, [r1, #24]
 80038ac:	b085      	sub	sp, #20
 80038ae:	2a6e      	cmp	r2, #110	; 0x6e
 80038b0:	4698      	mov	r8, r3
 80038b2:	4606      	mov	r6, r0
 80038b4:	460c      	mov	r4, r1
 80038b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038b8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80038bc:	f000 80bc 	beq.w	8003a38 <_printf_i+0x194>
 80038c0:	d81a      	bhi.n	80038f8 <_printf_i+0x54>
 80038c2:	2a63      	cmp	r2, #99	; 0x63
 80038c4:	d02e      	beq.n	8003924 <_printf_i+0x80>
 80038c6:	d80a      	bhi.n	80038de <_printf_i+0x3a>
 80038c8:	2a00      	cmp	r2, #0
 80038ca:	f000 80c8 	beq.w	8003a5e <_printf_i+0x1ba>
 80038ce:	2a58      	cmp	r2, #88	; 0x58
 80038d0:	f000 808a 	beq.w	80039e8 <_printf_i+0x144>
 80038d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038d8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80038dc:	e02a      	b.n	8003934 <_printf_i+0x90>
 80038de:	2a64      	cmp	r2, #100	; 0x64
 80038e0:	d001      	beq.n	80038e6 <_printf_i+0x42>
 80038e2:	2a69      	cmp	r2, #105	; 0x69
 80038e4:	d1f6      	bne.n	80038d4 <_printf_i+0x30>
 80038e6:	6821      	ldr	r1, [r4, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038ee:	d023      	beq.n	8003938 <_printf_i+0x94>
 80038f0:	1d11      	adds	r1, r2, #4
 80038f2:	6019      	str	r1, [r3, #0]
 80038f4:	6813      	ldr	r3, [r2, #0]
 80038f6:	e027      	b.n	8003948 <_printf_i+0xa4>
 80038f8:	2a73      	cmp	r2, #115	; 0x73
 80038fa:	f000 80b4 	beq.w	8003a66 <_printf_i+0x1c2>
 80038fe:	d808      	bhi.n	8003912 <_printf_i+0x6e>
 8003900:	2a6f      	cmp	r2, #111	; 0x6f
 8003902:	d02a      	beq.n	800395a <_printf_i+0xb6>
 8003904:	2a70      	cmp	r2, #112	; 0x70
 8003906:	d1e5      	bne.n	80038d4 <_printf_i+0x30>
 8003908:	680a      	ldr	r2, [r1, #0]
 800390a:	f042 0220 	orr.w	r2, r2, #32
 800390e:	600a      	str	r2, [r1, #0]
 8003910:	e003      	b.n	800391a <_printf_i+0x76>
 8003912:	2a75      	cmp	r2, #117	; 0x75
 8003914:	d021      	beq.n	800395a <_printf_i+0xb6>
 8003916:	2a78      	cmp	r2, #120	; 0x78
 8003918:	d1dc      	bne.n	80038d4 <_printf_i+0x30>
 800391a:	2278      	movs	r2, #120	; 0x78
 800391c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003920:	496e      	ldr	r1, [pc, #440]	; (8003adc <_printf_i+0x238>)
 8003922:	e064      	b.n	80039ee <_printf_i+0x14a>
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800392a:	1d11      	adds	r1, r2, #4
 800392c:	6019      	str	r1, [r3, #0]
 800392e:	6813      	ldr	r3, [r2, #0]
 8003930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003934:	2301      	movs	r3, #1
 8003936:	e0a3      	b.n	8003a80 <_printf_i+0x1dc>
 8003938:	f011 0f40 	tst.w	r1, #64	; 0x40
 800393c:	f102 0104 	add.w	r1, r2, #4
 8003940:	6019      	str	r1, [r3, #0]
 8003942:	d0d7      	beq.n	80038f4 <_printf_i+0x50>
 8003944:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003948:	2b00      	cmp	r3, #0
 800394a:	da03      	bge.n	8003954 <_printf_i+0xb0>
 800394c:	222d      	movs	r2, #45	; 0x2d
 800394e:	425b      	negs	r3, r3
 8003950:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003954:	4962      	ldr	r1, [pc, #392]	; (8003ae0 <_printf_i+0x23c>)
 8003956:	220a      	movs	r2, #10
 8003958:	e017      	b.n	800398a <_printf_i+0xe6>
 800395a:	6820      	ldr	r0, [r4, #0]
 800395c:	6819      	ldr	r1, [r3, #0]
 800395e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003962:	d003      	beq.n	800396c <_printf_i+0xc8>
 8003964:	1d08      	adds	r0, r1, #4
 8003966:	6018      	str	r0, [r3, #0]
 8003968:	680b      	ldr	r3, [r1, #0]
 800396a:	e006      	b.n	800397a <_printf_i+0xd6>
 800396c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003970:	f101 0004 	add.w	r0, r1, #4
 8003974:	6018      	str	r0, [r3, #0]
 8003976:	d0f7      	beq.n	8003968 <_printf_i+0xc4>
 8003978:	880b      	ldrh	r3, [r1, #0]
 800397a:	4959      	ldr	r1, [pc, #356]	; (8003ae0 <_printf_i+0x23c>)
 800397c:	2a6f      	cmp	r2, #111	; 0x6f
 800397e:	bf14      	ite	ne
 8003980:	220a      	movne	r2, #10
 8003982:	2208      	moveq	r2, #8
 8003984:	2000      	movs	r0, #0
 8003986:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800398a:	6865      	ldr	r5, [r4, #4]
 800398c:	60a5      	str	r5, [r4, #8]
 800398e:	2d00      	cmp	r5, #0
 8003990:	f2c0 809c 	blt.w	8003acc <_printf_i+0x228>
 8003994:	6820      	ldr	r0, [r4, #0]
 8003996:	f020 0004 	bic.w	r0, r0, #4
 800399a:	6020      	str	r0, [r4, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d13f      	bne.n	8003a20 <_printf_i+0x17c>
 80039a0:	2d00      	cmp	r5, #0
 80039a2:	f040 8095 	bne.w	8003ad0 <_printf_i+0x22c>
 80039a6:	4675      	mov	r5, lr
 80039a8:	2a08      	cmp	r2, #8
 80039aa:	d10b      	bne.n	80039c4 <_printf_i+0x120>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	07da      	lsls	r2, r3, #31
 80039b0:	d508      	bpl.n	80039c4 <_printf_i+0x120>
 80039b2:	6923      	ldr	r3, [r4, #16]
 80039b4:	6862      	ldr	r2, [r4, #4]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	bfde      	ittt	le
 80039ba:	2330      	movle	r3, #48	; 0x30
 80039bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039c4:	ebae 0305 	sub.w	r3, lr, r5
 80039c8:	6123      	str	r3, [r4, #16]
 80039ca:	f8cd 8000 	str.w	r8, [sp]
 80039ce:	463b      	mov	r3, r7
 80039d0:	aa03      	add	r2, sp, #12
 80039d2:	4621      	mov	r1, r4
 80039d4:	4630      	mov	r0, r6
 80039d6:	f7ff feef 	bl	80037b8 <_printf_common>
 80039da:	3001      	adds	r0, #1
 80039dc:	d155      	bne.n	8003a8a <_printf_i+0x1e6>
 80039de:	f04f 30ff 	mov.w	r0, #4294967295
 80039e2:	b005      	add	sp, #20
 80039e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039e8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80039ec:	493c      	ldr	r1, [pc, #240]	; (8003ae0 <_printf_i+0x23c>)
 80039ee:	6822      	ldr	r2, [r4, #0]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80039f6:	f100 0504 	add.w	r5, r0, #4
 80039fa:	601d      	str	r5, [r3, #0]
 80039fc:	d001      	beq.n	8003a02 <_printf_i+0x15e>
 80039fe:	6803      	ldr	r3, [r0, #0]
 8003a00:	e002      	b.n	8003a08 <_printf_i+0x164>
 8003a02:	0655      	lsls	r5, r2, #25
 8003a04:	d5fb      	bpl.n	80039fe <_printf_i+0x15a>
 8003a06:	8803      	ldrh	r3, [r0, #0]
 8003a08:	07d0      	lsls	r0, r2, #31
 8003a0a:	bf44      	itt	mi
 8003a0c:	f042 0220 	orrmi.w	r2, r2, #32
 8003a10:	6022      	strmi	r2, [r4, #0]
 8003a12:	b91b      	cbnz	r3, 8003a1c <_printf_i+0x178>
 8003a14:	6822      	ldr	r2, [r4, #0]
 8003a16:	f022 0220 	bic.w	r2, r2, #32
 8003a1a:	6022      	str	r2, [r4, #0]
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	e7b1      	b.n	8003984 <_printf_i+0xe0>
 8003a20:	4675      	mov	r5, lr
 8003a22:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a26:	fb02 3310 	mls	r3, r2, r0, r3
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a30:	4603      	mov	r3, r0
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d1f5      	bne.n	8003a22 <_printf_i+0x17e>
 8003a36:	e7b7      	b.n	80039a8 <_printf_i+0x104>
 8003a38:	6808      	ldr	r0, [r1, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	6949      	ldr	r1, [r1, #20]
 8003a3e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003a42:	d004      	beq.n	8003a4e <_printf_i+0x1aa>
 8003a44:	1d10      	adds	r0, r2, #4
 8003a46:	6018      	str	r0, [r3, #0]
 8003a48:	6813      	ldr	r3, [r2, #0]
 8003a4a:	6019      	str	r1, [r3, #0]
 8003a4c:	e007      	b.n	8003a5e <_printf_i+0x1ba>
 8003a4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a52:	f102 0004 	add.w	r0, r2, #4
 8003a56:	6018      	str	r0, [r3, #0]
 8003a58:	6813      	ldr	r3, [r2, #0]
 8003a5a:	d0f6      	beq.n	8003a4a <_printf_i+0x1a6>
 8003a5c:	8019      	strh	r1, [r3, #0]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6123      	str	r3, [r4, #16]
 8003a62:	4675      	mov	r5, lr
 8003a64:	e7b1      	b.n	80039ca <_printf_i+0x126>
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	1d11      	adds	r1, r2, #4
 8003a6a:	6019      	str	r1, [r3, #0]
 8003a6c:	6815      	ldr	r5, [r2, #0]
 8003a6e:	6862      	ldr	r2, [r4, #4]
 8003a70:	2100      	movs	r1, #0
 8003a72:	4628      	mov	r0, r5
 8003a74:	f7fc fbbc 	bl	80001f0 <memchr>
 8003a78:	b108      	cbz	r0, 8003a7e <_printf_i+0x1da>
 8003a7a:	1b40      	subs	r0, r0, r5
 8003a7c:	6060      	str	r0, [r4, #4]
 8003a7e:	6863      	ldr	r3, [r4, #4]
 8003a80:	6123      	str	r3, [r4, #16]
 8003a82:	2300      	movs	r3, #0
 8003a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a88:	e79f      	b.n	80039ca <_printf_i+0x126>
 8003a8a:	6923      	ldr	r3, [r4, #16]
 8003a8c:	462a      	mov	r2, r5
 8003a8e:	4639      	mov	r1, r7
 8003a90:	4630      	mov	r0, r6
 8003a92:	47c0      	blx	r8
 8003a94:	3001      	adds	r0, #1
 8003a96:	d0a2      	beq.n	80039de <_printf_i+0x13a>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	079b      	lsls	r3, r3, #30
 8003a9c:	d507      	bpl.n	8003aae <_printf_i+0x20a>
 8003a9e:	2500      	movs	r5, #0
 8003aa0:	f104 0919 	add.w	r9, r4, #25
 8003aa4:	68e3      	ldr	r3, [r4, #12]
 8003aa6:	9a03      	ldr	r2, [sp, #12]
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	429d      	cmp	r5, r3
 8003aac:	db05      	blt.n	8003aba <_printf_i+0x216>
 8003aae:	68e0      	ldr	r0, [r4, #12]
 8003ab0:	9b03      	ldr	r3, [sp, #12]
 8003ab2:	4298      	cmp	r0, r3
 8003ab4:	bfb8      	it	lt
 8003ab6:	4618      	movlt	r0, r3
 8003ab8:	e793      	b.n	80039e2 <_printf_i+0x13e>
 8003aba:	2301      	movs	r3, #1
 8003abc:	464a      	mov	r2, r9
 8003abe:	4639      	mov	r1, r7
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	47c0      	blx	r8
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d08a      	beq.n	80039de <_printf_i+0x13a>
 8003ac8:	3501      	adds	r5, #1
 8003aca:	e7eb      	b.n	8003aa4 <_printf_i+0x200>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1a7      	bne.n	8003a20 <_printf_i+0x17c>
 8003ad0:	780b      	ldrb	r3, [r1, #0]
 8003ad2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ad6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ada:	e765      	b.n	80039a8 <_printf_i+0x104>
 8003adc:	0800534e 	.word	0x0800534e
 8003ae0:	0800533d 	.word	0x0800533d

08003ae4 <siprintf>:
 8003ae4:	b40e      	push	{r1, r2, r3}
 8003ae6:	b500      	push	{lr}
 8003ae8:	b09c      	sub	sp, #112	; 0x70
 8003aea:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003aee:	ab1d      	add	r3, sp, #116	; 0x74
 8003af0:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003af4:	9002      	str	r0, [sp, #8]
 8003af6:	9006      	str	r0, [sp, #24]
 8003af8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003afc:	480a      	ldr	r0, [pc, #40]	; (8003b28 <siprintf+0x44>)
 8003afe:	9104      	str	r1, [sp, #16]
 8003b00:	9107      	str	r1, [sp, #28]
 8003b02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b0a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003b0e:	6800      	ldr	r0, [r0, #0]
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	a902      	add	r1, sp, #8
 8003b14:	f001 fa6e 	bl	8004ff4 <_svfiprintf_r>
 8003b18:	9b02      	ldr	r3, [sp, #8]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	b01c      	add	sp, #112	; 0x70
 8003b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b24:	b003      	add	sp, #12
 8003b26:	4770      	bx	lr
 8003b28:	2000000c 	.word	0x2000000c

08003b2c <quorem>:
 8003b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b30:	6903      	ldr	r3, [r0, #16]
 8003b32:	690c      	ldr	r4, [r1, #16]
 8003b34:	429c      	cmp	r4, r3
 8003b36:	4680      	mov	r8, r0
 8003b38:	f300 8082 	bgt.w	8003c40 <quorem+0x114>
 8003b3c:	3c01      	subs	r4, #1
 8003b3e:	f101 0714 	add.w	r7, r1, #20
 8003b42:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003b46:	f100 0614 	add.w	r6, r0, #20
 8003b4a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003b4e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003b52:	eb06 030e 	add.w	r3, r6, lr
 8003b56:	3501      	adds	r5, #1
 8003b58:	eb07 090e 	add.w	r9, r7, lr
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003b62:	b395      	cbz	r5, 8003bca <quorem+0x9e>
 8003b64:	f04f 0a00 	mov.w	sl, #0
 8003b68:	4638      	mov	r0, r7
 8003b6a:	46b4      	mov	ip, r6
 8003b6c:	46d3      	mov	fp, sl
 8003b6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003b72:	b293      	uxth	r3, r2
 8003b74:	fb05 a303 	mla	r3, r5, r3, sl
 8003b78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	ebab 0303 	sub.w	r3, fp, r3
 8003b82:	0c12      	lsrs	r2, r2, #16
 8003b84:	f8bc b000 	ldrh.w	fp, [ip]
 8003b88:	fb05 a202 	mla	r2, r5, r2, sl
 8003b8c:	fa13 f38b 	uxtah	r3, r3, fp
 8003b90:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003b94:	fa1f fb82 	uxth.w	fp, r2
 8003b98:	f8dc 2000 	ldr.w	r2, [ip]
 8003b9c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003ba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003baa:	4581      	cmp	r9, r0
 8003bac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003bb0:	f84c 3b04 	str.w	r3, [ip], #4
 8003bb4:	d2db      	bcs.n	8003b6e <quorem+0x42>
 8003bb6:	f856 300e 	ldr.w	r3, [r6, lr]
 8003bba:	b933      	cbnz	r3, 8003bca <quorem+0x9e>
 8003bbc:	9b01      	ldr	r3, [sp, #4]
 8003bbe:	3b04      	subs	r3, #4
 8003bc0:	429e      	cmp	r6, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	d330      	bcc.n	8003c28 <quorem+0xfc>
 8003bc6:	f8c8 4010 	str.w	r4, [r8, #16]
 8003bca:	4640      	mov	r0, r8
 8003bcc:	f001 f835 	bl	8004c3a <__mcmp>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	db25      	blt.n	8003c20 <quorem+0xf4>
 8003bd4:	3501      	adds	r5, #1
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	f04f 0e00 	mov.w	lr, #0
 8003bdc:	f857 2b04 	ldr.w	r2, [r7], #4
 8003be0:	f8d0 c000 	ldr.w	ip, [r0]
 8003be4:	b293      	uxth	r3, r2
 8003be6:	ebae 0303 	sub.w	r3, lr, r3
 8003bea:	0c12      	lsrs	r2, r2, #16
 8003bec:	fa13 f38c 	uxtah	r3, r3, ip
 8003bf0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003bf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bfe:	45b9      	cmp	r9, r7
 8003c00:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003c04:	f840 3b04 	str.w	r3, [r0], #4
 8003c08:	d2e8      	bcs.n	8003bdc <quorem+0xb0>
 8003c0a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003c0e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003c12:	b92a      	cbnz	r2, 8003c20 <quorem+0xf4>
 8003c14:	3b04      	subs	r3, #4
 8003c16:	429e      	cmp	r6, r3
 8003c18:	461a      	mov	r2, r3
 8003c1a:	d30b      	bcc.n	8003c34 <quorem+0x108>
 8003c1c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003c20:	4628      	mov	r0, r5
 8003c22:	b003      	add	sp, #12
 8003c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	3b04      	subs	r3, #4
 8003c2c:	2a00      	cmp	r2, #0
 8003c2e:	d1ca      	bne.n	8003bc6 <quorem+0x9a>
 8003c30:	3c01      	subs	r4, #1
 8003c32:	e7c5      	b.n	8003bc0 <quorem+0x94>
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	3b04      	subs	r3, #4
 8003c38:	2a00      	cmp	r2, #0
 8003c3a:	d1ef      	bne.n	8003c1c <quorem+0xf0>
 8003c3c:	3c01      	subs	r4, #1
 8003c3e:	e7ea      	b.n	8003c16 <quorem+0xea>
 8003c40:	2000      	movs	r0, #0
 8003c42:	e7ee      	b.n	8003c22 <quorem+0xf6>
 8003c44:	0000      	movs	r0, r0
	...

08003c48 <_dtoa_r>:
 8003c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4c:	ec57 6b10 	vmov	r6, r7, d0
 8003c50:	b097      	sub	sp, #92	; 0x5c
 8003c52:	e9cd 6700 	strd	r6, r7, [sp]
 8003c56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003c58:	9107      	str	r1, [sp, #28]
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	920a      	str	r2, [sp, #40]	; 0x28
 8003c5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c60:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003c62:	b93e      	cbnz	r6, 8003c74 <_dtoa_r+0x2c>
 8003c64:	2010      	movs	r0, #16
 8003c66:	f000 fdcb 	bl	8004800 <malloc>
 8003c6a:	6260      	str	r0, [r4, #36]	; 0x24
 8003c6c:	6046      	str	r6, [r0, #4]
 8003c6e:	6086      	str	r6, [r0, #8]
 8003c70:	6006      	str	r6, [r0, #0]
 8003c72:	60c6      	str	r6, [r0, #12]
 8003c74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c76:	6819      	ldr	r1, [r3, #0]
 8003c78:	b151      	cbz	r1, 8003c90 <_dtoa_r+0x48>
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	604a      	str	r2, [r1, #4]
 8003c7e:	2301      	movs	r3, #1
 8003c80:	4093      	lsls	r3, r2
 8003c82:	608b      	str	r3, [r1, #8]
 8003c84:	4620      	mov	r0, r4
 8003c86:	f000 fe02 	bl	800488e <_Bfree>
 8003c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	9b01      	ldr	r3, [sp, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	bfbf      	itttt	lt
 8003c96:	2301      	movlt	r3, #1
 8003c98:	602b      	strlt	r3, [r5, #0]
 8003c9a:	9b01      	ldrlt	r3, [sp, #4]
 8003c9c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ca0:	bfb2      	itee	lt
 8003ca2:	9301      	strlt	r3, [sp, #4]
 8003ca4:	2300      	movge	r3, #0
 8003ca6:	602b      	strge	r3, [r5, #0]
 8003ca8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003cac:	4ba8      	ldr	r3, [pc, #672]	; (8003f50 <_dtoa_r+0x308>)
 8003cae:	ea33 0308 	bics.w	r3, r3, r8
 8003cb2:	d11b      	bne.n	8003cec <_dtoa_r+0xa4>
 8003cb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003cb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	9b00      	ldr	r3, [sp, #0]
 8003cbe:	b923      	cbnz	r3, 8003cca <_dtoa_r+0x82>
 8003cc0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	f000 8578 	beq.w	80047ba <_dtoa_r+0xb72>
 8003cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ccc:	b953      	cbnz	r3, 8003ce4 <_dtoa_r+0x9c>
 8003cce:	4ba1      	ldr	r3, [pc, #644]	; (8003f54 <_dtoa_r+0x30c>)
 8003cd0:	e021      	b.n	8003d16 <_dtoa_r+0xce>
 8003cd2:	4ba1      	ldr	r3, [pc, #644]	; (8003f58 <_dtoa_r+0x310>)
 8003cd4:	9302      	str	r3, [sp, #8]
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	9802      	ldr	r0, [sp, #8]
 8003cde:	b017      	add	sp, #92	; 0x5c
 8003ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce4:	4b9b      	ldr	r3, [pc, #620]	; (8003f54 <_dtoa_r+0x30c>)
 8003ce6:	9302      	str	r3, [sp, #8]
 8003ce8:	3303      	adds	r3, #3
 8003cea:	e7f5      	b.n	8003cd8 <_dtoa_r+0x90>
 8003cec:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	4639      	mov	r1, r7
 8003cf8:	f7fc feea 	bl	8000ad0 <__aeabi_dcmpeq>
 8003cfc:	4681      	mov	r9, r0
 8003cfe:	b160      	cbz	r0, 8003d1a <_dtoa_r+0xd2>
 8003d00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d02:	2301      	movs	r3, #1
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8553 	beq.w	80047b4 <_dtoa_r+0xb6c>
 8003d0e:	4b93      	ldr	r3, [pc, #588]	; (8003f5c <_dtoa_r+0x314>)
 8003d10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	9302      	str	r3, [sp, #8]
 8003d18:	e7e0      	b.n	8003cdc <_dtoa_r+0x94>
 8003d1a:	aa14      	add	r2, sp, #80	; 0x50
 8003d1c:	a915      	add	r1, sp, #84	; 0x54
 8003d1e:	ec47 6b10 	vmov	d0, r6, r7
 8003d22:	4620      	mov	r0, r4
 8003d24:	f001 f801 	bl	8004d2a <__d2b>
 8003d28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003d2c:	4682      	mov	sl, r0
 8003d2e:	2d00      	cmp	r5, #0
 8003d30:	d07e      	beq.n	8003e30 <_dtoa_r+0x1e8>
 8003d32:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003d36:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003d40:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003d44:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003d48:	2200      	movs	r2, #0
 8003d4a:	4b85      	ldr	r3, [pc, #532]	; (8003f60 <_dtoa_r+0x318>)
 8003d4c:	f7fc faa4 	bl	8000298 <__aeabi_dsub>
 8003d50:	a379      	add	r3, pc, #484	; (adr r3, 8003f38 <_dtoa_r+0x2f0>)
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	f7fc fc53 	bl	8000600 <__aeabi_dmul>
 8003d5a:	a379      	add	r3, pc, #484	; (adr r3, 8003f40 <_dtoa_r+0x2f8>)
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	f7fc fa9c 	bl	800029c <__adddf3>
 8003d64:	4606      	mov	r6, r0
 8003d66:	4628      	mov	r0, r5
 8003d68:	460f      	mov	r7, r1
 8003d6a:	f7fc fbe3 	bl	8000534 <__aeabi_i2d>
 8003d6e:	a376      	add	r3, pc, #472	; (adr r3, 8003f48 <_dtoa_r+0x300>)
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f7fc fc44 	bl	8000600 <__aeabi_dmul>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	4639      	mov	r1, r7
 8003d80:	f7fc fa8c 	bl	800029c <__adddf3>
 8003d84:	4606      	mov	r6, r0
 8003d86:	460f      	mov	r7, r1
 8003d88:	f7fc feea 	bl	8000b60 <__aeabi_d2iz>
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	4683      	mov	fp, r0
 8003d90:	2300      	movs	r3, #0
 8003d92:	4630      	mov	r0, r6
 8003d94:	4639      	mov	r1, r7
 8003d96:	f7fc fea5 	bl	8000ae4 <__aeabi_dcmplt>
 8003d9a:	b158      	cbz	r0, 8003db4 <_dtoa_r+0x16c>
 8003d9c:	4658      	mov	r0, fp
 8003d9e:	f7fc fbc9 	bl	8000534 <__aeabi_i2d>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4630      	mov	r0, r6
 8003da8:	4639      	mov	r1, r7
 8003daa:	f7fc fe91 	bl	8000ad0 <__aeabi_dcmpeq>
 8003dae:	b908      	cbnz	r0, 8003db4 <_dtoa_r+0x16c>
 8003db0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003db4:	f1bb 0f16 	cmp.w	fp, #22
 8003db8:	d859      	bhi.n	8003e6e <_dtoa_r+0x226>
 8003dba:	496a      	ldr	r1, [pc, #424]	; (8003f64 <_dtoa_r+0x31c>)
 8003dbc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dc8:	f7fc feaa 	bl	8000b20 <__aeabi_dcmpgt>
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	d050      	beq.n	8003e72 <_dtoa_r+0x22a>
 8003dd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	930e      	str	r3, [sp, #56]	; 0x38
 8003dd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003dda:	1b5d      	subs	r5, r3, r5
 8003ddc:	1e6b      	subs	r3, r5, #1
 8003dde:	9306      	str	r3, [sp, #24]
 8003de0:	bf45      	ittet	mi
 8003de2:	f1c5 0301 	rsbmi	r3, r5, #1
 8003de6:	9305      	strmi	r3, [sp, #20]
 8003de8:	2300      	movpl	r3, #0
 8003dea:	2300      	movmi	r3, #0
 8003dec:	bf4c      	ite	mi
 8003dee:	9306      	strmi	r3, [sp, #24]
 8003df0:	9305      	strpl	r3, [sp, #20]
 8003df2:	f1bb 0f00 	cmp.w	fp, #0
 8003df6:	db3e      	blt.n	8003e76 <_dtoa_r+0x22e>
 8003df8:	9b06      	ldr	r3, [sp, #24]
 8003dfa:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003dfe:	445b      	add	r3, fp
 8003e00:	9306      	str	r3, [sp, #24]
 8003e02:	2300      	movs	r3, #0
 8003e04:	9308      	str	r3, [sp, #32]
 8003e06:	9b07      	ldr	r3, [sp, #28]
 8003e08:	2b09      	cmp	r3, #9
 8003e0a:	f200 80af 	bhi.w	8003f6c <_dtoa_r+0x324>
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	bfc4      	itt	gt
 8003e12:	3b04      	subgt	r3, #4
 8003e14:	9307      	strgt	r3, [sp, #28]
 8003e16:	9b07      	ldr	r3, [sp, #28]
 8003e18:	f1a3 0302 	sub.w	r3, r3, #2
 8003e1c:	bfcc      	ite	gt
 8003e1e:	2600      	movgt	r6, #0
 8003e20:	2601      	movle	r6, #1
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	f200 80ae 	bhi.w	8003f84 <_dtoa_r+0x33c>
 8003e28:	e8df f003 	tbb	[pc, r3]
 8003e2c:	772f8482 	.word	0x772f8482
 8003e30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003e32:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003e34:	441d      	add	r5, r3
 8003e36:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	dd11      	ble.n	8003e62 <_dtoa_r+0x21a>
 8003e3e:	9a00      	ldr	r2, [sp, #0]
 8003e40:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003e44:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003e48:	fa22 f000 	lsr.w	r0, r2, r0
 8003e4c:	fa08 f303 	lsl.w	r3, r8, r3
 8003e50:	4318      	orrs	r0, r3
 8003e52:	f7fc fb5f 	bl	8000514 <__aeabi_ui2d>
 8003e56:	2301      	movs	r3, #1
 8003e58:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003e5c:	3d01      	subs	r5, #1
 8003e5e:	9312      	str	r3, [sp, #72]	; 0x48
 8003e60:	e772      	b.n	8003d48 <_dtoa_r+0x100>
 8003e62:	f1c3 0020 	rsb	r0, r3, #32
 8003e66:	9b00      	ldr	r3, [sp, #0]
 8003e68:	fa03 f000 	lsl.w	r0, r3, r0
 8003e6c:	e7f1      	b.n	8003e52 <_dtoa_r+0x20a>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e7b1      	b.n	8003dd6 <_dtoa_r+0x18e>
 8003e72:	900e      	str	r0, [sp, #56]	; 0x38
 8003e74:	e7b0      	b.n	8003dd8 <_dtoa_r+0x190>
 8003e76:	9b05      	ldr	r3, [sp, #20]
 8003e78:	eba3 030b 	sub.w	r3, r3, fp
 8003e7c:	9305      	str	r3, [sp, #20]
 8003e7e:	f1cb 0300 	rsb	r3, fp, #0
 8003e82:	9308      	str	r3, [sp, #32]
 8003e84:	2300      	movs	r3, #0
 8003e86:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e88:	e7bd      	b.n	8003e06 <_dtoa_r+0x1be>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	dd7a      	ble.n	8003f8a <_dtoa_r+0x342>
 8003e94:	9304      	str	r3, [sp, #16]
 8003e96:	9303      	str	r3, [sp, #12]
 8003e98:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	606a      	str	r2, [r5, #4]
 8003e9e:	2104      	movs	r1, #4
 8003ea0:	f101 0214 	add.w	r2, r1, #20
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d975      	bls.n	8003f94 <_dtoa_r+0x34c>
 8003ea8:	6869      	ldr	r1, [r5, #4]
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f000 fcbb 	bl	8004826 <_Balloc>
 8003eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eb2:	6028      	str	r0, [r5, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	9302      	str	r3, [sp, #8]
 8003eb8:	9b03      	ldr	r3, [sp, #12]
 8003eba:	2b0e      	cmp	r3, #14
 8003ebc:	f200 80e5 	bhi.w	800408a <_dtoa_r+0x442>
 8003ec0:	2e00      	cmp	r6, #0
 8003ec2:	f000 80e2 	beq.w	800408a <_dtoa_r+0x442>
 8003ec6:	ed9d 7b00 	vldr	d7, [sp]
 8003eca:	f1bb 0f00 	cmp.w	fp, #0
 8003ece:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003ed2:	dd74      	ble.n	8003fbe <_dtoa_r+0x376>
 8003ed4:	4a23      	ldr	r2, [pc, #140]	; (8003f64 <_dtoa_r+0x31c>)
 8003ed6:	f00b 030f 	and.w	r3, fp, #15
 8003eda:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003ede:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003ee2:	06f0      	lsls	r0, r6, #27
 8003ee4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003ee8:	d559      	bpl.n	8003f9e <_dtoa_r+0x356>
 8003eea:	4b1f      	ldr	r3, [pc, #124]	; (8003f68 <_dtoa_r+0x320>)
 8003eec:	ec51 0b17 	vmov	r0, r1, d7
 8003ef0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ef4:	f7fc fcae 	bl	8000854 <__aeabi_ddiv>
 8003ef8:	e9cd 0100 	strd	r0, r1, [sp]
 8003efc:	f006 060f 	and.w	r6, r6, #15
 8003f00:	2503      	movs	r5, #3
 8003f02:	4f19      	ldr	r7, [pc, #100]	; (8003f68 <_dtoa_r+0x320>)
 8003f04:	2e00      	cmp	r6, #0
 8003f06:	d14c      	bne.n	8003fa2 <_dtoa_r+0x35a>
 8003f08:	4642      	mov	r2, r8
 8003f0a:	464b      	mov	r3, r9
 8003f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f10:	f7fc fca0 	bl	8000854 <__aeabi_ddiv>
 8003f14:	e9cd 0100 	strd	r0, r1, [sp]
 8003f18:	e06a      	b.n	8003ff0 <_dtoa_r+0x3a8>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f20:	445b      	add	r3, fp
 8003f22:	9304      	str	r3, [sp, #16]
 8003f24:	3301      	adds	r3, #1
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	9303      	str	r3, [sp, #12]
 8003f2a:	bfb8      	it	lt
 8003f2c:	2301      	movlt	r3, #1
 8003f2e:	e7b3      	b.n	8003e98 <_dtoa_r+0x250>
 8003f30:	2300      	movs	r3, #0
 8003f32:	e7ab      	b.n	8003e8c <_dtoa_r+0x244>
 8003f34:	2300      	movs	r3, #0
 8003f36:	e7f1      	b.n	8003f1c <_dtoa_r+0x2d4>
 8003f38:	636f4361 	.word	0x636f4361
 8003f3c:	3fd287a7 	.word	0x3fd287a7
 8003f40:	8b60c8b3 	.word	0x8b60c8b3
 8003f44:	3fc68a28 	.word	0x3fc68a28
 8003f48:	509f79fb 	.word	0x509f79fb
 8003f4c:	3fd34413 	.word	0x3fd34413
 8003f50:	7ff00000 	.word	0x7ff00000
 8003f54:	08005368 	.word	0x08005368
 8003f58:	0800535f 	.word	0x0800535f
 8003f5c:	0800533c 	.word	0x0800533c
 8003f60:	3ff80000 	.word	0x3ff80000
 8003f64:	08005398 	.word	0x08005398
 8003f68:	08005370 	.word	0x08005370
 8003f6c:	2601      	movs	r6, #1
 8003f6e:	2300      	movs	r3, #0
 8003f70:	9307      	str	r3, [sp, #28]
 8003f72:	9609      	str	r6, [sp, #36]	; 0x24
 8003f74:	f04f 33ff 	mov.w	r3, #4294967295
 8003f78:	9304      	str	r3, [sp, #16]
 8003f7a:	9303      	str	r3, [sp, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2312      	movs	r3, #18
 8003f80:	920a      	str	r2, [sp, #40]	; 0x28
 8003f82:	e789      	b.n	8003e98 <_dtoa_r+0x250>
 8003f84:	2301      	movs	r3, #1
 8003f86:	9309      	str	r3, [sp, #36]	; 0x24
 8003f88:	e7f4      	b.n	8003f74 <_dtoa_r+0x32c>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	9304      	str	r3, [sp, #16]
 8003f8e:	9303      	str	r3, [sp, #12]
 8003f90:	461a      	mov	r2, r3
 8003f92:	e7f5      	b.n	8003f80 <_dtoa_r+0x338>
 8003f94:	686a      	ldr	r2, [r5, #4]
 8003f96:	3201      	adds	r2, #1
 8003f98:	606a      	str	r2, [r5, #4]
 8003f9a:	0049      	lsls	r1, r1, #1
 8003f9c:	e780      	b.n	8003ea0 <_dtoa_r+0x258>
 8003f9e:	2502      	movs	r5, #2
 8003fa0:	e7af      	b.n	8003f02 <_dtoa_r+0x2ba>
 8003fa2:	07f1      	lsls	r1, r6, #31
 8003fa4:	d508      	bpl.n	8003fb8 <_dtoa_r+0x370>
 8003fa6:	4640      	mov	r0, r8
 8003fa8:	4649      	mov	r1, r9
 8003faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fae:	f7fc fb27 	bl	8000600 <__aeabi_dmul>
 8003fb2:	3501      	adds	r5, #1
 8003fb4:	4680      	mov	r8, r0
 8003fb6:	4689      	mov	r9, r1
 8003fb8:	1076      	asrs	r6, r6, #1
 8003fba:	3708      	adds	r7, #8
 8003fbc:	e7a2      	b.n	8003f04 <_dtoa_r+0x2bc>
 8003fbe:	f000 809d 	beq.w	80040fc <_dtoa_r+0x4b4>
 8003fc2:	f1cb 0600 	rsb	r6, fp, #0
 8003fc6:	4b9f      	ldr	r3, [pc, #636]	; (8004244 <_dtoa_r+0x5fc>)
 8003fc8:	4f9f      	ldr	r7, [pc, #636]	; (8004248 <_dtoa_r+0x600>)
 8003fca:	f006 020f 	and.w	r2, r6, #15
 8003fce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003fda:	f7fc fb11 	bl	8000600 <__aeabi_dmul>
 8003fde:	e9cd 0100 	strd	r0, r1, [sp]
 8003fe2:	1136      	asrs	r6, r6, #4
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	2502      	movs	r5, #2
 8003fe8:	2e00      	cmp	r6, #0
 8003fea:	d17c      	bne.n	80040e6 <_dtoa_r+0x49e>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d191      	bne.n	8003f14 <_dtoa_r+0x2cc>
 8003ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8084 	beq.w	8004100 <_dtoa_r+0x4b8>
 8003ff8:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4b93      	ldr	r3, [pc, #588]	; (800424c <_dtoa_r+0x604>)
 8004000:	4640      	mov	r0, r8
 8004002:	4649      	mov	r1, r9
 8004004:	f7fc fd6e 	bl	8000ae4 <__aeabi_dcmplt>
 8004008:	2800      	cmp	r0, #0
 800400a:	d079      	beq.n	8004100 <_dtoa_r+0x4b8>
 800400c:	9b03      	ldr	r3, [sp, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d076      	beq.n	8004100 <_dtoa_r+0x4b8>
 8004012:	9b04      	ldr	r3, [sp, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	dd34      	ble.n	8004082 <_dtoa_r+0x43a>
 8004018:	2200      	movs	r2, #0
 800401a:	4b8d      	ldr	r3, [pc, #564]	; (8004250 <_dtoa_r+0x608>)
 800401c:	4640      	mov	r0, r8
 800401e:	4649      	mov	r1, r9
 8004020:	f7fc faee 	bl	8000600 <__aeabi_dmul>
 8004024:	e9cd 0100 	strd	r0, r1, [sp]
 8004028:	9e04      	ldr	r6, [sp, #16]
 800402a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800402e:	3501      	adds	r5, #1
 8004030:	4628      	mov	r0, r5
 8004032:	f7fc fa7f 	bl	8000534 <__aeabi_i2d>
 8004036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800403a:	f7fc fae1 	bl	8000600 <__aeabi_dmul>
 800403e:	2200      	movs	r2, #0
 8004040:	4b84      	ldr	r3, [pc, #528]	; (8004254 <_dtoa_r+0x60c>)
 8004042:	f7fc f92b 	bl	800029c <__adddf3>
 8004046:	4680      	mov	r8, r0
 8004048:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800404c:	2e00      	cmp	r6, #0
 800404e:	d15a      	bne.n	8004106 <_dtoa_r+0x4be>
 8004050:	2200      	movs	r2, #0
 8004052:	4b81      	ldr	r3, [pc, #516]	; (8004258 <_dtoa_r+0x610>)
 8004054:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004058:	f7fc f91e 	bl	8000298 <__aeabi_dsub>
 800405c:	4642      	mov	r2, r8
 800405e:	464b      	mov	r3, r9
 8004060:	e9cd 0100 	strd	r0, r1, [sp]
 8004064:	f7fc fd5c 	bl	8000b20 <__aeabi_dcmpgt>
 8004068:	2800      	cmp	r0, #0
 800406a:	f040 829b 	bne.w	80045a4 <_dtoa_r+0x95c>
 800406e:	4642      	mov	r2, r8
 8004070:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004074:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004078:	f7fc fd34 	bl	8000ae4 <__aeabi_dcmplt>
 800407c:	2800      	cmp	r0, #0
 800407e:	f040 828f 	bne.w	80045a0 <_dtoa_r+0x958>
 8004082:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004086:	e9cd 2300 	strd	r2, r3, [sp]
 800408a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800408c:	2b00      	cmp	r3, #0
 800408e:	f2c0 8150 	blt.w	8004332 <_dtoa_r+0x6ea>
 8004092:	f1bb 0f0e 	cmp.w	fp, #14
 8004096:	f300 814c 	bgt.w	8004332 <_dtoa_r+0x6ea>
 800409a:	4b6a      	ldr	r3, [pc, #424]	; (8004244 <_dtoa_r+0x5fc>)
 800409c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80040a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80040a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f280 80da 	bge.w	8004260 <_dtoa_r+0x618>
 80040ac:	9b03      	ldr	r3, [sp, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f300 80d6 	bgt.w	8004260 <_dtoa_r+0x618>
 80040b4:	f040 8273 	bne.w	800459e <_dtoa_r+0x956>
 80040b8:	2200      	movs	r2, #0
 80040ba:	4b67      	ldr	r3, [pc, #412]	; (8004258 <_dtoa_r+0x610>)
 80040bc:	4640      	mov	r0, r8
 80040be:	4649      	mov	r1, r9
 80040c0:	f7fc fa9e 	bl	8000600 <__aeabi_dmul>
 80040c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040c8:	f7fc fd20 	bl	8000b0c <__aeabi_dcmpge>
 80040cc:	9e03      	ldr	r6, [sp, #12]
 80040ce:	4637      	mov	r7, r6
 80040d0:	2800      	cmp	r0, #0
 80040d2:	f040 824a 	bne.w	800456a <_dtoa_r+0x922>
 80040d6:	9b02      	ldr	r3, [sp, #8]
 80040d8:	9a02      	ldr	r2, [sp, #8]
 80040da:	1c5d      	adds	r5, r3, #1
 80040dc:	2331      	movs	r3, #49	; 0x31
 80040de:	7013      	strb	r3, [r2, #0]
 80040e0:	f10b 0b01 	add.w	fp, fp, #1
 80040e4:	e245      	b.n	8004572 <_dtoa_r+0x92a>
 80040e6:	07f2      	lsls	r2, r6, #31
 80040e8:	d505      	bpl.n	80040f6 <_dtoa_r+0x4ae>
 80040ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ee:	f7fc fa87 	bl	8000600 <__aeabi_dmul>
 80040f2:	3501      	adds	r5, #1
 80040f4:	2301      	movs	r3, #1
 80040f6:	1076      	asrs	r6, r6, #1
 80040f8:	3708      	adds	r7, #8
 80040fa:	e775      	b.n	8003fe8 <_dtoa_r+0x3a0>
 80040fc:	2502      	movs	r5, #2
 80040fe:	e777      	b.n	8003ff0 <_dtoa_r+0x3a8>
 8004100:	465f      	mov	r7, fp
 8004102:	9e03      	ldr	r6, [sp, #12]
 8004104:	e794      	b.n	8004030 <_dtoa_r+0x3e8>
 8004106:	9a02      	ldr	r2, [sp, #8]
 8004108:	4b4e      	ldr	r3, [pc, #312]	; (8004244 <_dtoa_r+0x5fc>)
 800410a:	4432      	add	r2, r6
 800410c:	9213      	str	r2, [sp, #76]	; 0x4c
 800410e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004110:	1e71      	subs	r1, r6, #1
 8004112:	2a00      	cmp	r2, #0
 8004114:	d048      	beq.n	80041a8 <_dtoa_r+0x560>
 8004116:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	2000      	movs	r0, #0
 8004120:	494e      	ldr	r1, [pc, #312]	; (800425c <_dtoa_r+0x614>)
 8004122:	f7fc fb97 	bl	8000854 <__aeabi_ddiv>
 8004126:	4642      	mov	r2, r8
 8004128:	464b      	mov	r3, r9
 800412a:	f7fc f8b5 	bl	8000298 <__aeabi_dsub>
 800412e:	9d02      	ldr	r5, [sp, #8]
 8004130:	4680      	mov	r8, r0
 8004132:	4689      	mov	r9, r1
 8004134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004138:	f7fc fd12 	bl	8000b60 <__aeabi_d2iz>
 800413c:	4606      	mov	r6, r0
 800413e:	f7fc f9f9 	bl	8000534 <__aeabi_i2d>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	e9dd 0100 	ldrd	r0, r1, [sp]
 800414a:	f7fc f8a5 	bl	8000298 <__aeabi_dsub>
 800414e:	3630      	adds	r6, #48	; 0x30
 8004150:	f805 6b01 	strb.w	r6, [r5], #1
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	e9cd 0100 	strd	r0, r1, [sp]
 800415c:	f7fc fcc2 	bl	8000ae4 <__aeabi_dcmplt>
 8004160:	2800      	cmp	r0, #0
 8004162:	d165      	bne.n	8004230 <_dtoa_r+0x5e8>
 8004164:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004168:	2000      	movs	r0, #0
 800416a:	4938      	ldr	r1, [pc, #224]	; (800424c <_dtoa_r+0x604>)
 800416c:	f7fc f894 	bl	8000298 <__aeabi_dsub>
 8004170:	4642      	mov	r2, r8
 8004172:	464b      	mov	r3, r9
 8004174:	f7fc fcb6 	bl	8000ae4 <__aeabi_dcmplt>
 8004178:	2800      	cmp	r0, #0
 800417a:	f040 80ba 	bne.w	80042f2 <_dtoa_r+0x6aa>
 800417e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004180:	429d      	cmp	r5, r3
 8004182:	f43f af7e 	beq.w	8004082 <_dtoa_r+0x43a>
 8004186:	2200      	movs	r2, #0
 8004188:	4b31      	ldr	r3, [pc, #196]	; (8004250 <_dtoa_r+0x608>)
 800418a:	4640      	mov	r0, r8
 800418c:	4649      	mov	r1, r9
 800418e:	f7fc fa37 	bl	8000600 <__aeabi_dmul>
 8004192:	2200      	movs	r2, #0
 8004194:	4680      	mov	r8, r0
 8004196:	4689      	mov	r9, r1
 8004198:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <_dtoa_r+0x608>)
 800419a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800419e:	f7fc fa2f 	bl	8000600 <__aeabi_dmul>
 80041a2:	e9cd 0100 	strd	r0, r1, [sp]
 80041a6:	e7c5      	b.n	8004134 <_dtoa_r+0x4ec>
 80041a8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041b4:	f7fc fa24 	bl	8000600 <__aeabi_dmul>
 80041b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041bc:	9d02      	ldr	r5, [sp, #8]
 80041be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041c2:	f7fc fccd 	bl	8000b60 <__aeabi_d2iz>
 80041c6:	4606      	mov	r6, r0
 80041c8:	f7fc f9b4 	bl	8000534 <__aeabi_i2d>
 80041cc:	3630      	adds	r6, #48	; 0x30
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041d6:	f7fc f85f 	bl	8000298 <__aeabi_dsub>
 80041da:	f805 6b01 	strb.w	r6, [r5], #1
 80041de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80041e0:	42ab      	cmp	r3, r5
 80041e2:	4680      	mov	r8, r0
 80041e4:	4689      	mov	r9, r1
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	d125      	bne.n	8004238 <_dtoa_r+0x5f0>
 80041ec:	4b1b      	ldr	r3, [pc, #108]	; (800425c <_dtoa_r+0x614>)
 80041ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041f2:	f7fc f853 	bl	800029c <__adddf3>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4640      	mov	r0, r8
 80041fc:	4649      	mov	r1, r9
 80041fe:	f7fc fc8f 	bl	8000b20 <__aeabi_dcmpgt>
 8004202:	2800      	cmp	r0, #0
 8004204:	d175      	bne.n	80042f2 <_dtoa_r+0x6aa>
 8004206:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800420a:	2000      	movs	r0, #0
 800420c:	4913      	ldr	r1, [pc, #76]	; (800425c <_dtoa_r+0x614>)
 800420e:	f7fc f843 	bl	8000298 <__aeabi_dsub>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4640      	mov	r0, r8
 8004218:	4649      	mov	r1, r9
 800421a:	f7fc fc63 	bl	8000ae4 <__aeabi_dcmplt>
 800421e:	2800      	cmp	r0, #0
 8004220:	f43f af2f 	beq.w	8004082 <_dtoa_r+0x43a>
 8004224:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004228:	2b30      	cmp	r3, #48	; 0x30
 800422a:	f105 32ff 	add.w	r2, r5, #4294967295
 800422e:	d001      	beq.n	8004234 <_dtoa_r+0x5ec>
 8004230:	46bb      	mov	fp, r7
 8004232:	e04d      	b.n	80042d0 <_dtoa_r+0x688>
 8004234:	4615      	mov	r5, r2
 8004236:	e7f5      	b.n	8004224 <_dtoa_r+0x5dc>
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <_dtoa_r+0x608>)
 800423a:	f7fc f9e1 	bl	8000600 <__aeabi_dmul>
 800423e:	e9cd 0100 	strd	r0, r1, [sp]
 8004242:	e7bc      	b.n	80041be <_dtoa_r+0x576>
 8004244:	08005398 	.word	0x08005398
 8004248:	08005370 	.word	0x08005370
 800424c:	3ff00000 	.word	0x3ff00000
 8004250:	40240000 	.word	0x40240000
 8004254:	401c0000 	.word	0x401c0000
 8004258:	40140000 	.word	0x40140000
 800425c:	3fe00000 	.word	0x3fe00000
 8004260:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004264:	9d02      	ldr	r5, [sp, #8]
 8004266:	4642      	mov	r2, r8
 8004268:	464b      	mov	r3, r9
 800426a:	4630      	mov	r0, r6
 800426c:	4639      	mov	r1, r7
 800426e:	f7fc faf1 	bl	8000854 <__aeabi_ddiv>
 8004272:	f7fc fc75 	bl	8000b60 <__aeabi_d2iz>
 8004276:	9000      	str	r0, [sp, #0]
 8004278:	f7fc f95c 	bl	8000534 <__aeabi_i2d>
 800427c:	4642      	mov	r2, r8
 800427e:	464b      	mov	r3, r9
 8004280:	f7fc f9be 	bl	8000600 <__aeabi_dmul>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4630      	mov	r0, r6
 800428a:	4639      	mov	r1, r7
 800428c:	f7fc f804 	bl	8000298 <__aeabi_dsub>
 8004290:	9e00      	ldr	r6, [sp, #0]
 8004292:	9f03      	ldr	r7, [sp, #12]
 8004294:	3630      	adds	r6, #48	; 0x30
 8004296:	f805 6b01 	strb.w	r6, [r5], #1
 800429a:	9e02      	ldr	r6, [sp, #8]
 800429c:	1bae      	subs	r6, r5, r6
 800429e:	42b7      	cmp	r7, r6
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	d138      	bne.n	8004318 <_dtoa_r+0x6d0>
 80042a6:	f7fb fff9 	bl	800029c <__adddf3>
 80042aa:	4606      	mov	r6, r0
 80042ac:	460f      	mov	r7, r1
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4640      	mov	r0, r8
 80042b4:	4649      	mov	r1, r9
 80042b6:	f7fc fc15 	bl	8000ae4 <__aeabi_dcmplt>
 80042ba:	b9c8      	cbnz	r0, 80042f0 <_dtoa_r+0x6a8>
 80042bc:	4632      	mov	r2, r6
 80042be:	463b      	mov	r3, r7
 80042c0:	4640      	mov	r0, r8
 80042c2:	4649      	mov	r1, r9
 80042c4:	f7fc fc04 	bl	8000ad0 <__aeabi_dcmpeq>
 80042c8:	b110      	cbz	r0, 80042d0 <_dtoa_r+0x688>
 80042ca:	9b00      	ldr	r3, [sp, #0]
 80042cc:	07db      	lsls	r3, r3, #31
 80042ce:	d40f      	bmi.n	80042f0 <_dtoa_r+0x6a8>
 80042d0:	4651      	mov	r1, sl
 80042d2:	4620      	mov	r0, r4
 80042d4:	f000 fadb 	bl	800488e <_Bfree>
 80042d8:	2300      	movs	r3, #0
 80042da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80042dc:	702b      	strb	r3, [r5, #0]
 80042de:	f10b 0301 	add.w	r3, fp, #1
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f43f acf8 	beq.w	8003cdc <_dtoa_r+0x94>
 80042ec:	601d      	str	r5, [r3, #0]
 80042ee:	e4f5      	b.n	8003cdc <_dtoa_r+0x94>
 80042f0:	465f      	mov	r7, fp
 80042f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80042f6:	2a39      	cmp	r2, #57	; 0x39
 80042f8:	f105 33ff 	add.w	r3, r5, #4294967295
 80042fc:	d106      	bne.n	800430c <_dtoa_r+0x6c4>
 80042fe:	9a02      	ldr	r2, [sp, #8]
 8004300:	429a      	cmp	r2, r3
 8004302:	d107      	bne.n	8004314 <_dtoa_r+0x6cc>
 8004304:	2330      	movs	r3, #48	; 0x30
 8004306:	7013      	strb	r3, [r2, #0]
 8004308:	3701      	adds	r7, #1
 800430a:	4613      	mov	r3, r2
 800430c:	781a      	ldrb	r2, [r3, #0]
 800430e:	3201      	adds	r2, #1
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	e78d      	b.n	8004230 <_dtoa_r+0x5e8>
 8004314:	461d      	mov	r5, r3
 8004316:	e7ec      	b.n	80042f2 <_dtoa_r+0x6aa>
 8004318:	2200      	movs	r2, #0
 800431a:	4ba4      	ldr	r3, [pc, #656]	; (80045ac <_dtoa_r+0x964>)
 800431c:	f7fc f970 	bl	8000600 <__aeabi_dmul>
 8004320:	2200      	movs	r2, #0
 8004322:	2300      	movs	r3, #0
 8004324:	4606      	mov	r6, r0
 8004326:	460f      	mov	r7, r1
 8004328:	f7fc fbd2 	bl	8000ad0 <__aeabi_dcmpeq>
 800432c:	2800      	cmp	r0, #0
 800432e:	d09a      	beq.n	8004266 <_dtoa_r+0x61e>
 8004330:	e7ce      	b.n	80042d0 <_dtoa_r+0x688>
 8004332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004334:	2a00      	cmp	r2, #0
 8004336:	f000 80cd 	beq.w	80044d4 <_dtoa_r+0x88c>
 800433a:	9a07      	ldr	r2, [sp, #28]
 800433c:	2a01      	cmp	r2, #1
 800433e:	f300 80af 	bgt.w	80044a0 <_dtoa_r+0x858>
 8004342:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004344:	2a00      	cmp	r2, #0
 8004346:	f000 80a7 	beq.w	8004498 <_dtoa_r+0x850>
 800434a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800434e:	9e08      	ldr	r6, [sp, #32]
 8004350:	9d05      	ldr	r5, [sp, #20]
 8004352:	9a05      	ldr	r2, [sp, #20]
 8004354:	441a      	add	r2, r3
 8004356:	9205      	str	r2, [sp, #20]
 8004358:	9a06      	ldr	r2, [sp, #24]
 800435a:	2101      	movs	r1, #1
 800435c:	441a      	add	r2, r3
 800435e:	4620      	mov	r0, r4
 8004360:	9206      	str	r2, [sp, #24]
 8004362:	f000 fb34 	bl	80049ce <__i2b>
 8004366:	4607      	mov	r7, r0
 8004368:	2d00      	cmp	r5, #0
 800436a:	dd0c      	ble.n	8004386 <_dtoa_r+0x73e>
 800436c:	9b06      	ldr	r3, [sp, #24]
 800436e:	2b00      	cmp	r3, #0
 8004370:	dd09      	ble.n	8004386 <_dtoa_r+0x73e>
 8004372:	42ab      	cmp	r3, r5
 8004374:	9a05      	ldr	r2, [sp, #20]
 8004376:	bfa8      	it	ge
 8004378:	462b      	movge	r3, r5
 800437a:	1ad2      	subs	r2, r2, r3
 800437c:	9205      	str	r2, [sp, #20]
 800437e:	9a06      	ldr	r2, [sp, #24]
 8004380:	1aed      	subs	r5, r5, r3
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	9306      	str	r3, [sp, #24]
 8004386:	9b08      	ldr	r3, [sp, #32]
 8004388:	b1f3      	cbz	r3, 80043c8 <_dtoa_r+0x780>
 800438a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80a5 	beq.w	80044dc <_dtoa_r+0x894>
 8004392:	2e00      	cmp	r6, #0
 8004394:	dd10      	ble.n	80043b8 <_dtoa_r+0x770>
 8004396:	4639      	mov	r1, r7
 8004398:	4632      	mov	r2, r6
 800439a:	4620      	mov	r0, r4
 800439c:	f000 fbae 	bl	8004afc <__pow5mult>
 80043a0:	4652      	mov	r2, sl
 80043a2:	4601      	mov	r1, r0
 80043a4:	4607      	mov	r7, r0
 80043a6:	4620      	mov	r0, r4
 80043a8:	f000 fb1a 	bl	80049e0 <__multiply>
 80043ac:	4651      	mov	r1, sl
 80043ae:	4680      	mov	r8, r0
 80043b0:	4620      	mov	r0, r4
 80043b2:	f000 fa6c 	bl	800488e <_Bfree>
 80043b6:	46c2      	mov	sl, r8
 80043b8:	9b08      	ldr	r3, [sp, #32]
 80043ba:	1b9a      	subs	r2, r3, r6
 80043bc:	d004      	beq.n	80043c8 <_dtoa_r+0x780>
 80043be:	4651      	mov	r1, sl
 80043c0:	4620      	mov	r0, r4
 80043c2:	f000 fb9b 	bl	8004afc <__pow5mult>
 80043c6:	4682      	mov	sl, r0
 80043c8:	2101      	movs	r1, #1
 80043ca:	4620      	mov	r0, r4
 80043cc:	f000 faff 	bl	80049ce <__i2b>
 80043d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	4606      	mov	r6, r0
 80043d6:	f340 8083 	ble.w	80044e0 <_dtoa_r+0x898>
 80043da:	461a      	mov	r2, r3
 80043dc:	4601      	mov	r1, r0
 80043de:	4620      	mov	r0, r4
 80043e0:	f000 fb8c 	bl	8004afc <__pow5mult>
 80043e4:	9b07      	ldr	r3, [sp, #28]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	4606      	mov	r6, r0
 80043ea:	dd7c      	ble.n	80044e6 <_dtoa_r+0x89e>
 80043ec:	f04f 0800 	mov.w	r8, #0
 80043f0:	6933      	ldr	r3, [r6, #16]
 80043f2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80043f6:	6918      	ldr	r0, [r3, #16]
 80043f8:	f000 fa9b 	bl	8004932 <__hi0bits>
 80043fc:	f1c0 0020 	rsb	r0, r0, #32
 8004400:	9b06      	ldr	r3, [sp, #24]
 8004402:	4418      	add	r0, r3
 8004404:	f010 001f 	ands.w	r0, r0, #31
 8004408:	f000 8096 	beq.w	8004538 <_dtoa_r+0x8f0>
 800440c:	f1c0 0320 	rsb	r3, r0, #32
 8004410:	2b04      	cmp	r3, #4
 8004412:	f340 8087 	ble.w	8004524 <_dtoa_r+0x8dc>
 8004416:	9b05      	ldr	r3, [sp, #20]
 8004418:	f1c0 001c 	rsb	r0, r0, #28
 800441c:	4403      	add	r3, r0
 800441e:	9305      	str	r3, [sp, #20]
 8004420:	9b06      	ldr	r3, [sp, #24]
 8004422:	4405      	add	r5, r0
 8004424:	4403      	add	r3, r0
 8004426:	9306      	str	r3, [sp, #24]
 8004428:	9b05      	ldr	r3, [sp, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	dd05      	ble.n	800443a <_dtoa_r+0x7f2>
 800442e:	4651      	mov	r1, sl
 8004430:	461a      	mov	r2, r3
 8004432:	4620      	mov	r0, r4
 8004434:	f000 fbb0 	bl	8004b98 <__lshift>
 8004438:	4682      	mov	sl, r0
 800443a:	9b06      	ldr	r3, [sp, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	dd05      	ble.n	800444c <_dtoa_r+0x804>
 8004440:	4631      	mov	r1, r6
 8004442:	461a      	mov	r2, r3
 8004444:	4620      	mov	r0, r4
 8004446:	f000 fba7 	bl	8004b98 <__lshift>
 800444a:	4606      	mov	r6, r0
 800444c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800444e:	2b00      	cmp	r3, #0
 8004450:	d074      	beq.n	800453c <_dtoa_r+0x8f4>
 8004452:	4631      	mov	r1, r6
 8004454:	4650      	mov	r0, sl
 8004456:	f000 fbf0 	bl	8004c3a <__mcmp>
 800445a:	2800      	cmp	r0, #0
 800445c:	da6e      	bge.n	800453c <_dtoa_r+0x8f4>
 800445e:	2300      	movs	r3, #0
 8004460:	4651      	mov	r1, sl
 8004462:	220a      	movs	r2, #10
 8004464:	4620      	mov	r0, r4
 8004466:	f000 fa29 	bl	80048bc <__multadd>
 800446a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800446c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004470:	4682      	mov	sl, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 81a8 	beq.w	80047c8 <_dtoa_r+0xb80>
 8004478:	2300      	movs	r3, #0
 800447a:	4639      	mov	r1, r7
 800447c:	220a      	movs	r2, #10
 800447e:	4620      	mov	r0, r4
 8004480:	f000 fa1c 	bl	80048bc <__multadd>
 8004484:	9b04      	ldr	r3, [sp, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	4607      	mov	r7, r0
 800448a:	f300 80c8 	bgt.w	800461e <_dtoa_r+0x9d6>
 800448e:	9b07      	ldr	r3, [sp, #28]
 8004490:	2b02      	cmp	r3, #2
 8004492:	f340 80c4 	ble.w	800461e <_dtoa_r+0x9d6>
 8004496:	e059      	b.n	800454c <_dtoa_r+0x904>
 8004498:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800449a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800449e:	e756      	b.n	800434e <_dtoa_r+0x706>
 80044a0:	9b03      	ldr	r3, [sp, #12]
 80044a2:	1e5e      	subs	r6, r3, #1
 80044a4:	9b08      	ldr	r3, [sp, #32]
 80044a6:	42b3      	cmp	r3, r6
 80044a8:	bfbf      	itttt	lt
 80044aa:	9b08      	ldrlt	r3, [sp, #32]
 80044ac:	9608      	strlt	r6, [sp, #32]
 80044ae:	1af2      	sublt	r2, r6, r3
 80044b0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80044b2:	bfb6      	itet	lt
 80044b4:	189b      	addlt	r3, r3, r2
 80044b6:	1b9e      	subge	r6, r3, r6
 80044b8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80044ba:	9b03      	ldr	r3, [sp, #12]
 80044bc:	bfb8      	it	lt
 80044be:	2600      	movlt	r6, #0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bfb9      	ittee	lt
 80044c4:	9b05      	ldrlt	r3, [sp, #20]
 80044c6:	9a03      	ldrlt	r2, [sp, #12]
 80044c8:	9d05      	ldrge	r5, [sp, #20]
 80044ca:	9b03      	ldrge	r3, [sp, #12]
 80044cc:	bfbc      	itt	lt
 80044ce:	1a9d      	sublt	r5, r3, r2
 80044d0:	2300      	movlt	r3, #0
 80044d2:	e73e      	b.n	8004352 <_dtoa_r+0x70a>
 80044d4:	9e08      	ldr	r6, [sp, #32]
 80044d6:	9d05      	ldr	r5, [sp, #20]
 80044d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80044da:	e745      	b.n	8004368 <_dtoa_r+0x720>
 80044dc:	9a08      	ldr	r2, [sp, #32]
 80044de:	e76e      	b.n	80043be <_dtoa_r+0x776>
 80044e0:	9b07      	ldr	r3, [sp, #28]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	dc19      	bgt.n	800451a <_dtoa_r+0x8d2>
 80044e6:	9b00      	ldr	r3, [sp, #0]
 80044e8:	b9bb      	cbnz	r3, 800451a <_dtoa_r+0x8d2>
 80044ea:	9b01      	ldr	r3, [sp, #4]
 80044ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044f0:	b99b      	cbnz	r3, 800451a <_dtoa_r+0x8d2>
 80044f2:	9b01      	ldr	r3, [sp, #4]
 80044f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044f8:	0d1b      	lsrs	r3, r3, #20
 80044fa:	051b      	lsls	r3, r3, #20
 80044fc:	b183      	cbz	r3, 8004520 <_dtoa_r+0x8d8>
 80044fe:	9b05      	ldr	r3, [sp, #20]
 8004500:	3301      	adds	r3, #1
 8004502:	9305      	str	r3, [sp, #20]
 8004504:	9b06      	ldr	r3, [sp, #24]
 8004506:	3301      	adds	r3, #1
 8004508:	9306      	str	r3, [sp, #24]
 800450a:	f04f 0801 	mov.w	r8, #1
 800450e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004510:	2b00      	cmp	r3, #0
 8004512:	f47f af6d 	bne.w	80043f0 <_dtoa_r+0x7a8>
 8004516:	2001      	movs	r0, #1
 8004518:	e772      	b.n	8004400 <_dtoa_r+0x7b8>
 800451a:	f04f 0800 	mov.w	r8, #0
 800451e:	e7f6      	b.n	800450e <_dtoa_r+0x8c6>
 8004520:	4698      	mov	r8, r3
 8004522:	e7f4      	b.n	800450e <_dtoa_r+0x8c6>
 8004524:	d080      	beq.n	8004428 <_dtoa_r+0x7e0>
 8004526:	9a05      	ldr	r2, [sp, #20]
 8004528:	331c      	adds	r3, #28
 800452a:	441a      	add	r2, r3
 800452c:	9205      	str	r2, [sp, #20]
 800452e:	9a06      	ldr	r2, [sp, #24]
 8004530:	441a      	add	r2, r3
 8004532:	441d      	add	r5, r3
 8004534:	4613      	mov	r3, r2
 8004536:	e776      	b.n	8004426 <_dtoa_r+0x7de>
 8004538:	4603      	mov	r3, r0
 800453a:	e7f4      	b.n	8004526 <_dtoa_r+0x8de>
 800453c:	9b03      	ldr	r3, [sp, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	dc36      	bgt.n	80045b0 <_dtoa_r+0x968>
 8004542:	9b07      	ldr	r3, [sp, #28]
 8004544:	2b02      	cmp	r3, #2
 8004546:	dd33      	ble.n	80045b0 <_dtoa_r+0x968>
 8004548:	9b03      	ldr	r3, [sp, #12]
 800454a:	9304      	str	r3, [sp, #16]
 800454c:	9b04      	ldr	r3, [sp, #16]
 800454e:	b963      	cbnz	r3, 800456a <_dtoa_r+0x922>
 8004550:	4631      	mov	r1, r6
 8004552:	2205      	movs	r2, #5
 8004554:	4620      	mov	r0, r4
 8004556:	f000 f9b1 	bl	80048bc <__multadd>
 800455a:	4601      	mov	r1, r0
 800455c:	4606      	mov	r6, r0
 800455e:	4650      	mov	r0, sl
 8004560:	f000 fb6b 	bl	8004c3a <__mcmp>
 8004564:	2800      	cmp	r0, #0
 8004566:	f73f adb6 	bgt.w	80040d6 <_dtoa_r+0x48e>
 800456a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800456c:	9d02      	ldr	r5, [sp, #8]
 800456e:	ea6f 0b03 	mvn.w	fp, r3
 8004572:	2300      	movs	r3, #0
 8004574:	9303      	str	r3, [sp, #12]
 8004576:	4631      	mov	r1, r6
 8004578:	4620      	mov	r0, r4
 800457a:	f000 f988 	bl	800488e <_Bfree>
 800457e:	2f00      	cmp	r7, #0
 8004580:	f43f aea6 	beq.w	80042d0 <_dtoa_r+0x688>
 8004584:	9b03      	ldr	r3, [sp, #12]
 8004586:	b12b      	cbz	r3, 8004594 <_dtoa_r+0x94c>
 8004588:	42bb      	cmp	r3, r7
 800458a:	d003      	beq.n	8004594 <_dtoa_r+0x94c>
 800458c:	4619      	mov	r1, r3
 800458e:	4620      	mov	r0, r4
 8004590:	f000 f97d 	bl	800488e <_Bfree>
 8004594:	4639      	mov	r1, r7
 8004596:	4620      	mov	r0, r4
 8004598:	f000 f979 	bl	800488e <_Bfree>
 800459c:	e698      	b.n	80042d0 <_dtoa_r+0x688>
 800459e:	2600      	movs	r6, #0
 80045a0:	4637      	mov	r7, r6
 80045a2:	e7e2      	b.n	800456a <_dtoa_r+0x922>
 80045a4:	46bb      	mov	fp, r7
 80045a6:	4637      	mov	r7, r6
 80045a8:	e595      	b.n	80040d6 <_dtoa_r+0x48e>
 80045aa:	bf00      	nop
 80045ac:	40240000 	.word	0x40240000
 80045b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b2:	bb93      	cbnz	r3, 800461a <_dtoa_r+0x9d2>
 80045b4:	9b03      	ldr	r3, [sp, #12]
 80045b6:	9304      	str	r3, [sp, #16]
 80045b8:	9d02      	ldr	r5, [sp, #8]
 80045ba:	4631      	mov	r1, r6
 80045bc:	4650      	mov	r0, sl
 80045be:	f7ff fab5 	bl	8003b2c <quorem>
 80045c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80045c6:	f805 9b01 	strb.w	r9, [r5], #1
 80045ca:	9b02      	ldr	r3, [sp, #8]
 80045cc:	9a04      	ldr	r2, [sp, #16]
 80045ce:	1aeb      	subs	r3, r5, r3
 80045d0:	429a      	cmp	r2, r3
 80045d2:	f300 80dc 	bgt.w	800478e <_dtoa_r+0xb46>
 80045d6:	9b02      	ldr	r3, [sp, #8]
 80045d8:	2a01      	cmp	r2, #1
 80045da:	bfac      	ite	ge
 80045dc:	189b      	addge	r3, r3, r2
 80045de:	3301      	addlt	r3, #1
 80045e0:	4698      	mov	r8, r3
 80045e2:	2300      	movs	r3, #0
 80045e4:	9303      	str	r3, [sp, #12]
 80045e6:	4651      	mov	r1, sl
 80045e8:	2201      	movs	r2, #1
 80045ea:	4620      	mov	r0, r4
 80045ec:	f000 fad4 	bl	8004b98 <__lshift>
 80045f0:	4631      	mov	r1, r6
 80045f2:	4682      	mov	sl, r0
 80045f4:	f000 fb21 	bl	8004c3a <__mcmp>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	f300 808d 	bgt.w	8004718 <_dtoa_r+0xad0>
 80045fe:	d103      	bne.n	8004608 <_dtoa_r+0x9c0>
 8004600:	f019 0f01 	tst.w	r9, #1
 8004604:	f040 8088 	bne.w	8004718 <_dtoa_r+0xad0>
 8004608:	4645      	mov	r5, r8
 800460a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800460e:	2b30      	cmp	r3, #48	; 0x30
 8004610:	f105 32ff 	add.w	r2, r5, #4294967295
 8004614:	d1af      	bne.n	8004576 <_dtoa_r+0x92e>
 8004616:	4615      	mov	r5, r2
 8004618:	e7f7      	b.n	800460a <_dtoa_r+0x9c2>
 800461a:	9b03      	ldr	r3, [sp, #12]
 800461c:	9304      	str	r3, [sp, #16]
 800461e:	2d00      	cmp	r5, #0
 8004620:	dd05      	ble.n	800462e <_dtoa_r+0x9e6>
 8004622:	4639      	mov	r1, r7
 8004624:	462a      	mov	r2, r5
 8004626:	4620      	mov	r0, r4
 8004628:	f000 fab6 	bl	8004b98 <__lshift>
 800462c:	4607      	mov	r7, r0
 800462e:	f1b8 0f00 	cmp.w	r8, #0
 8004632:	d04c      	beq.n	80046ce <_dtoa_r+0xa86>
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4620      	mov	r0, r4
 8004638:	f000 f8f5 	bl	8004826 <_Balloc>
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	3202      	adds	r2, #2
 8004640:	4605      	mov	r5, r0
 8004642:	0092      	lsls	r2, r2, #2
 8004644:	f107 010c 	add.w	r1, r7, #12
 8004648:	300c      	adds	r0, #12
 800464a:	f000 f8e1 	bl	8004810 <memcpy>
 800464e:	2201      	movs	r2, #1
 8004650:	4629      	mov	r1, r5
 8004652:	4620      	mov	r0, r4
 8004654:	f000 faa0 	bl	8004b98 <__lshift>
 8004658:	9b00      	ldr	r3, [sp, #0]
 800465a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800465e:	9703      	str	r7, [sp, #12]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	4607      	mov	r7, r0
 8004666:	9305      	str	r3, [sp, #20]
 8004668:	4631      	mov	r1, r6
 800466a:	4650      	mov	r0, sl
 800466c:	f7ff fa5e 	bl	8003b2c <quorem>
 8004670:	9903      	ldr	r1, [sp, #12]
 8004672:	4605      	mov	r5, r0
 8004674:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004678:	4650      	mov	r0, sl
 800467a:	f000 fade 	bl	8004c3a <__mcmp>
 800467e:	463a      	mov	r2, r7
 8004680:	9000      	str	r0, [sp, #0]
 8004682:	4631      	mov	r1, r6
 8004684:	4620      	mov	r0, r4
 8004686:	f000 faf2 	bl	8004c6e <__mdiff>
 800468a:	68c3      	ldr	r3, [r0, #12]
 800468c:	4602      	mov	r2, r0
 800468e:	bb03      	cbnz	r3, 80046d2 <_dtoa_r+0xa8a>
 8004690:	4601      	mov	r1, r0
 8004692:	9006      	str	r0, [sp, #24]
 8004694:	4650      	mov	r0, sl
 8004696:	f000 fad0 	bl	8004c3a <__mcmp>
 800469a:	9a06      	ldr	r2, [sp, #24]
 800469c:	4603      	mov	r3, r0
 800469e:	4611      	mov	r1, r2
 80046a0:	4620      	mov	r0, r4
 80046a2:	9306      	str	r3, [sp, #24]
 80046a4:	f000 f8f3 	bl	800488e <_Bfree>
 80046a8:	9b06      	ldr	r3, [sp, #24]
 80046aa:	b9a3      	cbnz	r3, 80046d6 <_dtoa_r+0xa8e>
 80046ac:	9a07      	ldr	r2, [sp, #28]
 80046ae:	b992      	cbnz	r2, 80046d6 <_dtoa_r+0xa8e>
 80046b0:	9a05      	ldr	r2, [sp, #20]
 80046b2:	b982      	cbnz	r2, 80046d6 <_dtoa_r+0xa8e>
 80046b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80046b8:	d029      	beq.n	800470e <_dtoa_r+0xac6>
 80046ba:	9b00      	ldr	r3, [sp, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	dd01      	ble.n	80046c4 <_dtoa_r+0xa7c>
 80046c0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80046c4:	f108 0501 	add.w	r5, r8, #1
 80046c8:	f888 9000 	strb.w	r9, [r8]
 80046cc:	e753      	b.n	8004576 <_dtoa_r+0x92e>
 80046ce:	4638      	mov	r0, r7
 80046d0:	e7c2      	b.n	8004658 <_dtoa_r+0xa10>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e7e3      	b.n	800469e <_dtoa_r+0xa56>
 80046d6:	9a00      	ldr	r2, [sp, #0]
 80046d8:	2a00      	cmp	r2, #0
 80046da:	db04      	blt.n	80046e6 <_dtoa_r+0xa9e>
 80046dc:	d125      	bne.n	800472a <_dtoa_r+0xae2>
 80046de:	9a07      	ldr	r2, [sp, #28]
 80046e0:	bb1a      	cbnz	r2, 800472a <_dtoa_r+0xae2>
 80046e2:	9a05      	ldr	r2, [sp, #20]
 80046e4:	bb0a      	cbnz	r2, 800472a <_dtoa_r+0xae2>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	ddec      	ble.n	80046c4 <_dtoa_r+0xa7c>
 80046ea:	4651      	mov	r1, sl
 80046ec:	2201      	movs	r2, #1
 80046ee:	4620      	mov	r0, r4
 80046f0:	f000 fa52 	bl	8004b98 <__lshift>
 80046f4:	4631      	mov	r1, r6
 80046f6:	4682      	mov	sl, r0
 80046f8:	f000 fa9f 	bl	8004c3a <__mcmp>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	dc03      	bgt.n	8004708 <_dtoa_r+0xac0>
 8004700:	d1e0      	bne.n	80046c4 <_dtoa_r+0xa7c>
 8004702:	f019 0f01 	tst.w	r9, #1
 8004706:	d0dd      	beq.n	80046c4 <_dtoa_r+0xa7c>
 8004708:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800470c:	d1d8      	bne.n	80046c0 <_dtoa_r+0xa78>
 800470e:	2339      	movs	r3, #57	; 0x39
 8004710:	f888 3000 	strb.w	r3, [r8]
 8004714:	f108 0801 	add.w	r8, r8, #1
 8004718:	4645      	mov	r5, r8
 800471a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800471e:	2b39      	cmp	r3, #57	; 0x39
 8004720:	f105 32ff 	add.w	r2, r5, #4294967295
 8004724:	d03b      	beq.n	800479e <_dtoa_r+0xb56>
 8004726:	3301      	adds	r3, #1
 8004728:	e040      	b.n	80047ac <_dtoa_r+0xb64>
 800472a:	2b00      	cmp	r3, #0
 800472c:	f108 0501 	add.w	r5, r8, #1
 8004730:	dd05      	ble.n	800473e <_dtoa_r+0xaf6>
 8004732:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004736:	d0ea      	beq.n	800470e <_dtoa_r+0xac6>
 8004738:	f109 0901 	add.w	r9, r9, #1
 800473c:	e7c4      	b.n	80046c8 <_dtoa_r+0xa80>
 800473e:	9b02      	ldr	r3, [sp, #8]
 8004740:	9a04      	ldr	r2, [sp, #16]
 8004742:	f805 9c01 	strb.w	r9, [r5, #-1]
 8004746:	1aeb      	subs	r3, r5, r3
 8004748:	4293      	cmp	r3, r2
 800474a:	46a8      	mov	r8, r5
 800474c:	f43f af4b 	beq.w	80045e6 <_dtoa_r+0x99e>
 8004750:	4651      	mov	r1, sl
 8004752:	2300      	movs	r3, #0
 8004754:	220a      	movs	r2, #10
 8004756:	4620      	mov	r0, r4
 8004758:	f000 f8b0 	bl	80048bc <__multadd>
 800475c:	9b03      	ldr	r3, [sp, #12]
 800475e:	9903      	ldr	r1, [sp, #12]
 8004760:	42bb      	cmp	r3, r7
 8004762:	4682      	mov	sl, r0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	f04f 020a 	mov.w	r2, #10
 800476c:	4620      	mov	r0, r4
 800476e:	d104      	bne.n	800477a <_dtoa_r+0xb32>
 8004770:	f000 f8a4 	bl	80048bc <__multadd>
 8004774:	9003      	str	r0, [sp, #12]
 8004776:	4607      	mov	r7, r0
 8004778:	e776      	b.n	8004668 <_dtoa_r+0xa20>
 800477a:	f000 f89f 	bl	80048bc <__multadd>
 800477e:	2300      	movs	r3, #0
 8004780:	9003      	str	r0, [sp, #12]
 8004782:	220a      	movs	r2, #10
 8004784:	4639      	mov	r1, r7
 8004786:	4620      	mov	r0, r4
 8004788:	f000 f898 	bl	80048bc <__multadd>
 800478c:	e7f3      	b.n	8004776 <_dtoa_r+0xb2e>
 800478e:	4651      	mov	r1, sl
 8004790:	2300      	movs	r3, #0
 8004792:	220a      	movs	r2, #10
 8004794:	4620      	mov	r0, r4
 8004796:	f000 f891 	bl	80048bc <__multadd>
 800479a:	4682      	mov	sl, r0
 800479c:	e70d      	b.n	80045ba <_dtoa_r+0x972>
 800479e:	9b02      	ldr	r3, [sp, #8]
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d105      	bne.n	80047b0 <_dtoa_r+0xb68>
 80047a4:	9a02      	ldr	r2, [sp, #8]
 80047a6:	f10b 0b01 	add.w	fp, fp, #1
 80047aa:	2331      	movs	r3, #49	; 0x31
 80047ac:	7013      	strb	r3, [r2, #0]
 80047ae:	e6e2      	b.n	8004576 <_dtoa_r+0x92e>
 80047b0:	4615      	mov	r5, r2
 80047b2:	e7b2      	b.n	800471a <_dtoa_r+0xad2>
 80047b4:	4b09      	ldr	r3, [pc, #36]	; (80047dc <_dtoa_r+0xb94>)
 80047b6:	f7ff baae 	b.w	8003d16 <_dtoa_r+0xce>
 80047ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f47f aa88 	bne.w	8003cd2 <_dtoa_r+0x8a>
 80047c2:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <_dtoa_r+0xb98>)
 80047c4:	f7ff baa7 	b.w	8003d16 <_dtoa_r+0xce>
 80047c8:	9b04      	ldr	r3, [sp, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f73f aef4 	bgt.w	80045b8 <_dtoa_r+0x970>
 80047d0:	9b07      	ldr	r3, [sp, #28]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	f77f aef0 	ble.w	80045b8 <_dtoa_r+0x970>
 80047d8:	e6b8      	b.n	800454c <_dtoa_r+0x904>
 80047da:	bf00      	nop
 80047dc:	0800533b 	.word	0x0800533b
 80047e0:	0800535f 	.word	0x0800535f

080047e4 <_localeconv_r>:
 80047e4:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <_localeconv_r+0x14>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6a18      	ldr	r0, [r3, #32]
 80047ea:	4b04      	ldr	r3, [pc, #16]	; (80047fc <_localeconv_r+0x18>)
 80047ec:	2800      	cmp	r0, #0
 80047ee:	bf08      	it	eq
 80047f0:	4618      	moveq	r0, r3
 80047f2:	30f0      	adds	r0, #240	; 0xf0
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	2000000c 	.word	0x2000000c
 80047fc:	20000070 	.word	0x20000070

08004800 <malloc>:
 8004800:	4b02      	ldr	r3, [pc, #8]	; (800480c <malloc+0xc>)
 8004802:	4601      	mov	r1, r0
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	f000 bb3b 	b.w	8004e80 <_malloc_r>
 800480a:	bf00      	nop
 800480c:	2000000c 	.word	0x2000000c

08004810 <memcpy>:
 8004810:	b510      	push	{r4, lr}
 8004812:	1e43      	subs	r3, r0, #1
 8004814:	440a      	add	r2, r1
 8004816:	4291      	cmp	r1, r2
 8004818:	d100      	bne.n	800481c <memcpy+0xc>
 800481a:	bd10      	pop	{r4, pc}
 800481c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004820:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004824:	e7f7      	b.n	8004816 <memcpy+0x6>

08004826 <_Balloc>:
 8004826:	b570      	push	{r4, r5, r6, lr}
 8004828:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800482a:	4604      	mov	r4, r0
 800482c:	460e      	mov	r6, r1
 800482e:	b93d      	cbnz	r5, 8004840 <_Balloc+0x1a>
 8004830:	2010      	movs	r0, #16
 8004832:	f7ff ffe5 	bl	8004800 <malloc>
 8004836:	6260      	str	r0, [r4, #36]	; 0x24
 8004838:	6045      	str	r5, [r0, #4]
 800483a:	6085      	str	r5, [r0, #8]
 800483c:	6005      	str	r5, [r0, #0]
 800483e:	60c5      	str	r5, [r0, #12]
 8004840:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004842:	68eb      	ldr	r3, [r5, #12]
 8004844:	b183      	cbz	r3, 8004868 <_Balloc+0x42>
 8004846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800484e:	b9b8      	cbnz	r0, 8004880 <_Balloc+0x5a>
 8004850:	2101      	movs	r1, #1
 8004852:	fa01 f506 	lsl.w	r5, r1, r6
 8004856:	1d6a      	adds	r2, r5, #5
 8004858:	0092      	lsls	r2, r2, #2
 800485a:	4620      	mov	r0, r4
 800485c:	f000 fab4 	bl	8004dc8 <_calloc_r>
 8004860:	b160      	cbz	r0, 800487c <_Balloc+0x56>
 8004862:	6046      	str	r6, [r0, #4]
 8004864:	6085      	str	r5, [r0, #8]
 8004866:	e00e      	b.n	8004886 <_Balloc+0x60>
 8004868:	2221      	movs	r2, #33	; 0x21
 800486a:	2104      	movs	r1, #4
 800486c:	4620      	mov	r0, r4
 800486e:	f000 faab 	bl	8004dc8 <_calloc_r>
 8004872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004874:	60e8      	str	r0, [r5, #12]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e4      	bne.n	8004846 <_Balloc+0x20>
 800487c:	2000      	movs	r0, #0
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	6802      	ldr	r2, [r0, #0]
 8004882:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004886:	2300      	movs	r3, #0
 8004888:	6103      	str	r3, [r0, #16]
 800488a:	60c3      	str	r3, [r0, #12]
 800488c:	bd70      	pop	{r4, r5, r6, pc}

0800488e <_Bfree>:
 800488e:	b570      	push	{r4, r5, r6, lr}
 8004890:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004892:	4606      	mov	r6, r0
 8004894:	460d      	mov	r5, r1
 8004896:	b93c      	cbnz	r4, 80048a8 <_Bfree+0x1a>
 8004898:	2010      	movs	r0, #16
 800489a:	f7ff ffb1 	bl	8004800 <malloc>
 800489e:	6270      	str	r0, [r6, #36]	; 0x24
 80048a0:	6044      	str	r4, [r0, #4]
 80048a2:	6084      	str	r4, [r0, #8]
 80048a4:	6004      	str	r4, [r0, #0]
 80048a6:	60c4      	str	r4, [r0, #12]
 80048a8:	b13d      	cbz	r5, 80048ba <_Bfree+0x2c>
 80048aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80048ac:	686a      	ldr	r2, [r5, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048b4:	6029      	str	r1, [r5, #0]
 80048b6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80048ba:	bd70      	pop	{r4, r5, r6, pc}

080048bc <__multadd>:
 80048bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c0:	690d      	ldr	r5, [r1, #16]
 80048c2:	461f      	mov	r7, r3
 80048c4:	4606      	mov	r6, r0
 80048c6:	460c      	mov	r4, r1
 80048c8:	f101 0e14 	add.w	lr, r1, #20
 80048cc:	2300      	movs	r3, #0
 80048ce:	f8de 0000 	ldr.w	r0, [lr]
 80048d2:	b281      	uxth	r1, r0
 80048d4:	fb02 7101 	mla	r1, r2, r1, r7
 80048d8:	0c0f      	lsrs	r7, r1, #16
 80048da:	0c00      	lsrs	r0, r0, #16
 80048dc:	fb02 7000 	mla	r0, r2, r0, r7
 80048e0:	b289      	uxth	r1, r1
 80048e2:	3301      	adds	r3, #1
 80048e4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80048e8:	429d      	cmp	r5, r3
 80048ea:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80048ee:	f84e 1b04 	str.w	r1, [lr], #4
 80048f2:	dcec      	bgt.n	80048ce <__multadd+0x12>
 80048f4:	b1d7      	cbz	r7, 800492c <__multadd+0x70>
 80048f6:	68a3      	ldr	r3, [r4, #8]
 80048f8:	429d      	cmp	r5, r3
 80048fa:	db12      	blt.n	8004922 <__multadd+0x66>
 80048fc:	6861      	ldr	r1, [r4, #4]
 80048fe:	4630      	mov	r0, r6
 8004900:	3101      	adds	r1, #1
 8004902:	f7ff ff90 	bl	8004826 <_Balloc>
 8004906:	6922      	ldr	r2, [r4, #16]
 8004908:	3202      	adds	r2, #2
 800490a:	f104 010c 	add.w	r1, r4, #12
 800490e:	4680      	mov	r8, r0
 8004910:	0092      	lsls	r2, r2, #2
 8004912:	300c      	adds	r0, #12
 8004914:	f7ff ff7c 	bl	8004810 <memcpy>
 8004918:	4621      	mov	r1, r4
 800491a:	4630      	mov	r0, r6
 800491c:	f7ff ffb7 	bl	800488e <_Bfree>
 8004920:	4644      	mov	r4, r8
 8004922:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004926:	3501      	adds	r5, #1
 8004928:	615f      	str	r7, [r3, #20]
 800492a:	6125      	str	r5, [r4, #16]
 800492c:	4620      	mov	r0, r4
 800492e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004932 <__hi0bits>:
 8004932:	0c02      	lsrs	r2, r0, #16
 8004934:	0412      	lsls	r2, r2, #16
 8004936:	4603      	mov	r3, r0
 8004938:	b9b2      	cbnz	r2, 8004968 <__hi0bits+0x36>
 800493a:	0403      	lsls	r3, r0, #16
 800493c:	2010      	movs	r0, #16
 800493e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004942:	bf04      	itt	eq
 8004944:	021b      	lsleq	r3, r3, #8
 8004946:	3008      	addeq	r0, #8
 8004948:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800494c:	bf04      	itt	eq
 800494e:	011b      	lsleq	r3, r3, #4
 8004950:	3004      	addeq	r0, #4
 8004952:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004956:	bf04      	itt	eq
 8004958:	009b      	lsleq	r3, r3, #2
 800495a:	3002      	addeq	r0, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	db06      	blt.n	800496e <__hi0bits+0x3c>
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	d503      	bpl.n	800496c <__hi0bits+0x3a>
 8004964:	3001      	adds	r0, #1
 8004966:	4770      	bx	lr
 8004968:	2000      	movs	r0, #0
 800496a:	e7e8      	b.n	800493e <__hi0bits+0xc>
 800496c:	2020      	movs	r0, #32
 800496e:	4770      	bx	lr

08004970 <__lo0bits>:
 8004970:	6803      	ldr	r3, [r0, #0]
 8004972:	f013 0207 	ands.w	r2, r3, #7
 8004976:	4601      	mov	r1, r0
 8004978:	d00b      	beq.n	8004992 <__lo0bits+0x22>
 800497a:	07da      	lsls	r2, r3, #31
 800497c:	d423      	bmi.n	80049c6 <__lo0bits+0x56>
 800497e:	0798      	lsls	r0, r3, #30
 8004980:	bf49      	itett	mi
 8004982:	085b      	lsrmi	r3, r3, #1
 8004984:	089b      	lsrpl	r3, r3, #2
 8004986:	2001      	movmi	r0, #1
 8004988:	600b      	strmi	r3, [r1, #0]
 800498a:	bf5c      	itt	pl
 800498c:	600b      	strpl	r3, [r1, #0]
 800498e:	2002      	movpl	r0, #2
 8004990:	4770      	bx	lr
 8004992:	b298      	uxth	r0, r3
 8004994:	b9a8      	cbnz	r0, 80049c2 <__lo0bits+0x52>
 8004996:	0c1b      	lsrs	r3, r3, #16
 8004998:	2010      	movs	r0, #16
 800499a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800499e:	bf04      	itt	eq
 80049a0:	0a1b      	lsreq	r3, r3, #8
 80049a2:	3008      	addeq	r0, #8
 80049a4:	071a      	lsls	r2, r3, #28
 80049a6:	bf04      	itt	eq
 80049a8:	091b      	lsreq	r3, r3, #4
 80049aa:	3004      	addeq	r0, #4
 80049ac:	079a      	lsls	r2, r3, #30
 80049ae:	bf04      	itt	eq
 80049b0:	089b      	lsreq	r3, r3, #2
 80049b2:	3002      	addeq	r0, #2
 80049b4:	07da      	lsls	r2, r3, #31
 80049b6:	d402      	bmi.n	80049be <__lo0bits+0x4e>
 80049b8:	085b      	lsrs	r3, r3, #1
 80049ba:	d006      	beq.n	80049ca <__lo0bits+0x5a>
 80049bc:	3001      	adds	r0, #1
 80049be:	600b      	str	r3, [r1, #0]
 80049c0:	4770      	bx	lr
 80049c2:	4610      	mov	r0, r2
 80049c4:	e7e9      	b.n	800499a <__lo0bits+0x2a>
 80049c6:	2000      	movs	r0, #0
 80049c8:	4770      	bx	lr
 80049ca:	2020      	movs	r0, #32
 80049cc:	4770      	bx	lr

080049ce <__i2b>:
 80049ce:	b510      	push	{r4, lr}
 80049d0:	460c      	mov	r4, r1
 80049d2:	2101      	movs	r1, #1
 80049d4:	f7ff ff27 	bl	8004826 <_Balloc>
 80049d8:	2201      	movs	r2, #1
 80049da:	6144      	str	r4, [r0, #20]
 80049dc:	6102      	str	r2, [r0, #16]
 80049de:	bd10      	pop	{r4, pc}

080049e0 <__multiply>:
 80049e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e4:	4614      	mov	r4, r2
 80049e6:	690a      	ldr	r2, [r1, #16]
 80049e8:	6923      	ldr	r3, [r4, #16]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	bfb8      	it	lt
 80049ee:	460b      	movlt	r3, r1
 80049f0:	4689      	mov	r9, r1
 80049f2:	bfbc      	itt	lt
 80049f4:	46a1      	movlt	r9, r4
 80049f6:	461c      	movlt	r4, r3
 80049f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80049fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004a00:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004a04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004a08:	eb07 060a 	add.w	r6, r7, sl
 8004a0c:	429e      	cmp	r6, r3
 8004a0e:	bfc8      	it	gt
 8004a10:	3101      	addgt	r1, #1
 8004a12:	f7ff ff08 	bl	8004826 <_Balloc>
 8004a16:	f100 0514 	add.w	r5, r0, #20
 8004a1a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004a1e:	462b      	mov	r3, r5
 8004a20:	2200      	movs	r2, #0
 8004a22:	4543      	cmp	r3, r8
 8004a24:	d316      	bcc.n	8004a54 <__multiply+0x74>
 8004a26:	f104 0214 	add.w	r2, r4, #20
 8004a2a:	f109 0114 	add.w	r1, r9, #20
 8004a2e:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004a32:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	9c01      	ldr	r4, [sp, #4]
 8004a3a:	4294      	cmp	r4, r2
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	d80c      	bhi.n	8004a5a <__multiply+0x7a>
 8004a40:	2e00      	cmp	r6, #0
 8004a42:	dd03      	ble.n	8004a4c <__multiply+0x6c>
 8004a44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d054      	beq.n	8004af6 <__multiply+0x116>
 8004a4c:	6106      	str	r6, [r0, #16]
 8004a4e:	b003      	add	sp, #12
 8004a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a54:	f843 2b04 	str.w	r2, [r3], #4
 8004a58:	e7e3      	b.n	8004a22 <__multiply+0x42>
 8004a5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8004a5e:	3204      	adds	r2, #4
 8004a60:	f1ba 0f00 	cmp.w	sl, #0
 8004a64:	d020      	beq.n	8004aa8 <__multiply+0xc8>
 8004a66:	46ae      	mov	lr, r5
 8004a68:	4689      	mov	r9, r1
 8004a6a:	f04f 0c00 	mov.w	ip, #0
 8004a6e:	f859 4b04 	ldr.w	r4, [r9], #4
 8004a72:	f8be b000 	ldrh.w	fp, [lr]
 8004a76:	b2a3      	uxth	r3, r4
 8004a78:	fb0a b303 	mla	r3, sl, r3, fp
 8004a7c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004a80:	f8de 4000 	ldr.w	r4, [lr]
 8004a84:	4463      	add	r3, ip
 8004a86:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004a8a:	fb0a c40b 	mla	r4, sl, fp, ip
 8004a8e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004a98:	454f      	cmp	r7, r9
 8004a9a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004a9e:	f84e 3b04 	str.w	r3, [lr], #4
 8004aa2:	d8e4      	bhi.n	8004a6e <__multiply+0x8e>
 8004aa4:	f8ce c000 	str.w	ip, [lr]
 8004aa8:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004aac:	f1b9 0f00 	cmp.w	r9, #0
 8004ab0:	d01f      	beq.n	8004af2 <__multiply+0x112>
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	46ae      	mov	lr, r5
 8004ab6:	468c      	mov	ip, r1
 8004ab8:	f04f 0a00 	mov.w	sl, #0
 8004abc:	f8bc 4000 	ldrh.w	r4, [ip]
 8004ac0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004ac4:	fb09 b404 	mla	r4, r9, r4, fp
 8004ac8:	44a2      	add	sl, r4
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004ad0:	f84e 3b04 	str.w	r3, [lr], #4
 8004ad4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004ad8:	f8be 4000 	ldrh.w	r4, [lr]
 8004adc:	0c1b      	lsrs	r3, r3, #16
 8004ade:	fb09 4303 	mla	r3, r9, r3, r4
 8004ae2:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004ae6:	4567      	cmp	r7, ip
 8004ae8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004aec:	d8e6      	bhi.n	8004abc <__multiply+0xdc>
 8004aee:	f8ce 3000 	str.w	r3, [lr]
 8004af2:	3504      	adds	r5, #4
 8004af4:	e7a0      	b.n	8004a38 <__multiply+0x58>
 8004af6:	3e01      	subs	r6, #1
 8004af8:	e7a2      	b.n	8004a40 <__multiply+0x60>
	...

08004afc <__pow5mult>:
 8004afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b00:	4615      	mov	r5, r2
 8004b02:	f012 0203 	ands.w	r2, r2, #3
 8004b06:	4606      	mov	r6, r0
 8004b08:	460f      	mov	r7, r1
 8004b0a:	d007      	beq.n	8004b1c <__pow5mult+0x20>
 8004b0c:	3a01      	subs	r2, #1
 8004b0e:	4c21      	ldr	r4, [pc, #132]	; (8004b94 <__pow5mult+0x98>)
 8004b10:	2300      	movs	r3, #0
 8004b12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b16:	f7ff fed1 	bl	80048bc <__multadd>
 8004b1a:	4607      	mov	r7, r0
 8004b1c:	10ad      	asrs	r5, r5, #2
 8004b1e:	d035      	beq.n	8004b8c <__pow5mult+0x90>
 8004b20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004b22:	b93c      	cbnz	r4, 8004b34 <__pow5mult+0x38>
 8004b24:	2010      	movs	r0, #16
 8004b26:	f7ff fe6b 	bl	8004800 <malloc>
 8004b2a:	6270      	str	r0, [r6, #36]	; 0x24
 8004b2c:	6044      	str	r4, [r0, #4]
 8004b2e:	6084      	str	r4, [r0, #8]
 8004b30:	6004      	str	r4, [r0, #0]
 8004b32:	60c4      	str	r4, [r0, #12]
 8004b34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004b38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b3c:	b94c      	cbnz	r4, 8004b52 <__pow5mult+0x56>
 8004b3e:	f240 2171 	movw	r1, #625	; 0x271
 8004b42:	4630      	mov	r0, r6
 8004b44:	f7ff ff43 	bl	80049ce <__i2b>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b4e:	4604      	mov	r4, r0
 8004b50:	6003      	str	r3, [r0, #0]
 8004b52:	f04f 0800 	mov.w	r8, #0
 8004b56:	07eb      	lsls	r3, r5, #31
 8004b58:	d50a      	bpl.n	8004b70 <__pow5mult+0x74>
 8004b5a:	4639      	mov	r1, r7
 8004b5c:	4622      	mov	r2, r4
 8004b5e:	4630      	mov	r0, r6
 8004b60:	f7ff ff3e 	bl	80049e0 <__multiply>
 8004b64:	4639      	mov	r1, r7
 8004b66:	4681      	mov	r9, r0
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f7ff fe90 	bl	800488e <_Bfree>
 8004b6e:	464f      	mov	r7, r9
 8004b70:	106d      	asrs	r5, r5, #1
 8004b72:	d00b      	beq.n	8004b8c <__pow5mult+0x90>
 8004b74:	6820      	ldr	r0, [r4, #0]
 8004b76:	b938      	cbnz	r0, 8004b88 <__pow5mult+0x8c>
 8004b78:	4622      	mov	r2, r4
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f7ff ff2f 	bl	80049e0 <__multiply>
 8004b82:	6020      	str	r0, [r4, #0]
 8004b84:	f8c0 8000 	str.w	r8, [r0]
 8004b88:	4604      	mov	r4, r0
 8004b8a:	e7e4      	b.n	8004b56 <__pow5mult+0x5a>
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b92:	bf00      	nop
 8004b94:	08005460 	.word	0x08005460

08004b98 <__lshift>:
 8004b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b9c:	460c      	mov	r4, r1
 8004b9e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ba2:	6923      	ldr	r3, [r4, #16]
 8004ba4:	6849      	ldr	r1, [r1, #4]
 8004ba6:	eb0a 0903 	add.w	r9, sl, r3
 8004baa:	68a3      	ldr	r3, [r4, #8]
 8004bac:	4607      	mov	r7, r0
 8004bae:	4616      	mov	r6, r2
 8004bb0:	f109 0501 	add.w	r5, r9, #1
 8004bb4:	42ab      	cmp	r3, r5
 8004bb6:	db31      	blt.n	8004c1c <__lshift+0x84>
 8004bb8:	4638      	mov	r0, r7
 8004bba:	f7ff fe34 	bl	8004826 <_Balloc>
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	4680      	mov	r8, r0
 8004bc2:	f100 0314 	add.w	r3, r0, #20
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4552      	cmp	r2, sl
 8004bca:	db2a      	blt.n	8004c22 <__lshift+0x8a>
 8004bcc:	6920      	ldr	r0, [r4, #16]
 8004bce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004bd2:	f104 0114 	add.w	r1, r4, #20
 8004bd6:	f016 021f 	ands.w	r2, r6, #31
 8004bda:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004bde:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004be2:	d022      	beq.n	8004c2a <__lshift+0x92>
 8004be4:	f1c2 0c20 	rsb	ip, r2, #32
 8004be8:	2000      	movs	r0, #0
 8004bea:	680e      	ldr	r6, [r1, #0]
 8004bec:	4096      	lsls	r6, r2
 8004bee:	4330      	orrs	r0, r6
 8004bf0:	f843 0b04 	str.w	r0, [r3], #4
 8004bf4:	f851 0b04 	ldr.w	r0, [r1], #4
 8004bf8:	458e      	cmp	lr, r1
 8004bfa:	fa20 f00c 	lsr.w	r0, r0, ip
 8004bfe:	d8f4      	bhi.n	8004bea <__lshift+0x52>
 8004c00:	6018      	str	r0, [r3, #0]
 8004c02:	b108      	cbz	r0, 8004c08 <__lshift+0x70>
 8004c04:	f109 0502 	add.w	r5, r9, #2
 8004c08:	3d01      	subs	r5, #1
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	f8c8 5010 	str.w	r5, [r8, #16]
 8004c10:	4621      	mov	r1, r4
 8004c12:	f7ff fe3c 	bl	800488e <_Bfree>
 8004c16:	4640      	mov	r0, r8
 8004c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c1c:	3101      	adds	r1, #1
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	e7c8      	b.n	8004bb4 <__lshift+0x1c>
 8004c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004c26:	3201      	adds	r2, #1
 8004c28:	e7ce      	b.n	8004bc8 <__lshift+0x30>
 8004c2a:	3b04      	subs	r3, #4
 8004c2c:	f851 2b04 	ldr.w	r2, [r1], #4
 8004c30:	f843 2f04 	str.w	r2, [r3, #4]!
 8004c34:	458e      	cmp	lr, r1
 8004c36:	d8f9      	bhi.n	8004c2c <__lshift+0x94>
 8004c38:	e7e6      	b.n	8004c08 <__lshift+0x70>

08004c3a <__mcmp>:
 8004c3a:	6903      	ldr	r3, [r0, #16]
 8004c3c:	690a      	ldr	r2, [r1, #16]
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	b530      	push	{r4, r5, lr}
 8004c42:	d10c      	bne.n	8004c5e <__mcmp+0x24>
 8004c44:	0092      	lsls	r2, r2, #2
 8004c46:	3014      	adds	r0, #20
 8004c48:	3114      	adds	r1, #20
 8004c4a:	1884      	adds	r4, r0, r2
 8004c4c:	4411      	add	r1, r2
 8004c4e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c52:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004c56:	4295      	cmp	r5, r2
 8004c58:	d003      	beq.n	8004c62 <__mcmp+0x28>
 8004c5a:	d305      	bcc.n	8004c68 <__mcmp+0x2e>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	4618      	mov	r0, r3
 8004c60:	bd30      	pop	{r4, r5, pc}
 8004c62:	42a0      	cmp	r0, r4
 8004c64:	d3f3      	bcc.n	8004c4e <__mcmp+0x14>
 8004c66:	e7fa      	b.n	8004c5e <__mcmp+0x24>
 8004c68:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6c:	e7f7      	b.n	8004c5e <__mcmp+0x24>

08004c6e <__mdiff>:
 8004c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c72:	460d      	mov	r5, r1
 8004c74:	4607      	mov	r7, r0
 8004c76:	4611      	mov	r1, r2
 8004c78:	4628      	mov	r0, r5
 8004c7a:	4614      	mov	r4, r2
 8004c7c:	f7ff ffdd 	bl	8004c3a <__mcmp>
 8004c80:	1e06      	subs	r6, r0, #0
 8004c82:	d108      	bne.n	8004c96 <__mdiff+0x28>
 8004c84:	4631      	mov	r1, r6
 8004c86:	4638      	mov	r0, r7
 8004c88:	f7ff fdcd 	bl	8004826 <_Balloc>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	6103      	str	r3, [r0, #16]
 8004c90:	6146      	str	r6, [r0, #20]
 8004c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c96:	bfa4      	itt	ge
 8004c98:	4623      	movge	r3, r4
 8004c9a:	462c      	movge	r4, r5
 8004c9c:	4638      	mov	r0, r7
 8004c9e:	6861      	ldr	r1, [r4, #4]
 8004ca0:	bfa6      	itte	ge
 8004ca2:	461d      	movge	r5, r3
 8004ca4:	2600      	movge	r6, #0
 8004ca6:	2601      	movlt	r6, #1
 8004ca8:	f7ff fdbd 	bl	8004826 <_Balloc>
 8004cac:	692b      	ldr	r3, [r5, #16]
 8004cae:	60c6      	str	r6, [r0, #12]
 8004cb0:	6926      	ldr	r6, [r4, #16]
 8004cb2:	f105 0914 	add.w	r9, r5, #20
 8004cb6:	f104 0214 	add.w	r2, r4, #20
 8004cba:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004cbe:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004cc2:	f100 0514 	add.w	r5, r0, #20
 8004cc6:	f04f 0c00 	mov.w	ip, #0
 8004cca:	f852 ab04 	ldr.w	sl, [r2], #4
 8004cce:	f859 4b04 	ldr.w	r4, [r9], #4
 8004cd2:	fa1c f18a 	uxtah	r1, ip, sl
 8004cd6:	b2a3      	uxth	r3, r4
 8004cd8:	1ac9      	subs	r1, r1, r3
 8004cda:	0c23      	lsrs	r3, r4, #16
 8004cdc:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004ce0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004ce4:	b289      	uxth	r1, r1
 8004ce6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004cea:	45c8      	cmp	r8, r9
 8004cec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004cf0:	4696      	mov	lr, r2
 8004cf2:	f845 3b04 	str.w	r3, [r5], #4
 8004cf6:	d8e8      	bhi.n	8004cca <__mdiff+0x5c>
 8004cf8:	45be      	cmp	lr, r7
 8004cfa:	d305      	bcc.n	8004d08 <__mdiff+0x9a>
 8004cfc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004d00:	b18b      	cbz	r3, 8004d26 <__mdiff+0xb8>
 8004d02:	6106      	str	r6, [r0, #16]
 8004d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d08:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004d0c:	fa1c f381 	uxtah	r3, ip, r1
 8004d10:	141a      	asrs	r2, r3, #16
 8004d12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d20:	f845 3b04 	str.w	r3, [r5], #4
 8004d24:	e7e8      	b.n	8004cf8 <__mdiff+0x8a>
 8004d26:	3e01      	subs	r6, #1
 8004d28:	e7e8      	b.n	8004cfc <__mdiff+0x8e>

08004d2a <__d2b>:
 8004d2a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d2e:	460e      	mov	r6, r1
 8004d30:	2101      	movs	r1, #1
 8004d32:	ec59 8b10 	vmov	r8, r9, d0
 8004d36:	4615      	mov	r5, r2
 8004d38:	f7ff fd75 	bl	8004826 <_Balloc>
 8004d3c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d40:	4607      	mov	r7, r0
 8004d42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d46:	bb34      	cbnz	r4, 8004d96 <__d2b+0x6c>
 8004d48:	9301      	str	r3, [sp, #4]
 8004d4a:	f1b8 0f00 	cmp.w	r8, #0
 8004d4e:	d027      	beq.n	8004da0 <__d2b+0x76>
 8004d50:	a802      	add	r0, sp, #8
 8004d52:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004d56:	f7ff fe0b 	bl	8004970 <__lo0bits>
 8004d5a:	9900      	ldr	r1, [sp, #0]
 8004d5c:	b1f0      	cbz	r0, 8004d9c <__d2b+0x72>
 8004d5e:	9a01      	ldr	r2, [sp, #4]
 8004d60:	f1c0 0320 	rsb	r3, r0, #32
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	40c2      	lsrs	r2, r0
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	9201      	str	r2, [sp, #4]
 8004d70:	9b01      	ldr	r3, [sp, #4]
 8004d72:	61bb      	str	r3, [r7, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf14      	ite	ne
 8004d78:	2102      	movne	r1, #2
 8004d7a:	2101      	moveq	r1, #1
 8004d7c:	6139      	str	r1, [r7, #16]
 8004d7e:	b1c4      	cbz	r4, 8004db2 <__d2b+0x88>
 8004d80:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004d84:	4404      	add	r4, r0
 8004d86:	6034      	str	r4, [r6, #0]
 8004d88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d8c:	6028      	str	r0, [r5, #0]
 8004d8e:	4638      	mov	r0, r7
 8004d90:	b003      	add	sp, #12
 8004d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d9a:	e7d5      	b.n	8004d48 <__d2b+0x1e>
 8004d9c:	6179      	str	r1, [r7, #20]
 8004d9e:	e7e7      	b.n	8004d70 <__d2b+0x46>
 8004da0:	a801      	add	r0, sp, #4
 8004da2:	f7ff fde5 	bl	8004970 <__lo0bits>
 8004da6:	9b01      	ldr	r3, [sp, #4]
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	2101      	movs	r1, #1
 8004dac:	6139      	str	r1, [r7, #16]
 8004dae:	3020      	adds	r0, #32
 8004db0:	e7e5      	b.n	8004d7e <__d2b+0x54>
 8004db2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004db6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004dba:	6030      	str	r0, [r6, #0]
 8004dbc:	6918      	ldr	r0, [r3, #16]
 8004dbe:	f7ff fdb8 	bl	8004932 <__hi0bits>
 8004dc2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004dc6:	e7e1      	b.n	8004d8c <__d2b+0x62>

08004dc8 <_calloc_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	fb02 f401 	mul.w	r4, r2, r1
 8004dce:	4621      	mov	r1, r4
 8004dd0:	f000 f856 	bl	8004e80 <_malloc_r>
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	b118      	cbz	r0, 8004de0 <_calloc_r+0x18>
 8004dd8:	4622      	mov	r2, r4
 8004dda:	2100      	movs	r1, #0
 8004ddc:	f7fe fa0e 	bl	80031fc <memset>
 8004de0:	4628      	mov	r0, r5
 8004de2:	bd38      	pop	{r3, r4, r5, pc}

08004de4 <_free_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4605      	mov	r5, r0
 8004de8:	2900      	cmp	r1, #0
 8004dea:	d045      	beq.n	8004e78 <_free_r+0x94>
 8004dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004df0:	1f0c      	subs	r4, r1, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	bfb8      	it	lt
 8004df6:	18e4      	addlt	r4, r4, r3
 8004df8:	f000 fa2c 	bl	8005254 <__malloc_lock>
 8004dfc:	4a1f      	ldr	r2, [pc, #124]	; (8004e7c <_free_r+0x98>)
 8004dfe:	6813      	ldr	r3, [r2, #0]
 8004e00:	4610      	mov	r0, r2
 8004e02:	b933      	cbnz	r3, 8004e12 <_free_r+0x2e>
 8004e04:	6063      	str	r3, [r4, #4]
 8004e06:	6014      	str	r4, [r2, #0]
 8004e08:	4628      	mov	r0, r5
 8004e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e0e:	f000 ba22 	b.w	8005256 <__malloc_unlock>
 8004e12:	42a3      	cmp	r3, r4
 8004e14:	d90c      	bls.n	8004e30 <_free_r+0x4c>
 8004e16:	6821      	ldr	r1, [r4, #0]
 8004e18:	1862      	adds	r2, r4, r1
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	bf04      	itt	eq
 8004e1e:	681a      	ldreq	r2, [r3, #0]
 8004e20:	685b      	ldreq	r3, [r3, #4]
 8004e22:	6063      	str	r3, [r4, #4]
 8004e24:	bf04      	itt	eq
 8004e26:	1852      	addeq	r2, r2, r1
 8004e28:	6022      	streq	r2, [r4, #0]
 8004e2a:	6004      	str	r4, [r0, #0]
 8004e2c:	e7ec      	b.n	8004e08 <_free_r+0x24>
 8004e2e:	4613      	mov	r3, r2
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	b10a      	cbz	r2, 8004e38 <_free_r+0x54>
 8004e34:	42a2      	cmp	r2, r4
 8004e36:	d9fa      	bls.n	8004e2e <_free_r+0x4a>
 8004e38:	6819      	ldr	r1, [r3, #0]
 8004e3a:	1858      	adds	r0, r3, r1
 8004e3c:	42a0      	cmp	r0, r4
 8004e3e:	d10b      	bne.n	8004e58 <_free_r+0x74>
 8004e40:	6820      	ldr	r0, [r4, #0]
 8004e42:	4401      	add	r1, r0
 8004e44:	1858      	adds	r0, r3, r1
 8004e46:	4282      	cmp	r2, r0
 8004e48:	6019      	str	r1, [r3, #0]
 8004e4a:	d1dd      	bne.n	8004e08 <_free_r+0x24>
 8004e4c:	6810      	ldr	r0, [r2, #0]
 8004e4e:	6852      	ldr	r2, [r2, #4]
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	4401      	add	r1, r0
 8004e54:	6019      	str	r1, [r3, #0]
 8004e56:	e7d7      	b.n	8004e08 <_free_r+0x24>
 8004e58:	d902      	bls.n	8004e60 <_free_r+0x7c>
 8004e5a:	230c      	movs	r3, #12
 8004e5c:	602b      	str	r3, [r5, #0]
 8004e5e:	e7d3      	b.n	8004e08 <_free_r+0x24>
 8004e60:	6820      	ldr	r0, [r4, #0]
 8004e62:	1821      	adds	r1, r4, r0
 8004e64:	428a      	cmp	r2, r1
 8004e66:	bf04      	itt	eq
 8004e68:	6811      	ldreq	r1, [r2, #0]
 8004e6a:	6852      	ldreq	r2, [r2, #4]
 8004e6c:	6062      	str	r2, [r4, #4]
 8004e6e:	bf04      	itt	eq
 8004e70:	1809      	addeq	r1, r1, r0
 8004e72:	6021      	streq	r1, [r4, #0]
 8004e74:	605c      	str	r4, [r3, #4]
 8004e76:	e7c7      	b.n	8004e08 <_free_r+0x24>
 8004e78:	bd38      	pop	{r3, r4, r5, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000200 	.word	0x20000200

08004e80 <_malloc_r>:
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	1ccd      	adds	r5, r1, #3
 8004e84:	f025 0503 	bic.w	r5, r5, #3
 8004e88:	3508      	adds	r5, #8
 8004e8a:	2d0c      	cmp	r5, #12
 8004e8c:	bf38      	it	cc
 8004e8e:	250c      	movcc	r5, #12
 8004e90:	2d00      	cmp	r5, #0
 8004e92:	4606      	mov	r6, r0
 8004e94:	db01      	blt.n	8004e9a <_malloc_r+0x1a>
 8004e96:	42a9      	cmp	r1, r5
 8004e98:	d903      	bls.n	8004ea2 <_malloc_r+0x22>
 8004e9a:	230c      	movs	r3, #12
 8004e9c:	6033      	str	r3, [r6, #0]
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	bd70      	pop	{r4, r5, r6, pc}
 8004ea2:	f000 f9d7 	bl	8005254 <__malloc_lock>
 8004ea6:	4a23      	ldr	r2, [pc, #140]	; (8004f34 <_malloc_r+0xb4>)
 8004ea8:	6814      	ldr	r4, [r2, #0]
 8004eaa:	4621      	mov	r1, r4
 8004eac:	b991      	cbnz	r1, 8004ed4 <_malloc_r+0x54>
 8004eae:	4c22      	ldr	r4, [pc, #136]	; (8004f38 <_malloc_r+0xb8>)
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	b91b      	cbnz	r3, 8004ebc <_malloc_r+0x3c>
 8004eb4:	4630      	mov	r0, r6
 8004eb6:	f000 f991 	bl	80051dc <_sbrk_r>
 8004eba:	6020      	str	r0, [r4, #0]
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f000 f98c 	bl	80051dc <_sbrk_r>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d126      	bne.n	8004f16 <_malloc_r+0x96>
 8004ec8:	230c      	movs	r3, #12
 8004eca:	6033      	str	r3, [r6, #0]
 8004ecc:	4630      	mov	r0, r6
 8004ece:	f000 f9c2 	bl	8005256 <__malloc_unlock>
 8004ed2:	e7e4      	b.n	8004e9e <_malloc_r+0x1e>
 8004ed4:	680b      	ldr	r3, [r1, #0]
 8004ed6:	1b5b      	subs	r3, r3, r5
 8004ed8:	d41a      	bmi.n	8004f10 <_malloc_r+0x90>
 8004eda:	2b0b      	cmp	r3, #11
 8004edc:	d90f      	bls.n	8004efe <_malloc_r+0x7e>
 8004ede:	600b      	str	r3, [r1, #0]
 8004ee0:	50cd      	str	r5, [r1, r3]
 8004ee2:	18cc      	adds	r4, r1, r3
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f000 f9b6 	bl	8005256 <__malloc_unlock>
 8004eea:	f104 000b 	add.w	r0, r4, #11
 8004eee:	1d23      	adds	r3, r4, #4
 8004ef0:	f020 0007 	bic.w	r0, r0, #7
 8004ef4:	1ac3      	subs	r3, r0, r3
 8004ef6:	d01b      	beq.n	8004f30 <_malloc_r+0xb0>
 8004ef8:	425a      	negs	r2, r3
 8004efa:	50e2      	str	r2, [r4, r3]
 8004efc:	bd70      	pop	{r4, r5, r6, pc}
 8004efe:	428c      	cmp	r4, r1
 8004f00:	bf0d      	iteet	eq
 8004f02:	6863      	ldreq	r3, [r4, #4]
 8004f04:	684b      	ldrne	r3, [r1, #4]
 8004f06:	6063      	strne	r3, [r4, #4]
 8004f08:	6013      	streq	r3, [r2, #0]
 8004f0a:	bf18      	it	ne
 8004f0c:	460c      	movne	r4, r1
 8004f0e:	e7e9      	b.n	8004ee4 <_malloc_r+0x64>
 8004f10:	460c      	mov	r4, r1
 8004f12:	6849      	ldr	r1, [r1, #4]
 8004f14:	e7ca      	b.n	8004eac <_malloc_r+0x2c>
 8004f16:	1cc4      	adds	r4, r0, #3
 8004f18:	f024 0403 	bic.w	r4, r4, #3
 8004f1c:	42a0      	cmp	r0, r4
 8004f1e:	d005      	beq.n	8004f2c <_malloc_r+0xac>
 8004f20:	1a21      	subs	r1, r4, r0
 8004f22:	4630      	mov	r0, r6
 8004f24:	f000 f95a 	bl	80051dc <_sbrk_r>
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d0cd      	beq.n	8004ec8 <_malloc_r+0x48>
 8004f2c:	6025      	str	r5, [r4, #0]
 8004f2e:	e7d9      	b.n	8004ee4 <_malloc_r+0x64>
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
 8004f32:	bf00      	nop
 8004f34:	20000200 	.word	0x20000200
 8004f38:	20000204 	.word	0x20000204

08004f3c <__ssputs_r>:
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	688e      	ldr	r6, [r1, #8]
 8004f42:	429e      	cmp	r6, r3
 8004f44:	4682      	mov	sl, r0
 8004f46:	460c      	mov	r4, r1
 8004f48:	4691      	mov	r9, r2
 8004f4a:	4698      	mov	r8, r3
 8004f4c:	d835      	bhi.n	8004fba <__ssputs_r+0x7e>
 8004f4e:	898a      	ldrh	r2, [r1, #12]
 8004f50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f54:	d031      	beq.n	8004fba <__ssputs_r+0x7e>
 8004f56:	6825      	ldr	r5, [r4, #0]
 8004f58:	6909      	ldr	r1, [r1, #16]
 8004f5a:	1a6f      	subs	r7, r5, r1
 8004f5c:	6965      	ldr	r5, [r4, #20]
 8004f5e:	2302      	movs	r3, #2
 8004f60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f64:	fb95 f5f3 	sdiv	r5, r5, r3
 8004f68:	f108 0301 	add.w	r3, r8, #1
 8004f6c:	443b      	add	r3, r7
 8004f6e:	429d      	cmp	r5, r3
 8004f70:	bf38      	it	cc
 8004f72:	461d      	movcc	r5, r3
 8004f74:	0553      	lsls	r3, r2, #21
 8004f76:	d531      	bpl.n	8004fdc <__ssputs_r+0xa0>
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f7ff ff81 	bl	8004e80 <_malloc_r>
 8004f7e:	4606      	mov	r6, r0
 8004f80:	b950      	cbnz	r0, 8004f98 <__ssputs_r+0x5c>
 8004f82:	230c      	movs	r3, #12
 8004f84:	f8ca 3000 	str.w	r3, [sl]
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8e:	81a3      	strh	r3, [r4, #12]
 8004f90:	f04f 30ff 	mov.w	r0, #4294967295
 8004f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f98:	463a      	mov	r2, r7
 8004f9a:	6921      	ldr	r1, [r4, #16]
 8004f9c:	f7ff fc38 	bl	8004810 <memcpy>
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	6126      	str	r6, [r4, #16]
 8004fae:	6165      	str	r5, [r4, #20]
 8004fb0:	443e      	add	r6, r7
 8004fb2:	1bed      	subs	r5, r5, r7
 8004fb4:	6026      	str	r6, [r4, #0]
 8004fb6:	60a5      	str	r5, [r4, #8]
 8004fb8:	4646      	mov	r6, r8
 8004fba:	4546      	cmp	r6, r8
 8004fbc:	bf28      	it	cs
 8004fbe:	4646      	movcs	r6, r8
 8004fc0:	4632      	mov	r2, r6
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	6820      	ldr	r0, [r4, #0]
 8004fc6:	f000 f92b 	bl	8005220 <memmove>
 8004fca:	68a3      	ldr	r3, [r4, #8]
 8004fcc:	1b9b      	subs	r3, r3, r6
 8004fce:	60a3      	str	r3, [r4, #8]
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	441e      	add	r6, r3
 8004fd4:	6026      	str	r6, [r4, #0]
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fdc:	462a      	mov	r2, r5
 8004fde:	f000 f93b 	bl	8005258 <_realloc_r>
 8004fe2:	4606      	mov	r6, r0
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d1e1      	bne.n	8004fac <__ssputs_r+0x70>
 8004fe8:	6921      	ldr	r1, [r4, #16]
 8004fea:	4650      	mov	r0, sl
 8004fec:	f7ff fefa 	bl	8004de4 <_free_r>
 8004ff0:	e7c7      	b.n	8004f82 <__ssputs_r+0x46>
	...

08004ff4 <_svfiprintf_r>:
 8004ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff8:	b09d      	sub	sp, #116	; 0x74
 8004ffa:	4680      	mov	r8, r0
 8004ffc:	9303      	str	r3, [sp, #12]
 8004ffe:	898b      	ldrh	r3, [r1, #12]
 8005000:	061c      	lsls	r4, r3, #24
 8005002:	460d      	mov	r5, r1
 8005004:	4616      	mov	r6, r2
 8005006:	d50f      	bpl.n	8005028 <_svfiprintf_r+0x34>
 8005008:	690b      	ldr	r3, [r1, #16]
 800500a:	b96b      	cbnz	r3, 8005028 <_svfiprintf_r+0x34>
 800500c:	2140      	movs	r1, #64	; 0x40
 800500e:	f7ff ff37 	bl	8004e80 <_malloc_r>
 8005012:	6028      	str	r0, [r5, #0]
 8005014:	6128      	str	r0, [r5, #16]
 8005016:	b928      	cbnz	r0, 8005024 <_svfiprintf_r+0x30>
 8005018:	230c      	movs	r3, #12
 800501a:	f8c8 3000 	str.w	r3, [r8]
 800501e:	f04f 30ff 	mov.w	r0, #4294967295
 8005022:	e0c5      	b.n	80051b0 <_svfiprintf_r+0x1bc>
 8005024:	2340      	movs	r3, #64	; 0x40
 8005026:	616b      	str	r3, [r5, #20]
 8005028:	2300      	movs	r3, #0
 800502a:	9309      	str	r3, [sp, #36]	; 0x24
 800502c:	2320      	movs	r3, #32
 800502e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005032:	2330      	movs	r3, #48	; 0x30
 8005034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005038:	f04f 0b01 	mov.w	fp, #1
 800503c:	4637      	mov	r7, r6
 800503e:	463c      	mov	r4, r7
 8005040:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d13c      	bne.n	80050c2 <_svfiprintf_r+0xce>
 8005048:	ebb7 0a06 	subs.w	sl, r7, r6
 800504c:	d00b      	beq.n	8005066 <_svfiprintf_r+0x72>
 800504e:	4653      	mov	r3, sl
 8005050:	4632      	mov	r2, r6
 8005052:	4629      	mov	r1, r5
 8005054:	4640      	mov	r0, r8
 8005056:	f7ff ff71 	bl	8004f3c <__ssputs_r>
 800505a:	3001      	adds	r0, #1
 800505c:	f000 80a3 	beq.w	80051a6 <_svfiprintf_r+0x1b2>
 8005060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005062:	4453      	add	r3, sl
 8005064:	9309      	str	r3, [sp, #36]	; 0x24
 8005066:	783b      	ldrb	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 809c 	beq.w	80051a6 <_svfiprintf_r+0x1b2>
 800506e:	2300      	movs	r3, #0
 8005070:	f04f 32ff 	mov.w	r2, #4294967295
 8005074:	9304      	str	r3, [sp, #16]
 8005076:	9307      	str	r3, [sp, #28]
 8005078:	9205      	str	r2, [sp, #20]
 800507a:	9306      	str	r3, [sp, #24]
 800507c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005080:	931a      	str	r3, [sp, #104]	; 0x68
 8005082:	2205      	movs	r2, #5
 8005084:	7821      	ldrb	r1, [r4, #0]
 8005086:	4850      	ldr	r0, [pc, #320]	; (80051c8 <_svfiprintf_r+0x1d4>)
 8005088:	f7fb f8b2 	bl	80001f0 <memchr>
 800508c:	1c67      	adds	r7, r4, #1
 800508e:	9b04      	ldr	r3, [sp, #16]
 8005090:	b9d8      	cbnz	r0, 80050ca <_svfiprintf_r+0xd6>
 8005092:	06d9      	lsls	r1, r3, #27
 8005094:	bf44      	itt	mi
 8005096:	2220      	movmi	r2, #32
 8005098:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800509c:	071a      	lsls	r2, r3, #28
 800509e:	bf44      	itt	mi
 80050a0:	222b      	movmi	r2, #43	; 0x2b
 80050a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050a6:	7822      	ldrb	r2, [r4, #0]
 80050a8:	2a2a      	cmp	r2, #42	; 0x2a
 80050aa:	d016      	beq.n	80050da <_svfiprintf_r+0xe6>
 80050ac:	9a07      	ldr	r2, [sp, #28]
 80050ae:	2100      	movs	r1, #0
 80050b0:	200a      	movs	r0, #10
 80050b2:	4627      	mov	r7, r4
 80050b4:	3401      	adds	r4, #1
 80050b6:	783b      	ldrb	r3, [r7, #0]
 80050b8:	3b30      	subs	r3, #48	; 0x30
 80050ba:	2b09      	cmp	r3, #9
 80050bc:	d951      	bls.n	8005162 <_svfiprintf_r+0x16e>
 80050be:	b1c9      	cbz	r1, 80050f4 <_svfiprintf_r+0x100>
 80050c0:	e011      	b.n	80050e6 <_svfiprintf_r+0xf2>
 80050c2:	2b25      	cmp	r3, #37	; 0x25
 80050c4:	d0c0      	beq.n	8005048 <_svfiprintf_r+0x54>
 80050c6:	4627      	mov	r7, r4
 80050c8:	e7b9      	b.n	800503e <_svfiprintf_r+0x4a>
 80050ca:	4a3f      	ldr	r2, [pc, #252]	; (80051c8 <_svfiprintf_r+0x1d4>)
 80050cc:	1a80      	subs	r0, r0, r2
 80050ce:	fa0b f000 	lsl.w	r0, fp, r0
 80050d2:	4318      	orrs	r0, r3
 80050d4:	9004      	str	r0, [sp, #16]
 80050d6:	463c      	mov	r4, r7
 80050d8:	e7d3      	b.n	8005082 <_svfiprintf_r+0x8e>
 80050da:	9a03      	ldr	r2, [sp, #12]
 80050dc:	1d11      	adds	r1, r2, #4
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	9103      	str	r1, [sp, #12]
 80050e2:	2a00      	cmp	r2, #0
 80050e4:	db01      	blt.n	80050ea <_svfiprintf_r+0xf6>
 80050e6:	9207      	str	r2, [sp, #28]
 80050e8:	e004      	b.n	80050f4 <_svfiprintf_r+0x100>
 80050ea:	4252      	negs	r2, r2
 80050ec:	f043 0302 	orr.w	r3, r3, #2
 80050f0:	9207      	str	r2, [sp, #28]
 80050f2:	9304      	str	r3, [sp, #16]
 80050f4:	783b      	ldrb	r3, [r7, #0]
 80050f6:	2b2e      	cmp	r3, #46	; 0x2e
 80050f8:	d10e      	bne.n	8005118 <_svfiprintf_r+0x124>
 80050fa:	787b      	ldrb	r3, [r7, #1]
 80050fc:	2b2a      	cmp	r3, #42	; 0x2a
 80050fe:	f107 0101 	add.w	r1, r7, #1
 8005102:	d132      	bne.n	800516a <_svfiprintf_r+0x176>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	1d1a      	adds	r2, r3, #4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	9203      	str	r2, [sp, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	bfb8      	it	lt
 8005110:	f04f 33ff 	movlt.w	r3, #4294967295
 8005114:	3702      	adds	r7, #2
 8005116:	9305      	str	r3, [sp, #20]
 8005118:	4c2c      	ldr	r4, [pc, #176]	; (80051cc <_svfiprintf_r+0x1d8>)
 800511a:	7839      	ldrb	r1, [r7, #0]
 800511c:	2203      	movs	r2, #3
 800511e:	4620      	mov	r0, r4
 8005120:	f7fb f866 	bl	80001f0 <memchr>
 8005124:	b138      	cbz	r0, 8005136 <_svfiprintf_r+0x142>
 8005126:	2340      	movs	r3, #64	; 0x40
 8005128:	1b00      	subs	r0, r0, r4
 800512a:	fa03 f000 	lsl.w	r0, r3, r0
 800512e:	9b04      	ldr	r3, [sp, #16]
 8005130:	4303      	orrs	r3, r0
 8005132:	9304      	str	r3, [sp, #16]
 8005134:	3701      	adds	r7, #1
 8005136:	7839      	ldrb	r1, [r7, #0]
 8005138:	4825      	ldr	r0, [pc, #148]	; (80051d0 <_svfiprintf_r+0x1dc>)
 800513a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800513e:	2206      	movs	r2, #6
 8005140:	1c7e      	adds	r6, r7, #1
 8005142:	f7fb f855 	bl	80001f0 <memchr>
 8005146:	2800      	cmp	r0, #0
 8005148:	d035      	beq.n	80051b6 <_svfiprintf_r+0x1c2>
 800514a:	4b22      	ldr	r3, [pc, #136]	; (80051d4 <_svfiprintf_r+0x1e0>)
 800514c:	b9fb      	cbnz	r3, 800518e <_svfiprintf_r+0x19a>
 800514e:	9b03      	ldr	r3, [sp, #12]
 8005150:	3307      	adds	r3, #7
 8005152:	f023 0307 	bic.w	r3, r3, #7
 8005156:	3308      	adds	r3, #8
 8005158:	9303      	str	r3, [sp, #12]
 800515a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800515c:	444b      	add	r3, r9
 800515e:	9309      	str	r3, [sp, #36]	; 0x24
 8005160:	e76c      	b.n	800503c <_svfiprintf_r+0x48>
 8005162:	fb00 3202 	mla	r2, r0, r2, r3
 8005166:	2101      	movs	r1, #1
 8005168:	e7a3      	b.n	80050b2 <_svfiprintf_r+0xbe>
 800516a:	2300      	movs	r3, #0
 800516c:	9305      	str	r3, [sp, #20]
 800516e:	4618      	mov	r0, r3
 8005170:	240a      	movs	r4, #10
 8005172:	460f      	mov	r7, r1
 8005174:	3101      	adds	r1, #1
 8005176:	783a      	ldrb	r2, [r7, #0]
 8005178:	3a30      	subs	r2, #48	; 0x30
 800517a:	2a09      	cmp	r2, #9
 800517c:	d903      	bls.n	8005186 <_svfiprintf_r+0x192>
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0ca      	beq.n	8005118 <_svfiprintf_r+0x124>
 8005182:	9005      	str	r0, [sp, #20]
 8005184:	e7c8      	b.n	8005118 <_svfiprintf_r+0x124>
 8005186:	fb04 2000 	mla	r0, r4, r0, r2
 800518a:	2301      	movs	r3, #1
 800518c:	e7f1      	b.n	8005172 <_svfiprintf_r+0x17e>
 800518e:	ab03      	add	r3, sp, #12
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	462a      	mov	r2, r5
 8005194:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <_svfiprintf_r+0x1e4>)
 8005196:	a904      	add	r1, sp, #16
 8005198:	4640      	mov	r0, r8
 800519a:	f7fe f8cd 	bl	8003338 <_printf_float>
 800519e:	f1b0 3fff 	cmp.w	r0, #4294967295
 80051a2:	4681      	mov	r9, r0
 80051a4:	d1d9      	bne.n	800515a <_svfiprintf_r+0x166>
 80051a6:	89ab      	ldrh	r3, [r5, #12]
 80051a8:	065b      	lsls	r3, r3, #25
 80051aa:	f53f af38 	bmi.w	800501e <_svfiprintf_r+0x2a>
 80051ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051b0:	b01d      	add	sp, #116	; 0x74
 80051b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b6:	ab03      	add	r3, sp, #12
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	462a      	mov	r2, r5
 80051bc:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <_svfiprintf_r+0x1e4>)
 80051be:	a904      	add	r1, sp, #16
 80051c0:	4640      	mov	r0, r8
 80051c2:	f7fe fb6f 	bl	80038a4 <_printf_i>
 80051c6:	e7ea      	b.n	800519e <_svfiprintf_r+0x1aa>
 80051c8:	0800546c 	.word	0x0800546c
 80051cc:	08005472 	.word	0x08005472
 80051d0:	08005476 	.word	0x08005476
 80051d4:	08003339 	.word	0x08003339
 80051d8:	08004f3d 	.word	0x08004f3d

080051dc <_sbrk_r>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	4c06      	ldr	r4, [pc, #24]	; (80051f8 <_sbrk_r+0x1c>)
 80051e0:	2300      	movs	r3, #0
 80051e2:	4605      	mov	r5, r0
 80051e4:	4608      	mov	r0, r1
 80051e6:	6023      	str	r3, [r4, #0]
 80051e8:	f7fd fdf8 	bl	8002ddc <_sbrk>
 80051ec:	1c43      	adds	r3, r0, #1
 80051ee:	d102      	bne.n	80051f6 <_sbrk_r+0x1a>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	b103      	cbz	r3, 80051f6 <_sbrk_r+0x1a>
 80051f4:	602b      	str	r3, [r5, #0]
 80051f6:	bd38      	pop	{r3, r4, r5, pc}
 80051f8:	2000041c 	.word	0x2000041c

080051fc <__ascii_mbtowc>:
 80051fc:	b082      	sub	sp, #8
 80051fe:	b901      	cbnz	r1, 8005202 <__ascii_mbtowc+0x6>
 8005200:	a901      	add	r1, sp, #4
 8005202:	b142      	cbz	r2, 8005216 <__ascii_mbtowc+0x1a>
 8005204:	b14b      	cbz	r3, 800521a <__ascii_mbtowc+0x1e>
 8005206:	7813      	ldrb	r3, [r2, #0]
 8005208:	600b      	str	r3, [r1, #0]
 800520a:	7812      	ldrb	r2, [r2, #0]
 800520c:	1c10      	adds	r0, r2, #0
 800520e:	bf18      	it	ne
 8005210:	2001      	movne	r0, #1
 8005212:	b002      	add	sp, #8
 8005214:	4770      	bx	lr
 8005216:	4610      	mov	r0, r2
 8005218:	e7fb      	b.n	8005212 <__ascii_mbtowc+0x16>
 800521a:	f06f 0001 	mvn.w	r0, #1
 800521e:	e7f8      	b.n	8005212 <__ascii_mbtowc+0x16>

08005220 <memmove>:
 8005220:	4288      	cmp	r0, r1
 8005222:	b510      	push	{r4, lr}
 8005224:	eb01 0302 	add.w	r3, r1, r2
 8005228:	d803      	bhi.n	8005232 <memmove+0x12>
 800522a:	1e42      	subs	r2, r0, #1
 800522c:	4299      	cmp	r1, r3
 800522e:	d10c      	bne.n	800524a <memmove+0x2a>
 8005230:	bd10      	pop	{r4, pc}
 8005232:	4298      	cmp	r0, r3
 8005234:	d2f9      	bcs.n	800522a <memmove+0xa>
 8005236:	1881      	adds	r1, r0, r2
 8005238:	1ad2      	subs	r2, r2, r3
 800523a:	42d3      	cmn	r3, r2
 800523c:	d100      	bne.n	8005240 <memmove+0x20>
 800523e:	bd10      	pop	{r4, pc}
 8005240:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005244:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005248:	e7f7      	b.n	800523a <memmove+0x1a>
 800524a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800524e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005252:	e7eb      	b.n	800522c <memmove+0xc>

08005254 <__malloc_lock>:
 8005254:	4770      	bx	lr

08005256 <__malloc_unlock>:
 8005256:	4770      	bx	lr

08005258 <_realloc_r>:
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	4607      	mov	r7, r0
 800525c:	4614      	mov	r4, r2
 800525e:	460e      	mov	r6, r1
 8005260:	b921      	cbnz	r1, 800526c <_realloc_r+0x14>
 8005262:	4611      	mov	r1, r2
 8005264:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005268:	f7ff be0a 	b.w	8004e80 <_malloc_r>
 800526c:	b922      	cbnz	r2, 8005278 <_realloc_r+0x20>
 800526e:	f7ff fdb9 	bl	8004de4 <_free_r>
 8005272:	4625      	mov	r5, r4
 8005274:	4628      	mov	r0, r5
 8005276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005278:	f000 f821 	bl	80052be <_malloc_usable_size_r>
 800527c:	4284      	cmp	r4, r0
 800527e:	d90f      	bls.n	80052a0 <_realloc_r+0x48>
 8005280:	4621      	mov	r1, r4
 8005282:	4638      	mov	r0, r7
 8005284:	f7ff fdfc 	bl	8004e80 <_malloc_r>
 8005288:	4605      	mov	r5, r0
 800528a:	2800      	cmp	r0, #0
 800528c:	d0f2      	beq.n	8005274 <_realloc_r+0x1c>
 800528e:	4631      	mov	r1, r6
 8005290:	4622      	mov	r2, r4
 8005292:	f7ff fabd 	bl	8004810 <memcpy>
 8005296:	4631      	mov	r1, r6
 8005298:	4638      	mov	r0, r7
 800529a:	f7ff fda3 	bl	8004de4 <_free_r>
 800529e:	e7e9      	b.n	8005274 <_realloc_r+0x1c>
 80052a0:	4635      	mov	r5, r6
 80052a2:	e7e7      	b.n	8005274 <_realloc_r+0x1c>

080052a4 <__ascii_wctomb>:
 80052a4:	b149      	cbz	r1, 80052ba <__ascii_wctomb+0x16>
 80052a6:	2aff      	cmp	r2, #255	; 0xff
 80052a8:	bf85      	ittet	hi
 80052aa:	238a      	movhi	r3, #138	; 0x8a
 80052ac:	6003      	strhi	r3, [r0, #0]
 80052ae:	700a      	strbls	r2, [r1, #0]
 80052b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80052b4:	bf98      	it	ls
 80052b6:	2001      	movls	r0, #1
 80052b8:	4770      	bx	lr
 80052ba:	4608      	mov	r0, r1
 80052bc:	4770      	bx	lr

080052be <_malloc_usable_size_r>:
 80052be:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80052c2:	2800      	cmp	r0, #0
 80052c4:	f1a0 0004 	sub.w	r0, r0, #4
 80052c8:	bfbc      	itt	lt
 80052ca:	580b      	ldrlt	r3, [r1, r0]
 80052cc:	18c0      	addlt	r0, r0, r3
 80052ce:	4770      	bx	lr

080052d0 <_init>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	bf00      	nop
 80052d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d6:	bc08      	pop	{r3}
 80052d8:	469e      	mov	lr, r3
 80052da:	4770      	bx	lr

080052dc <_fini>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	bf00      	nop
 80052e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e2:	bc08      	pop	{r3}
 80052e4:	469e      	mov	lr, r3
 80052e6:	4770      	bx	lr
